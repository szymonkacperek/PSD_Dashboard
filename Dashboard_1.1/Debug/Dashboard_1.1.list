
Dashboard_1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071d0  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000041d8  080073b8  080073b8  000173b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800b590  0800b590  0001b590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800b594  0800b594  0001b594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000218  20000000  0800b598  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000048c  20000218  0800b7b0  00020218  2**3
                  ALLOC
  7 ._user_heap_stack 00000604  200006a4  0800b7b0  000206a4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
  9 .debug_info   00024aa0  00000000  00000000  00020241  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004a47  00000000  00000000  00044ce1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00012f2b  00000000  00000000  00049728  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001998  00000000  00000000  0005c658  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001878  00000000  00000000  0005dff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00019628  00000000  00000000  0005f868  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00015db9  00000000  00000000  00078e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0008b28b  00000000  00000000  0008ec49  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  00119ed4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005178  00000000  00000000  00119f50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000218 	.word	0x20000218
 8000204:	00000000 	.word	0x00000000
 8000208:	080073a0 	.word	0x080073a0

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000021c 	.word	0x2000021c
 8000224:	080073a0 	.word	0x080073a0

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000376:	f1a4 0401 	sub.w	r4, r4, #1
 800037a:	d1e9      	bne.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba0:	b510      	push	{r4, lr}
 8000ba2:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ba4:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <HAL_InitTick+0x40>)
 8000ba6:	7818      	ldrb	r0, [r3, #0]
 8000ba8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bac:	fbb3 f3f0 	udiv	r3, r3, r0
 8000bb0:	4a0c      	ldr	r2, [pc, #48]	; (8000be4 <HAL_InitTick+0x44>)
 8000bb2:	6810      	ldr	r0, [r2, #0]
 8000bb4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000bb8:	f000 fa84 	bl	80010c4 <HAL_SYSTICK_Config>
 8000bbc:	b968      	cbnz	r0, 8000bda <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bbe:	2c0f      	cmp	r4, #15
 8000bc0:	d901      	bls.n	8000bc6 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	e00a      	b.n	8000bdc <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	4621      	mov	r1, r4
 8000bca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bce:	f000 fa37 	bl	8001040 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bd2:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <HAL_InitTick+0x48>)
 8000bd4:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	e000      	b.n	8000bdc <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000bda:	2001      	movs	r0, #1
}
 8000bdc:	bd10      	pop	{r4, pc}
 8000bde:	bf00      	nop
 8000be0:	20000000 	.word	0x20000000
 8000be4:	20000044 	.word	0x20000044
 8000be8:	20000004 	.word	0x20000004

08000bec <HAL_Init>:
{
 8000bec:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bee:	4a07      	ldr	r2, [pc, #28]	; (8000c0c <HAL_Init+0x20>)
 8000bf0:	6813      	ldr	r3, [r2, #0]
 8000bf2:	f043 0310 	orr.w	r3, r3, #16
 8000bf6:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf8:	2003      	movs	r0, #3
 8000bfa:	f000 fa0f 	bl	800101c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bfe:	2000      	movs	r0, #0
 8000c00:	f7ff ffce 	bl	8000ba0 <HAL_InitTick>
  HAL_MspInit();
 8000c04:	f004 f844 	bl	8004c90 <HAL_MspInit>
}
 8000c08:	2000      	movs	r0, #0
 8000c0a:	bd08      	pop	{r3, pc}
 8000c0c:	40022000 	.word	0x40022000

08000c10 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000c10:	4a03      	ldr	r2, [pc, #12]	; (8000c20 <HAL_IncTick+0x10>)
 8000c12:	6811      	ldr	r1, [r2, #0]
 8000c14:	4b03      	ldr	r3, [pc, #12]	; (8000c24 <HAL_IncTick+0x14>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	440b      	add	r3, r1
 8000c1a:	6013      	str	r3, [r2, #0]
}
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	200003f8 	.word	0x200003f8
 8000c24:	20000000 	.word	0x20000000

08000c28 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000c28:	4b01      	ldr	r3, [pc, #4]	; (8000c30 <HAL_GetTick+0x8>)
 8000c2a:	6818      	ldr	r0, [r3, #0]
}
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	200003f8 	.word	0x200003f8

08000c34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c34:	b538      	push	{r3, r4, r5, lr}
 8000c36:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000c38:	f7ff fff6 	bl	8000c28 <HAL_GetTick>
 8000c3c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c3e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8000c42:	d002      	beq.n	8000c4a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c44:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <HAL_Delay+0x24>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c4a:	f7ff ffed 	bl	8000c28 <HAL_GetTick>
 8000c4e:	1b40      	subs	r0, r0, r5
 8000c50:	42a0      	cmp	r0, r4
 8000c52:	d3fa      	bcc.n	8000c4a <HAL_Delay+0x16>
  {
  }
}
 8000c54:	bd38      	pop	{r3, r4, r5, pc}
 8000c56:	bf00      	nop
 8000c58:	20000000 	.word	0x20000000

08000c5c <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000c5c:	2800      	cmp	r0, #0
 8000c5e:	f000 80a1 	beq.w	8000da4 <HAL_CAN_Init+0x148>
{
 8000c62:	b538      	push	{r3, r4, r5, lr}
 8000c64:	4604      	mov	r4, r0
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000c66:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000c6a:	b1d3      	cbz	r3, 8000ca2 <HAL_CAN_Init+0x46>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000c6c:	6822      	ldr	r2, [r4, #0]
 8000c6e:	6813      	ldr	r3, [r2, #0]
 8000c70:	f023 0302 	bic.w	r3, r3, #2
 8000c74:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c76:	f7ff ffd7 	bl	8000c28 <HAL_GetTick>
 8000c7a:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c7c:	6823      	ldr	r3, [r4, #0]
 8000c7e:	685a      	ldr	r2, [r3, #4]
 8000c80:	f012 0f02 	tst.w	r2, #2
 8000c84:	d010      	beq.n	8000ca8 <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c86:	f7ff ffcf 	bl	8000c28 <HAL_GetTick>
 8000c8a:	1b40      	subs	r0, r0, r5
 8000c8c:	280a      	cmp	r0, #10
 8000c8e:	d9f5      	bls.n	8000c7c <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c96:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c98:	2305      	movs	r3, #5
 8000c9a:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 8000c9e:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8000ca0:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 8000ca2:	f002 ff7b 	bl	8003b9c <HAL_CAN_MspInit>
 8000ca6:	e7e1      	b.n	8000c6c <HAL_CAN_Init+0x10>
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	f042 0201 	orr.w	r2, r2, #1
 8000cae:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000cb0:	f7ff ffba 	bl	8000c28 <HAL_GetTick>
 8000cb4:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000cb6:	6823      	ldr	r3, [r4, #0]
 8000cb8:	685a      	ldr	r2, [r3, #4]
 8000cba:	f012 0f01 	tst.w	r2, #1
 8000cbe:	d10d      	bne.n	8000cdc <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000cc0:	f7ff ffb2 	bl	8000c28 <HAL_GetTick>
 8000cc4:	1b40      	subs	r0, r0, r5
 8000cc6:	280a      	cmp	r0, #10
 8000cc8:	d9f5      	bls.n	8000cb6 <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ccc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd0:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8000cd2:	2305      	movs	r3, #5
 8000cd4:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 8000cd8:	2001      	movs	r0, #1
 8000cda:	e7e1      	b.n	8000ca0 <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000cdc:	7e22      	ldrb	r2, [r4, #24]
 8000cde:	2a01      	cmp	r2, #1
 8000ce0:	d03d      	beq.n	8000d5e <HAL_CAN_Init+0x102>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ce8:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8000cea:	7e63      	ldrb	r3, [r4, #25]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d03b      	beq.n	8000d68 <HAL_CAN_Init+0x10c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000cf0:	6822      	ldr	r2, [r4, #0]
 8000cf2:	6813      	ldr	r3, [r2, #0]
 8000cf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000cf8:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000cfa:	7ea3      	ldrb	r3, [r4, #26]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d039      	beq.n	8000d74 <HAL_CAN_Init+0x118>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d00:	6822      	ldr	r2, [r4, #0]
 8000d02:	6813      	ldr	r3, [r2, #0]
 8000d04:	f023 0320 	bic.w	r3, r3, #32
 8000d08:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000d0a:	7ee3      	ldrb	r3, [r4, #27]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d037      	beq.n	8000d80 <HAL_CAN_Init+0x124>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d10:	6822      	ldr	r2, [r4, #0]
 8000d12:	6813      	ldr	r3, [r2, #0]
 8000d14:	f043 0310 	orr.w	r3, r3, #16
 8000d18:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000d1a:	7f23      	ldrb	r3, [r4, #28]
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d035      	beq.n	8000d8c <HAL_CAN_Init+0x130>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d20:	6822      	ldr	r2, [r4, #0]
 8000d22:	6813      	ldr	r3, [r2, #0]
 8000d24:	f023 0308 	bic.w	r3, r3, #8
 8000d28:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000d2a:	7f63      	ldrb	r3, [r4, #29]
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d033      	beq.n	8000d98 <HAL_CAN_Init+0x13c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d30:	6822      	ldr	r2, [r4, #0]
 8000d32:	6813      	ldr	r3, [r2, #0]
 8000d34:	f023 0304 	bic.w	r3, r3, #4
 8000d38:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000d3a:	68a3      	ldr	r3, [r4, #8]
 8000d3c:	68e2      	ldr	r2, [r4, #12]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	6922      	ldr	r2, [r4, #16]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	6962      	ldr	r2, [r4, #20]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	6862      	ldr	r2, [r4, #4]
 8000d4a:	3a01      	subs	r2, #1
 8000d4c:	6821      	ldr	r1, [r4, #0]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d52:	2000      	movs	r0, #0
 8000d54:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8000d56:	2301      	movs	r3, #1
 8000d58:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 8000d5c:	e7a0      	b.n	8000ca0 <HAL_CAN_Init+0x44>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	e7c0      	b.n	8000cea <HAL_CAN_Init+0x8e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d68:	6822      	ldr	r2, [r4, #0]
 8000d6a:	6813      	ldr	r3, [r2, #0]
 8000d6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d70:	6013      	str	r3, [r2, #0]
 8000d72:	e7c2      	b.n	8000cfa <HAL_CAN_Init+0x9e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d74:	6822      	ldr	r2, [r4, #0]
 8000d76:	6813      	ldr	r3, [r2, #0]
 8000d78:	f043 0320 	orr.w	r3, r3, #32
 8000d7c:	6013      	str	r3, [r2, #0]
 8000d7e:	e7c4      	b.n	8000d0a <HAL_CAN_Init+0xae>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d80:	6822      	ldr	r2, [r4, #0]
 8000d82:	6813      	ldr	r3, [r2, #0]
 8000d84:	f023 0310 	bic.w	r3, r3, #16
 8000d88:	6013      	str	r3, [r2, #0]
 8000d8a:	e7c6      	b.n	8000d1a <HAL_CAN_Init+0xbe>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d8c:	6822      	ldr	r2, [r4, #0]
 8000d8e:	6813      	ldr	r3, [r2, #0]
 8000d90:	f043 0308 	orr.w	r3, r3, #8
 8000d94:	6013      	str	r3, [r2, #0]
 8000d96:	e7c8      	b.n	8000d2a <HAL_CAN_Init+0xce>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d98:	6822      	ldr	r2, [r4, #0]
 8000d9a:	6813      	ldr	r3, [r2, #0]
 8000d9c:	f043 0304 	orr.w	r3, r3, #4
 8000da0:	6013      	str	r3, [r2, #0]
 8000da2:	e7ca      	b.n	8000d3a <HAL_CAN_Init+0xde>
    return HAL_ERROR;
 8000da4:	2001      	movs	r0, #1
}
 8000da6:	4770      	bx	lr

08000da8 <HAL_CAN_TxMailbox0CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8000da8:	4770      	bx	lr

08000daa <HAL_CAN_TxMailbox1CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8000daa:	4770      	bx	lr

08000dac <HAL_CAN_TxMailbox2CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8000dac:	4770      	bx	lr

08000dae <HAL_CAN_TxMailbox0AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8000dae:	4770      	bx	lr

08000db0 <HAL_CAN_TxMailbox1AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8000db0:	4770      	bx	lr

08000db2 <HAL_CAN_TxMailbox2AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8000db2:	4770      	bx	lr

08000db4 <HAL_CAN_RxFifo0MsgPendingCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8000db4:	4770      	bx	lr

08000db6 <HAL_CAN_RxFifo0FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8000db6:	4770      	bx	lr

08000db8 <HAL_CAN_RxFifo1MsgPendingCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8000db8:	4770      	bx	lr

08000dba <HAL_CAN_RxFifo1FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8000dba:	4770      	bx	lr

08000dbc <HAL_CAN_SleepCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8000dbc:	4770      	bx	lr

08000dbe <HAL_CAN_WakeUpFromRxMsgCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8000dbe:	4770      	bx	lr

08000dc0 <HAL_CAN_ErrorCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8000dc0:	4770      	bx	lr

08000dc2 <HAL_CAN_IRQHandler>:
{
 8000dc2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000dc6:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000dc8:	6803      	ldr	r3, [r0, #0]
 8000dca:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000dcc:	685f      	ldr	r7, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000dce:	689e      	ldr	r6, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000dd0:	f8d3 900c 	ldr.w	r9, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000dd4:	f8d3 8010 	ldr.w	r8, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000dd8:	f8d3 a018 	ldr.w	sl, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000ddc:	f014 0f01 	tst.w	r4, #1
 8000de0:	d05a      	beq.n	8000e98 <HAL_CAN_IRQHandler+0xd6>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000de2:	f016 0f01 	tst.w	r6, #1
 8000de6:	d017      	beq.n	8000e18 <HAL_CAN_IRQHandler+0x56>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000de8:	2201      	movs	r2, #1
 8000dea:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000dec:	f016 0f02 	tst.w	r6, #2
 8000df0:	d108      	bne.n	8000e04 <HAL_CAN_IRQHandler+0x42>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000df2:	f016 0f04 	tst.w	r6, #4
 8000df6:	d130      	bne.n	8000e5a <HAL_CAN_IRQHandler+0x98>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000df8:	f016 0f08 	tst.w	r6, #8
 8000dfc:	d007      	beq.n	8000e0e <HAL_CAN_IRQHandler+0x4c>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000dfe:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
 8000e02:	e00b      	b.n	8000e1c <HAL_CAN_IRQHandler+0x5a>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000e04:	f7ff ffd0 	bl	8000da8 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000e08:	f04f 0b00 	mov.w	fp, #0
 8000e0c:	e006      	b.n	8000e1c <HAL_CAN_IRQHandler+0x5a>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000e0e:	f7ff ffce 	bl	8000dae <HAL_CAN_TxMailbox0AbortCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000e12:	f04f 0b00 	mov.w	fp, #0
 8000e16:	e001      	b.n	8000e1c <HAL_CAN_IRQHandler+0x5a>
 8000e18:	f04f 0b00 	mov.w	fp, #0
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000e1c:	f416 7f80 	tst.w	r6, #256	; 0x100
 8000e20:	d00b      	beq.n	8000e3a <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000e22:	682b      	ldr	r3, [r5, #0]
 8000e24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e28:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000e2a:	f416 7f00 	tst.w	r6, #512	; 0x200
 8000e2e:	d117      	bne.n	8000e60 <HAL_CAN_IRQHandler+0x9e>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000e30:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8000e34:	d018      	beq.n	8000e68 <HAL_CAN_IRQHandler+0xa6>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000e36:	f44b 5b00 	orr.w	fp, fp, #8192	; 0x2000
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000e3a:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8000e3e:	d02d      	beq.n	8000e9c <HAL_CAN_IRQHandler+0xda>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000e40:	682b      	ldr	r3, [r5, #0]
 8000e42:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e46:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000e48:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8000e4c:	d116      	bne.n	8000e7c <HAL_CAN_IRQHandler+0xba>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000e4e:	f416 2f80 	tst.w	r6, #262144	; 0x40000
 8000e52:	d017      	beq.n	8000e84 <HAL_CAN_IRQHandler+0xc2>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000e54:	f44b 4b00 	orr.w	fp, fp, #32768	; 0x8000
 8000e58:	e020      	b.n	8000e9c <HAL_CAN_IRQHandler+0xda>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000e5a:	f44f 6b00 	mov.w	fp, #2048	; 0x800
 8000e5e:	e7dd      	b.n	8000e1c <HAL_CAN_IRQHandler+0x5a>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000e60:	4628      	mov	r0, r5
 8000e62:	f7ff ffa2 	bl	8000daa <HAL_CAN_TxMailbox1CompleteCallback>
 8000e66:	e7e8      	b.n	8000e3a <HAL_CAN_IRQHandler+0x78>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000e68:	f416 6f00 	tst.w	r6, #2048	; 0x800
 8000e6c:	d002      	beq.n	8000e74 <HAL_CAN_IRQHandler+0xb2>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000e6e:	f44b 4b80 	orr.w	fp, fp, #16384	; 0x4000
 8000e72:	e7e2      	b.n	8000e3a <HAL_CAN_IRQHandler+0x78>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000e74:	4628      	mov	r0, r5
 8000e76:	f7ff ff9b 	bl	8000db0 <HAL_CAN_TxMailbox1AbortCallback>
 8000e7a:	e7de      	b.n	8000e3a <HAL_CAN_IRQHandler+0x78>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	f7ff ff95 	bl	8000dac <HAL_CAN_TxMailbox2CompleteCallback>
 8000e82:	e00b      	b.n	8000e9c <HAL_CAN_IRQHandler+0xda>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000e84:	f416 2f00 	tst.w	r6, #524288	; 0x80000
 8000e88:	d002      	beq.n	8000e90 <HAL_CAN_IRQHandler+0xce>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000e8a:	f44b 3b80 	orr.w	fp, fp, #65536	; 0x10000
 8000e8e:	e005      	b.n	8000e9c <HAL_CAN_IRQHandler+0xda>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000e90:	4628      	mov	r0, r5
 8000e92:	f7ff ff8e 	bl	8000db2 <HAL_CAN_TxMailbox2AbortCallback>
 8000e96:	e001      	b.n	8000e9c <HAL_CAN_IRQHandler+0xda>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000e98:	f04f 0b00 	mov.w	fp, #0
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000e9c:	f014 0f08 	tst.w	r4, #8
 8000ea0:	d007      	beq.n	8000eb2 <HAL_CAN_IRQHandler+0xf0>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000ea2:	f019 0f10 	tst.w	r9, #16
 8000ea6:	d004      	beq.n	8000eb2 <HAL_CAN_IRQHandler+0xf0>
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000ea8:	f44b 7b00 	orr.w	fp, fp, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000eac:	682b      	ldr	r3, [r5, #0]
 8000eae:	2210      	movs	r2, #16
 8000eb0:	60da      	str	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000eb2:	f014 0f04 	tst.w	r4, #4
 8000eb6:	d002      	beq.n	8000ebe <HAL_CAN_IRQHandler+0xfc>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000eb8:	f019 0f08 	tst.w	r9, #8
 8000ebc:	d160      	bne.n	8000f80 <HAL_CAN_IRQHandler+0x1be>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000ebe:	f014 0f02 	tst.w	r4, #2
 8000ec2:	d004      	beq.n	8000ece <HAL_CAN_IRQHandler+0x10c>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000ec4:	682b      	ldr	r3, [r5, #0]
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	f013 0f03 	tst.w	r3, #3
 8000ecc:	d15f      	bne.n	8000f8e <HAL_CAN_IRQHandler+0x1cc>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000ece:	f014 0f40 	tst.w	r4, #64	; 0x40
 8000ed2:	d007      	beq.n	8000ee4 <HAL_CAN_IRQHandler+0x122>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000ed4:	f018 0f10 	tst.w	r8, #16
 8000ed8:	d004      	beq.n	8000ee4 <HAL_CAN_IRQHandler+0x122>
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000eda:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000ede:	682b      	ldr	r3, [r5, #0]
 8000ee0:	2210      	movs	r2, #16
 8000ee2:	611a      	str	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000ee4:	f014 0f20 	tst.w	r4, #32
 8000ee8:	d002      	beq.n	8000ef0 <HAL_CAN_IRQHandler+0x12e>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000eea:	f018 0f08 	tst.w	r8, #8
 8000eee:	d152      	bne.n	8000f96 <HAL_CAN_IRQHandler+0x1d4>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000ef0:	f014 0f10 	tst.w	r4, #16
 8000ef4:	d004      	beq.n	8000f00 <HAL_CAN_IRQHandler+0x13e>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000ef6:	682b      	ldr	r3, [r5, #0]
 8000ef8:	691b      	ldr	r3, [r3, #16]
 8000efa:	f013 0f03 	tst.w	r3, #3
 8000efe:	d151      	bne.n	8000fa4 <HAL_CAN_IRQHandler+0x1e2>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000f00:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 8000f04:	d002      	beq.n	8000f0c <HAL_CAN_IRQHandler+0x14a>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000f06:	f017 0f10 	tst.w	r7, #16
 8000f0a:	d14f      	bne.n	8000fac <HAL_CAN_IRQHandler+0x1ea>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000f0c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 8000f10:	d002      	beq.n	8000f18 <HAL_CAN_IRQHandler+0x156>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000f12:	f017 0f08 	tst.w	r7, #8
 8000f16:	d150      	bne.n	8000fba <HAL_CAN_IRQHandler+0x1f8>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000f18:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8000f1c:	d067      	beq.n	8000fee <HAL_CAN_IRQHandler+0x22c>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000f1e:	f017 0f04 	tst.w	r7, #4
 8000f22:	d061      	beq.n	8000fe8 <HAL_CAN_IRQHandler+0x226>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000f24:	f414 7f80 	tst.w	r4, #256	; 0x100
 8000f28:	d004      	beq.n	8000f34 <HAL_CAN_IRQHandler+0x172>
 8000f2a:	f01a 0f01 	tst.w	sl, #1
 8000f2e:	d001      	beq.n	8000f34 <HAL_CAN_IRQHandler+0x172>
        errorcode |= HAL_CAN_ERROR_EWG;
 8000f30:	f04b 0b01 	orr.w	fp, fp, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000f34:	f414 7f00 	tst.w	r4, #512	; 0x200
 8000f38:	d004      	beq.n	8000f44 <HAL_CAN_IRQHandler+0x182>
 8000f3a:	f01a 0f02 	tst.w	sl, #2
 8000f3e:	d001      	beq.n	8000f44 <HAL_CAN_IRQHandler+0x182>
        errorcode |= HAL_CAN_ERROR_EPV;
 8000f40:	f04b 0b02 	orr.w	fp, fp, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000f44:	f414 6f80 	tst.w	r4, #1024	; 0x400
 8000f48:	d004      	beq.n	8000f54 <HAL_CAN_IRQHandler+0x192>
 8000f4a:	f01a 0f04 	tst.w	sl, #4
 8000f4e:	d001      	beq.n	8000f54 <HAL_CAN_IRQHandler+0x192>
        errorcode |= HAL_CAN_ERROR_BOF;
 8000f50:	f04b 0b04 	orr.w	fp, fp, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000f54:	f414 6f00 	tst.w	r4, #2048	; 0x800
 8000f58:	d046      	beq.n	8000fe8 <HAL_CAN_IRQHandler+0x226>
 8000f5a:	f01a 0a70 	ands.w	sl, sl, #112	; 0x70
 8000f5e:	d043      	beq.n	8000fe8 <HAL_CAN_IRQHandler+0x226>
        switch (esrflags & CAN_ESR_LEC)
 8000f60:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 8000f64:	d048      	beq.n	8000ff8 <HAL_CAN_IRQHandler+0x236>
 8000f66:	d92f      	bls.n	8000fc8 <HAL_CAN_IRQHandler+0x206>
 8000f68:	f1ba 0f50 	cmp.w	sl, #80	; 0x50
 8000f6c:	d047      	beq.n	8000ffe <HAL_CAN_IRQHandler+0x23c>
 8000f6e:	f1ba 0f60 	cmp.w	sl, #96	; 0x60
 8000f72:	d047      	beq.n	8001004 <HAL_CAN_IRQHandler+0x242>
 8000f74:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 8000f78:	d131      	bne.n	8000fde <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_BR;
 8000f7a:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
            break;
 8000f7e:	e02e      	b.n	8000fde <HAL_CAN_IRQHandler+0x21c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000f80:	682b      	ldr	r3, [r5, #0]
 8000f82:	2208      	movs	r2, #8
 8000f84:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000f86:	4628      	mov	r0, r5
 8000f88:	f7ff ff15 	bl	8000db6 <HAL_CAN_RxFifo0FullCallback>
 8000f8c:	e797      	b.n	8000ebe <HAL_CAN_IRQHandler+0xfc>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000f8e:	4628      	mov	r0, r5
 8000f90:	f7ff ff10 	bl	8000db4 <HAL_CAN_RxFifo0MsgPendingCallback>
 8000f94:	e79b      	b.n	8000ece <HAL_CAN_IRQHandler+0x10c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000f96:	682b      	ldr	r3, [r5, #0]
 8000f98:	2208      	movs	r2, #8
 8000f9a:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000f9c:	4628      	mov	r0, r5
 8000f9e:	f7ff ff0c 	bl	8000dba <HAL_CAN_RxFifo1FullCallback>
 8000fa2:	e7a5      	b.n	8000ef0 <HAL_CAN_IRQHandler+0x12e>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000fa4:	4628      	mov	r0, r5
 8000fa6:	f7ff ff07 	bl	8000db8 <HAL_CAN_RxFifo1MsgPendingCallback>
 8000faa:	e7a9      	b.n	8000f00 <HAL_CAN_IRQHandler+0x13e>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000fac:	682b      	ldr	r3, [r5, #0]
 8000fae:	2210      	movs	r2, #16
 8000fb0:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8000fb2:	4628      	mov	r0, r5
 8000fb4:	f7ff ff02 	bl	8000dbc <HAL_CAN_SleepCallback>
 8000fb8:	e7a8      	b.n	8000f0c <HAL_CAN_IRQHandler+0x14a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000fba:	682b      	ldr	r3, [r5, #0]
 8000fbc:	2208      	movs	r2, #8
 8000fbe:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000fc0:	4628      	mov	r0, r5
 8000fc2:	f7ff fefc 	bl	8000dbe <HAL_CAN_WakeUpFromRxMsgCallback>
 8000fc6:	e7a7      	b.n	8000f18 <HAL_CAN_IRQHandler+0x156>
        switch (esrflags & CAN_ESR_LEC)
 8000fc8:	f1ba 0f10 	cmp.w	sl, #16
 8000fcc:	d005      	beq.n	8000fda <HAL_CAN_IRQHandler+0x218>
 8000fce:	f1ba 0f20 	cmp.w	sl, #32
 8000fd2:	d104      	bne.n	8000fde <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000fd4:	f04b 0b10 	orr.w	fp, fp, #16
            break;
 8000fd8:	e001      	b.n	8000fde <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_STF;
 8000fda:	f04b 0b08 	orr.w	fp, fp, #8
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000fde:	682a      	ldr	r2, [r5, #0]
 8000fe0:	6993      	ldr	r3, [r2, #24]
 8000fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000fe6:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000fe8:	682b      	ldr	r3, [r5, #0]
 8000fea:	2204      	movs	r2, #4
 8000fec:	605a      	str	r2, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000fee:	f1bb 0f00 	cmp.w	fp, #0
 8000ff2:	d10a      	bne.n	800100a <HAL_CAN_IRQHandler+0x248>
}
 8000ff4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            errorcode |= HAL_CAN_ERROR_ACK;
 8000ff8:	f04b 0b20 	orr.w	fp, fp, #32
            break;
 8000ffc:	e7ef      	b.n	8000fde <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_BD;
 8000ffe:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
            break;
 8001002:	e7ec      	b.n	8000fde <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001004:	f44b 7b80 	orr.w	fp, fp, #256	; 0x100
            break;
 8001008:	e7e9      	b.n	8000fde <HAL_CAN_IRQHandler+0x21c>
    hcan->ErrorCode |= errorcode;
 800100a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800100c:	ea43 030b 	orr.w	r3, r3, fp
 8001010:	626b      	str	r3, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8001012:	4628      	mov	r0, r5
 8001014:	f7ff fed4 	bl	8000dc0 <HAL_CAN_ErrorCallback>
}
 8001018:	e7ec      	b.n	8000ff4 <HAL_CAN_IRQHandler+0x232>
	...

0800101c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800101c:	4a07      	ldr	r2, [pc, #28]	; (800103c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800101e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001020:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001024:	041b      	lsls	r3, r3, #16
 8001026:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001028:	0200      	lsls	r0, r0, #8
 800102a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800102e:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8001030:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8001034:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001038:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800103a:	4770      	bx	lr
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001040:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001042:	4b17      	ldr	r3, [pc, #92]	; (80010a0 <HAL_NVIC_SetPriority+0x60>)
 8001044:	68db      	ldr	r3, [r3, #12]
 8001046:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800104a:	f1c3 0407 	rsb	r4, r3, #7
 800104e:	2c04      	cmp	r4, #4
 8001050:	bf28      	it	cs
 8001052:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001054:	1d1d      	adds	r5, r3, #4
 8001056:	2d06      	cmp	r5, #6
 8001058:	d918      	bls.n	800108c <HAL_NVIC_SetPriority+0x4c>
 800105a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800105c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001060:	fa05 f404 	lsl.w	r4, r5, r4
 8001064:	ea21 0104 	bic.w	r1, r1, r4
 8001068:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800106a:	fa05 f303 	lsl.w	r3, r5, r3
 800106e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001072:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001074:	2800      	cmp	r0, #0
 8001076:	db0b      	blt.n	8001090 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001078:	0109      	lsls	r1, r1, #4
 800107a:	b2c9      	uxtb	r1, r1
 800107c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001080:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001084:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001088:	bc30      	pop	{r4, r5}
 800108a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800108c:	2300      	movs	r3, #0
 800108e:	e7e5      	b.n	800105c <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001090:	f000 000f 	and.w	r0, r0, #15
 8001094:	0109      	lsls	r1, r1, #4
 8001096:	b2c9      	uxtb	r1, r1
 8001098:	4b02      	ldr	r3, [pc, #8]	; (80010a4 <HAL_NVIC_SetPriority+0x64>)
 800109a:	5419      	strb	r1, [r3, r0]
 800109c:	e7f4      	b.n	8001088 <HAL_NVIC_SetPriority+0x48>
 800109e:	bf00      	nop
 80010a0:	e000ed00 	.word	0xe000ed00
 80010a4:	e000ed14 	.word	0xe000ed14

080010a8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80010a8:	2800      	cmp	r0, #0
 80010aa:	db07      	blt.n	80010bc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ac:	f000 021f 	and.w	r2, r0, #31
 80010b0:	0940      	lsrs	r0, r0, #5
 80010b2:	2301      	movs	r3, #1
 80010b4:	4093      	lsls	r3, r2
 80010b6:	4a02      	ldr	r2, [pc, #8]	; (80010c0 <HAL_NVIC_EnableIRQ+0x18>)
 80010b8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	e000e100 	.word	0xe000e100

080010c4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c4:	3801      	subs	r0, #1
 80010c6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80010ca:	d20a      	bcs.n	80010e2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <HAL_SYSTICK_Config+0x24>)
 80010ce:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d0:	4a06      	ldr	r2, [pc, #24]	; (80010ec <HAL_SYSTICK_Config+0x28>)
 80010d2:	21f0      	movs	r1, #240	; 0xf0
 80010d4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d8:	2000      	movs	r0, #0
 80010da:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010dc:	2207      	movs	r2, #7
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80010e2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	e000e010 	.word	0xe000e010
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010f0:	b4f0      	push	{r4, r5, r6, r7}
 80010f2:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010f4:	2600      	movs	r6, #0
  uint32_t position = 0x00u;
 80010f6:	4632      	mov	r2, r6
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010f8:	e0ab      	b.n	8001252 <HAL_GPIO_Init+0x162>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010fa:	2d00      	cmp	r5, #0
 80010fc:	d063      	beq.n	80011c6 <HAL_GPIO_Init+0xd6>
 80010fe:	2d01      	cmp	r5, #1
 8001100:	d100      	bne.n	8001104 <HAL_GPIO_Init+0x14>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001102:	68ce      	ldr	r6, [r1, #12]
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001104:	2bff      	cmp	r3, #255	; 0xff
 8001106:	d872      	bhi.n	80011ee <HAL_GPIO_Init+0xfe>
 8001108:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800110a:	2bff      	cmp	r3, #255	; 0xff
 800110c:	d872      	bhi.n	80011f4 <HAL_GPIO_Init+0x104>
 800110e:	0095      	lsls	r5, r2, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001110:	f8dc 4000 	ldr.w	r4, [ip]
 8001114:	270f      	movs	r7, #15
 8001116:	40af      	lsls	r7, r5
 8001118:	ea24 0407 	bic.w	r4, r4, r7
 800111c:	fa06 f505 	lsl.w	r5, r6, r5
 8001120:	432c      	orrs	r4, r5
 8001122:	f8cc 4000 	str.w	r4, [ip]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001126:	684c      	ldr	r4, [r1, #4]
 8001128:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 800112c:	f000 8090 	beq.w	8001250 <HAL_GPIO_Init+0x160>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001130:	4c66      	ldr	r4, [pc, #408]	; (80012cc <HAL_GPIO_Init+0x1dc>)
 8001132:	69a5      	ldr	r5, [r4, #24]
 8001134:	f045 0501 	orr.w	r5, r5, #1
 8001138:	61a5      	str	r5, [r4, #24]
 800113a:	69a4      	ldr	r4, [r4, #24]
 800113c:	f004 0401 	and.w	r4, r4, #1
 8001140:	9401      	str	r4, [sp, #4]
 8001142:	9c01      	ldr	r4, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8001144:	0895      	lsrs	r5, r2, #2
 8001146:	1caf      	adds	r7, r5, #2
 8001148:	4c61      	ldr	r4, [pc, #388]	; (80012d0 <HAL_GPIO_Init+0x1e0>)
 800114a:	f854 c027 	ldr.w	ip, [r4, r7, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800114e:	f002 0403 	and.w	r4, r2, #3
 8001152:	00a7      	lsls	r7, r4, #2
 8001154:	240f      	movs	r4, #15
 8001156:	40bc      	lsls	r4, r7
 8001158:	ea2c 0c04 	bic.w	ip, ip, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800115c:	4c5d      	ldr	r4, [pc, #372]	; (80012d4 <HAL_GPIO_Init+0x1e4>)
 800115e:	42a0      	cmp	r0, r4
 8001160:	d04e      	beq.n	8001200 <HAL_GPIO_Init+0x110>
 8001162:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001166:	42a0      	cmp	r0, r4
 8001168:	f000 808c 	beq.w	8001284 <HAL_GPIO_Init+0x194>
 800116c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001170:	42a0      	cmp	r0, r4
 8001172:	f000 8089 	beq.w	8001288 <HAL_GPIO_Init+0x198>
 8001176:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800117a:	42a0      	cmp	r0, r4
 800117c:	f000 8086 	beq.w	800128c <HAL_GPIO_Init+0x19c>
 8001180:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001184:	42a0      	cmp	r0, r4
 8001186:	f000 8083 	beq.w	8001290 <HAL_GPIO_Init+0x1a0>
 800118a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800118e:	42a0      	cmp	r0, r4
 8001190:	d034      	beq.n	80011fc <HAL_GPIO_Init+0x10c>
 8001192:	2406      	movs	r4, #6
 8001194:	e035      	b.n	8001202 <HAL_GPIO_Init+0x112>
      switch (GPIO_Init->Mode)
 8001196:	4f50      	ldr	r7, [pc, #320]	; (80012d8 <HAL_GPIO_Init+0x1e8>)
 8001198:	42bd      	cmp	r5, r7
 800119a:	d014      	beq.n	80011c6 <HAL_GPIO_Init+0xd6>
 800119c:	d90b      	bls.n	80011b6 <HAL_GPIO_Init+0xc6>
 800119e:	4f4f      	ldr	r7, [pc, #316]	; (80012dc <HAL_GPIO_Init+0x1ec>)
 80011a0:	42bd      	cmp	r5, r7
 80011a2:	d010      	beq.n	80011c6 <HAL_GPIO_Init+0xd6>
 80011a4:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80011a8:	42bd      	cmp	r5, r7
 80011aa:	d00c      	beq.n	80011c6 <HAL_GPIO_Init+0xd6>
 80011ac:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 80011b0:	42bd      	cmp	r5, r7
 80011b2:	d1a7      	bne.n	8001104 <HAL_GPIO_Init+0x14>
 80011b4:	e007      	b.n	80011c6 <HAL_GPIO_Init+0xd6>
 80011b6:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 80011ba:	42bd      	cmp	r5, r7
 80011bc:	d003      	beq.n	80011c6 <HAL_GPIO_Init+0xd6>
 80011be:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80011c2:	42bd      	cmp	r5, r7
 80011c4:	d19e      	bne.n	8001104 <HAL_GPIO_Init+0x14>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011c6:	688d      	ldr	r5, [r1, #8]
 80011c8:	b17d      	cbz	r5, 80011ea <HAL_GPIO_Init+0xfa>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011ca:	2d01      	cmp	r5, #1
 80011cc:	d008      	beq.n	80011e0 <HAL_GPIO_Init+0xf0>
            GPIOx->BRR = ioposition;
 80011ce:	6144      	str	r4, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011d0:	2608      	movs	r6, #8
 80011d2:	e797      	b.n	8001104 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011d4:	68ce      	ldr	r6, [r1, #12]
 80011d6:	3608      	adds	r6, #8
          break;
 80011d8:	e794      	b.n	8001104 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011da:	68ce      	ldr	r6, [r1, #12]
 80011dc:	360c      	adds	r6, #12
          break;
 80011de:	e791      	b.n	8001104 <HAL_GPIO_Init+0x14>
            GPIOx->BSRR = ioposition;
 80011e0:	6104      	str	r4, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011e2:	2608      	movs	r6, #8
 80011e4:	e78e      	b.n	8001104 <HAL_GPIO_Init+0x14>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011e6:	2600      	movs	r6, #0
 80011e8:	e78c      	b.n	8001104 <HAL_GPIO_Init+0x14>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011ea:	2604      	movs	r6, #4
 80011ec:	e78a      	b.n	8001104 <HAL_GPIO_Init+0x14>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011ee:	f100 0c04 	add.w	ip, r0, #4
 80011f2:	e78a      	b.n	800110a <HAL_GPIO_Init+0x1a>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011f4:	f1a2 0508 	sub.w	r5, r2, #8
 80011f8:	00ad      	lsls	r5, r5, #2
 80011fa:	e789      	b.n	8001110 <HAL_GPIO_Init+0x20>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011fc:	2405      	movs	r4, #5
 80011fe:	e000      	b.n	8001202 <HAL_GPIO_Init+0x112>
 8001200:	2400      	movs	r4, #0
 8001202:	40bc      	lsls	r4, r7
 8001204:	ea44 040c 	orr.w	r4, r4, ip
        AFIO->EXTICR[position >> 2u] = temp;
 8001208:	3502      	adds	r5, #2
 800120a:	4f31      	ldr	r7, [pc, #196]	; (80012d0 <HAL_GPIO_Init+0x1e0>)
 800120c:	f847 4025 	str.w	r4, [r7, r5, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001210:	684c      	ldr	r4, [r1, #4]
 8001212:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 8001216:	d03d      	beq.n	8001294 <HAL_GPIO_Init+0x1a4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001218:	4d31      	ldr	r5, [pc, #196]	; (80012e0 <HAL_GPIO_Init+0x1f0>)
 800121a:	682c      	ldr	r4, [r5, #0]
 800121c:	431c      	orrs	r4, r3
 800121e:	602c      	str	r4, [r5, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001220:	684c      	ldr	r4, [r1, #4]
 8001222:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 8001226:	d03b      	beq.n	80012a0 <HAL_GPIO_Init+0x1b0>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001228:	4d2d      	ldr	r5, [pc, #180]	; (80012e0 <HAL_GPIO_Init+0x1f0>)
 800122a:	686c      	ldr	r4, [r5, #4]
 800122c:	431c      	orrs	r4, r3
 800122e:	606c      	str	r4, [r5, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001230:	684c      	ldr	r4, [r1, #4]
 8001232:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
 8001236:	d039      	beq.n	80012ac <HAL_GPIO_Init+0x1bc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001238:	4d29      	ldr	r5, [pc, #164]	; (80012e0 <HAL_GPIO_Init+0x1f0>)
 800123a:	68ac      	ldr	r4, [r5, #8]
 800123c:	431c      	orrs	r4, r3
 800123e:	60ac      	str	r4, [r5, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001240:	684c      	ldr	r4, [r1, #4]
 8001242:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
 8001246:	d037      	beq.n	80012b8 <HAL_GPIO_Init+0x1c8>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001248:	4d25      	ldr	r5, [pc, #148]	; (80012e0 <HAL_GPIO_Init+0x1f0>)
 800124a:	68ec      	ldr	r4, [r5, #12]
 800124c:	4323      	orrs	r3, r4
 800124e:	60eb      	str	r3, [r5, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 8001250:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001252:	680b      	ldr	r3, [r1, #0]
 8001254:	fa33 f402 	lsrs.w	r4, r3, r2
 8001258:	d034      	beq.n	80012c4 <HAL_GPIO_Init+0x1d4>
    ioposition = (0x01uL << position);
 800125a:	2401      	movs	r4, #1
 800125c:	4094      	lsls	r4, r2
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800125e:	4023      	ands	r3, r4
    if (iocurrent == ioposition)
 8001260:	429c      	cmp	r4, r3
 8001262:	d1f5      	bne.n	8001250 <HAL_GPIO_Init+0x160>
      switch (GPIO_Init->Mode)
 8001264:	684d      	ldr	r5, [r1, #4]
 8001266:	2d12      	cmp	r5, #18
 8001268:	d0b7      	beq.n	80011da <HAL_GPIO_Init+0xea>
 800126a:	d894      	bhi.n	8001196 <HAL_GPIO_Init+0xa6>
 800126c:	2d02      	cmp	r5, #2
 800126e:	d0b1      	beq.n	80011d4 <HAL_GPIO_Init+0xe4>
 8001270:	f67f af43 	bls.w	80010fa <HAL_GPIO_Init+0xa>
 8001274:	2d03      	cmp	r5, #3
 8001276:	d0b6      	beq.n	80011e6 <HAL_GPIO_Init+0xf6>
 8001278:	2d11      	cmp	r5, #17
 800127a:	f47f af43 	bne.w	8001104 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800127e:	68ce      	ldr	r6, [r1, #12]
 8001280:	3604      	adds	r6, #4
          break;
 8001282:	e73f      	b.n	8001104 <HAL_GPIO_Init+0x14>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001284:	2401      	movs	r4, #1
 8001286:	e7bc      	b.n	8001202 <HAL_GPIO_Init+0x112>
 8001288:	2402      	movs	r4, #2
 800128a:	e7ba      	b.n	8001202 <HAL_GPIO_Init+0x112>
 800128c:	2403      	movs	r4, #3
 800128e:	e7b8      	b.n	8001202 <HAL_GPIO_Init+0x112>
 8001290:	2404      	movs	r4, #4
 8001292:	e7b6      	b.n	8001202 <HAL_GPIO_Init+0x112>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001294:	4d12      	ldr	r5, [pc, #72]	; (80012e0 <HAL_GPIO_Init+0x1f0>)
 8001296:	682c      	ldr	r4, [r5, #0]
 8001298:	ea24 0403 	bic.w	r4, r4, r3
 800129c:	602c      	str	r4, [r5, #0]
 800129e:	e7bf      	b.n	8001220 <HAL_GPIO_Init+0x130>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012a0:	4d0f      	ldr	r5, [pc, #60]	; (80012e0 <HAL_GPIO_Init+0x1f0>)
 80012a2:	686c      	ldr	r4, [r5, #4]
 80012a4:	ea24 0403 	bic.w	r4, r4, r3
 80012a8:	606c      	str	r4, [r5, #4]
 80012aa:	e7c1      	b.n	8001230 <HAL_GPIO_Init+0x140>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012ac:	4d0c      	ldr	r5, [pc, #48]	; (80012e0 <HAL_GPIO_Init+0x1f0>)
 80012ae:	68ac      	ldr	r4, [r5, #8]
 80012b0:	ea24 0403 	bic.w	r4, r4, r3
 80012b4:	60ac      	str	r4, [r5, #8]
 80012b6:	e7c3      	b.n	8001240 <HAL_GPIO_Init+0x150>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012b8:	4d09      	ldr	r5, [pc, #36]	; (80012e0 <HAL_GPIO_Init+0x1f0>)
 80012ba:	68ec      	ldr	r4, [r5, #12]
 80012bc:	ea24 0303 	bic.w	r3, r4, r3
 80012c0:	60eb      	str	r3, [r5, #12]
 80012c2:	e7c5      	b.n	8001250 <HAL_GPIO_Init+0x160>
  }
}
 80012c4:	b002      	add	sp, #8
 80012c6:	bcf0      	pop	{r4, r5, r6, r7}
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	40021000 	.word	0x40021000
 80012d0:	40010000 	.word	0x40010000
 80012d4:	40010800 	.word	0x40010800
 80012d8:	10210000 	.word	0x10210000
 80012dc:	10310000 	.word	0x10310000
 80012e0:	40010400 	.word	0x40010400

080012e4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012e4:	b912      	cbnz	r2, 80012ec <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012e6:	0409      	lsls	r1, r1, #16
 80012e8:	6101      	str	r1, [r0, #16]
  }
}
 80012ea:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 80012ec:	6101      	str	r1, [r0, #16]
 80012ee:	4770      	bx	lr

080012f0 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80012f0:	6803      	ldr	r3, [r0, #0]
 80012f2:	695a      	ldr	r2, [r3, #20]
 80012f4:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80012f8:	d011      	beq.n	800131e <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80012fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80012fe:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001300:	2300      	movs	r3, #0
 8001302:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001304:	2220      	movs	r2, #32
 8001306:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800130a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800130e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001310:	f042 0204 	orr.w	r2, r2, #4
 8001314:	6402      	str	r2, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001316:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

    return HAL_ERROR;
 800131a:	2001      	movs	r0, #1
 800131c:	4770      	bx	lr
  }
  return HAL_OK;
 800131e:	2000      	movs	r0, #0
}
 8001320:	4770      	bx	lr

08001322 <I2C_WaitOnFlagUntilTimeout>:
{
 8001322:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001324:	4606      	mov	r6, r0
 8001326:	460c      	mov	r4, r1
 8001328:	4617      	mov	r7, r2
 800132a:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800132c:	e022      	b.n	8001374 <I2C_WaitOnFlagUntilTimeout+0x52>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800132e:	f7ff fc7b 	bl	8000c28 <HAL_GetTick>
 8001332:	9b06      	ldr	r3, [sp, #24]
 8001334:	1ac0      	subs	r0, r0, r3
 8001336:	42a8      	cmp	r0, r5
 8001338:	d800      	bhi.n	800133c <I2C_WaitOnFlagUntilTimeout+0x1a>
 800133a:	b9dd      	cbnz	r5, 8001374 <I2C_WaitOnFlagUntilTimeout+0x52>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800133c:	2300      	movs	r3, #0
 800133e:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001340:	2220      	movs	r2, #32
 8001342:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001346:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800134a:	6c32      	ldr	r2, [r6, #64]	; 0x40
 800134c:	f042 0220 	orr.w	r2, r2, #32
 8001350:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001352:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        return HAL_ERROR;
 8001356:	2001      	movs	r0, #1
 8001358:	e01a      	b.n	8001390 <I2C_WaitOnFlagUntilTimeout+0x6e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800135a:	6833      	ldr	r3, [r6, #0]
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	ea24 0303 	bic.w	r3, r4, r3
 8001362:	b29b      	uxth	r3, r3
 8001364:	fab3 f383 	clz	r3, r3
 8001368:	095b      	lsrs	r3, r3, #5
 800136a:	429f      	cmp	r7, r3
 800136c:	d10f      	bne.n	800138e <I2C_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 800136e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8001372:	d1dc      	bne.n	800132e <I2C_WaitOnFlagUntilTimeout+0xc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001374:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8001378:	2b01      	cmp	r3, #1
 800137a:	d0ee      	beq.n	800135a <I2C_WaitOnFlagUntilTimeout+0x38>
 800137c:	6833      	ldr	r3, [r6, #0]
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	ea24 0303 	bic.w	r3, r4, r3
 8001384:	b29b      	uxth	r3, r3
 8001386:	fab3 f383 	clz	r3, r3
 800138a:	095b      	lsrs	r3, r3, #5
 800138c:	e7ed      	b.n	800136a <I2C_WaitOnFlagUntilTimeout+0x48>
  return HAL_OK;
 800138e:	2000      	movs	r0, #0
}
 8001390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001392 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001392:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001394:	4604      	mov	r4, r0
 8001396:	460d      	mov	r5, r1
 8001398:	4616      	mov	r6, r2
 800139a:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800139c:	e03c      	b.n	8001418 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013a4:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80013a6:	6823      	ldr	r3, [r4, #0]
 80013a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80013ac:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80013ae:	2300      	movs	r3, #0
 80013b0:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80013b2:	2220      	movs	r2, #32
 80013b4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80013b8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80013bc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80013be:	f042 0204 	orr.w	r2, r2, #4
 80013c2:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80013c4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 80013c8:	2001      	movs	r0, #1
 80013ca:	e033      	b.n	8001434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013cc:	f7ff fc2c 	bl	8000c28 <HAL_GetTick>
 80013d0:	1bc0      	subs	r0, r0, r7
 80013d2:	42b0      	cmp	r0, r6
 80013d4:	d800      	bhi.n	80013d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
 80013d6:	b9fe      	cbnz	r6, 8001418 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80013d8:	2300      	movs	r3, #0
 80013da:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80013dc:	2220      	movs	r2, #32
 80013de:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80013e2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80013e6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80013e8:	f042 0220 	orr.w	r2, r2, #32
 80013ec:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80013ee:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80013f2:	2001      	movs	r0, #1
 80013f4:	e01e      	b.n	8001434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80013f6:	6823      	ldr	r3, [r4, #0]
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	ea25 0303 	bic.w	r3, r5, r3
 80013fe:	b29b      	uxth	r3, r3
 8001400:	3300      	adds	r3, #0
 8001402:	bf18      	it	ne
 8001404:	2301      	movne	r3, #1
 8001406:	b1a3      	cbz	r3, 8001432 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001408:	6823      	ldr	r3, [r4, #0]
 800140a:	695a      	ldr	r2, [r3, #20]
 800140c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001410:	d1c5      	bne.n	800139e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
    if (Timeout != HAL_MAX_DELAY)
 8001412:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8001416:	d1d9      	bne.n	80013cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001418:	f3c5 4307 	ubfx	r3, r5, #16, #8
 800141c:	2b01      	cmp	r3, #1
 800141e:	d0ea      	beq.n	80013f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x64>
 8001420:	6823      	ldr	r3, [r4, #0]
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	ea25 0303 	bic.w	r3, r5, r3
 8001428:	b29b      	uxth	r3, r3
 800142a:	3300      	adds	r3, #0
 800142c:	bf18      	it	ne
 800142e:	2301      	movne	r3, #1
 8001430:	e7e9      	b.n	8001406 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
  return HAL_OK;
 8001432:	2000      	movs	r0, #0
}
 8001434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001438 <I2C_MasterRequestWrite>:
{
 8001438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800143a:	b083      	sub	sp, #12
 800143c:	4604      	mov	r4, r0
 800143e:	460f      	mov	r7, r1
 8001440:	4615      	mov	r5, r2
 8001442:	461e      	mov	r6, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001444:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001446:	2b08      	cmp	r3, #8
 8001448:	d00d      	beq.n	8001466 <I2C_MasterRequestWrite+0x2e>
 800144a:	2b01      	cmp	r3, #1
 800144c:	d00b      	beq.n	8001466 <I2C_MasterRequestWrite+0x2e>
 800144e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001452:	d008      	beq.n	8001466 <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001454:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001456:	2b12      	cmp	r3, #18
 8001458:	d10a      	bne.n	8001470 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800145a:	6802      	ldr	r2, [r0, #0]
 800145c:	6813      	ldr	r3, [r2, #0]
 800145e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001462:	6013      	str	r3, [r2, #0]
 8001464:	e004      	b.n	8001470 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001466:	6822      	ldr	r2, [r4, #0]
 8001468:	6813      	ldr	r3, [r2, #0]
 800146a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800146e:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001470:	9600      	str	r6, [sp, #0]
 8001472:	462b      	mov	r3, r5
 8001474:	2200      	movs	r2, #0
 8001476:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800147a:	4620      	mov	r0, r4
 800147c:	f7ff ff51 	bl	8001322 <I2C_WaitOnFlagUntilTimeout>
 8001480:	bb18      	cbnz	r0, 80014ca <I2C_MasterRequestWrite+0x92>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001482:	6923      	ldr	r3, [r4, #16]
 8001484:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001488:	d10d      	bne.n	80014a6 <I2C_MasterRequestWrite+0x6e>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800148a:	6823      	ldr	r3, [r4, #0]
 800148c:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8001490:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001492:	4633      	mov	r3, r6
 8001494:	462a      	mov	r2, r5
 8001496:	4910      	ldr	r1, [pc, #64]	; (80014d8 <I2C_MasterRequestWrite+0xa0>)
 8001498:	4620      	mov	r0, r4
 800149a:	f7ff ff7a 	bl	8001392 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800149e:	4603      	mov	r3, r0
 80014a0:	b1a0      	cbz	r0, 80014cc <I2C_MasterRequestWrite+0x94>
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e012      	b.n	80014cc <I2C_MasterRequestWrite+0x94>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80014a6:	11fb      	asrs	r3, r7, #7
 80014a8:	6822      	ldr	r2, [r4, #0]
 80014aa:	f003 0306 	and.w	r3, r3, #6
 80014ae:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80014b2:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80014b4:	4633      	mov	r3, r6
 80014b6:	462a      	mov	r2, r5
 80014b8:	4908      	ldr	r1, [pc, #32]	; (80014dc <I2C_MasterRequestWrite+0xa4>)
 80014ba:	4620      	mov	r0, r4
 80014bc:	f7ff ff69 	bl	8001392 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80014c0:	b938      	cbnz	r0, 80014d2 <I2C_MasterRequestWrite+0x9a>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80014c2:	6823      	ldr	r3, [r4, #0]
 80014c4:	b2ff      	uxtb	r7, r7
 80014c6:	611f      	str	r7, [r3, #16]
 80014c8:	e7e3      	b.n	8001492 <I2C_MasterRequestWrite+0x5a>
    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	b003      	add	sp, #12
 80014d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e7fa      	b.n	80014cc <I2C_MasterRequestWrite+0x94>
 80014d6:	bf00      	nop
 80014d8:	00010002 	.word	0x00010002
 80014dc:	00010008 	.word	0x00010008

080014e0 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80014e0:	b570      	push	{r4, r5, r6, lr}
 80014e2:	4604      	mov	r4, r0
 80014e4:	460d      	mov	r5, r1
 80014e6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80014e8:	6823      	ldr	r3, [r4, #0]
 80014ea:	695b      	ldr	r3, [r3, #20]
 80014ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 80014f0:	d11c      	bne.n	800152c <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80014f2:	4620      	mov	r0, r4
 80014f4:	f7ff fefc 	bl	80012f0 <I2C_IsAcknowledgeFailed>
 80014f8:	b9d0      	cbnz	r0, 8001530 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80014fa:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80014fe:	d0f3      	beq.n	80014e8 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001500:	f7ff fb92 	bl	8000c28 <HAL_GetTick>
 8001504:	1b80      	subs	r0, r0, r6
 8001506:	42a8      	cmp	r0, r5
 8001508:	d801      	bhi.n	800150e <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 800150a:	2d00      	cmp	r5, #0
 800150c:	d1ec      	bne.n	80014e8 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800150e:	2300      	movs	r3, #0
 8001510:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001512:	2220      	movs	r2, #32
 8001514:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001518:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800151c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800151e:	f042 0220 	orr.w	r2, r2, #32
 8001522:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001524:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8001528:	2001      	movs	r0, #1
 800152a:	e000      	b.n	800152e <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 800152c:	2000      	movs	r0, #0
}
 800152e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001530:	2001      	movs	r0, #1
 8001532:	e7fc      	b.n	800152e <I2C_WaitOnTXEFlagUntilTimeout+0x4e>

08001534 <I2C_RequestMemoryWrite>:
{
 8001534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001538:	b084      	sub	sp, #16
 800153a:	4604      	mov	r4, r0
 800153c:	4688      	mov	r8, r1
 800153e:	4616      	mov	r6, r2
 8001540:	461f      	mov	r7, r3
 8001542:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001544:	6802      	ldr	r2, [r0, #0]
 8001546:	6813      	ldr	r3, [r2, #0]
 8001548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800154c:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800154e:	9500      	str	r5, [sp, #0]
 8001550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001552:	2200      	movs	r2, #0
 8001554:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001558:	f7ff fee3 	bl	8001322 <I2C_WaitOnFlagUntilTimeout>
 800155c:	b120      	cbz	r0, 8001568 <I2C_RequestMemoryWrite+0x34>
    return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
}
 8001560:	4618      	mov	r0, r3
 8001562:	b004      	add	sp, #16
 8001564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001568:	6822      	ldr	r2, [r4, #0]
 800156a:	f008 03fe 	and.w	r3, r8, #254	; 0xfe
 800156e:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001570:	462b      	mov	r3, r5
 8001572:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001574:	4920      	ldr	r1, [pc, #128]	; (80015f8 <I2C_RequestMemoryWrite+0xc4>)
 8001576:	4620      	mov	r0, r4
 8001578:	f7ff ff0b 	bl	8001392 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800157c:	b108      	cbz	r0, 8001582 <I2C_RequestMemoryWrite+0x4e>
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e7ee      	b.n	8001560 <I2C_RequestMemoryWrite+0x2c>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001582:	2300      	movs	r3, #0
 8001584:	9303      	str	r3, [sp, #12]
 8001586:	6823      	ldr	r3, [r4, #0]
 8001588:	695a      	ldr	r2, [r3, #20]
 800158a:	9203      	str	r2, [sp, #12]
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	9303      	str	r3, [sp, #12]
 8001590:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001592:	462a      	mov	r2, r5
 8001594:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001596:	4620      	mov	r0, r4
 8001598:	f7ff ffa2 	bl	80014e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800159c:	4603      	mov	r3, r0
 800159e:	b158      	cbz	r0, 80015b8 <I2C_RequestMemoryWrite+0x84>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80015a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015a2:	2b04      	cmp	r3, #4
 80015a4:	d001      	beq.n	80015aa <I2C_RequestMemoryWrite+0x76>
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e7da      	b.n	8001560 <I2C_RequestMemoryWrite+0x2c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015aa:	6822      	ldr	r2, [r4, #0]
 80015ac:	6813      	ldr	r3, [r2, #0]
 80015ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015b2:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e7d3      	b.n	8001560 <I2C_RequestMemoryWrite+0x2c>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80015b8:	2f01      	cmp	r7, #1
 80015ba:	d00e      	beq.n	80015da <I2C_RequestMemoryWrite+0xa6>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80015bc:	6823      	ldr	r3, [r4, #0]
 80015be:	0a32      	lsrs	r2, r6, #8
 80015c0:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80015c2:	462a      	mov	r2, r5
 80015c4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80015c6:	4620      	mov	r0, r4
 80015c8:	f7ff ff8a 	bl	80014e0 <I2C_WaitOnTXEFlagUntilTimeout>
 80015cc:	4603      	mov	r3, r0
 80015ce:	b178      	cbz	r0, 80015f0 <I2C_RequestMemoryWrite+0xbc>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80015d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015d2:	2b04      	cmp	r3, #4
 80015d4:	d005      	beq.n	80015e2 <I2C_RequestMemoryWrite+0xae>
      return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e7c2      	b.n	8001560 <I2C_RequestMemoryWrite+0x2c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80015da:	6822      	ldr	r2, [r4, #0]
 80015dc:	b2f6      	uxtb	r6, r6
 80015de:	6116      	str	r6, [r2, #16]
 80015e0:	e7be      	b.n	8001560 <I2C_RequestMemoryWrite+0x2c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015e2:	6822      	ldr	r2, [r4, #0]
 80015e4:	6813      	ldr	r3, [r2, #0]
 80015e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015ea:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e7b7      	b.n	8001560 <I2C_RequestMemoryWrite+0x2c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80015f0:	6822      	ldr	r2, [r4, #0]
 80015f2:	b2f6      	uxtb	r6, r6
 80015f4:	6116      	str	r6, [r2, #16]
 80015f6:	e7b3      	b.n	8001560 <I2C_RequestMemoryWrite+0x2c>
 80015f8:	00010002 	.word	0x00010002

080015fc <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80015fc:	b570      	push	{r4, r5, r6, lr}
 80015fe:	4604      	mov	r4, r0
 8001600:	460d      	mov	r5, r1
 8001602:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001604:	6823      	ldr	r3, [r4, #0]
 8001606:	695b      	ldr	r3, [r3, #20]
 8001608:	f013 0f04 	tst.w	r3, #4
 800160c:	d11c      	bne.n	8001648 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800160e:	4620      	mov	r0, r4
 8001610:	f7ff fe6e 	bl	80012f0 <I2C_IsAcknowledgeFailed>
 8001614:	b9d0      	cbnz	r0, 800164c <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8001616:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800161a:	d0f3      	beq.n	8001604 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800161c:	f7ff fb04 	bl	8000c28 <HAL_GetTick>
 8001620:	1b80      	subs	r0, r0, r6
 8001622:	42a8      	cmp	r0, r5
 8001624:	d801      	bhi.n	800162a <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8001626:	2d00      	cmp	r5, #0
 8001628:	d1ec      	bne.n	8001604 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800162a:	2300      	movs	r3, #0
 800162c:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800162e:	2220      	movs	r2, #32
 8001630:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001634:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001638:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800163a:	f042 0220 	orr.w	r2, r2, #32
 800163e:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001640:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8001644:	2001      	movs	r0, #1
 8001646:	e000      	b.n	800164a <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 8001648:	2000      	movs	r0, #0
}
 800164a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800164c:	2001      	movs	r0, #1
 800164e:	e7fc      	b.n	800164a <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

08001650 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8001650:	2800      	cmp	r0, #0
 8001652:	f000 80be 	beq.w	80017d2 <HAL_I2C_Init+0x182>
{
 8001656:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001658:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800165a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800165e:	2b00      	cmp	r3, #0
 8001660:	d06b      	beq.n	800173a <HAL_I2C_Init+0xea>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001662:	2324      	movs	r3, #36	; 0x24
 8001664:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001668:	6822      	ldr	r2, [r4, #0]
 800166a:	6813      	ldr	r3, [r2, #0]
 800166c:	f023 0301 	bic.w	r3, r3, #1
 8001670:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001672:	f000 fd41 	bl	80020f8 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001676:	6862      	ldr	r2, [r4, #4]
 8001678:	4b58      	ldr	r3, [pc, #352]	; (80017dc <HAL_I2C_Init+0x18c>)
 800167a:	429a      	cmp	r2, r3
 800167c:	d862      	bhi.n	8001744 <HAL_I2C_Init+0xf4>
 800167e:	4b58      	ldr	r3, [pc, #352]	; (80017e0 <HAL_I2C_Init+0x190>)
 8001680:	4298      	cmp	r0, r3
 8001682:	bf8c      	ite	hi
 8001684:	2300      	movhi	r3, #0
 8001686:	2301      	movls	r3, #1
 8001688:	2b00      	cmp	r3, #0
 800168a:	f040 80a4 	bne.w	80017d6 <HAL_I2C_Init+0x186>
  freqrange = I2C_FREQRANGE(pclk1);
 800168e:	4b55      	ldr	r3, [pc, #340]	; (80017e4 <HAL_I2C_Init+0x194>)
 8001690:	fba3 2300 	umull	r2, r3, r3, r0
 8001694:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001696:	6821      	ldr	r1, [r4, #0]
 8001698:	684a      	ldr	r2, [r1, #4]
 800169a:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800169e:	431a      	orrs	r2, r3
 80016a0:	604a      	str	r2, [r1, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016a2:	6825      	ldr	r5, [r4, #0]
 80016a4:	6a2a      	ldr	r2, [r5, #32]
 80016a6:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80016aa:	6866      	ldr	r6, [r4, #4]
 80016ac:	494b      	ldr	r1, [pc, #300]	; (80017dc <HAL_I2C_Init+0x18c>)
 80016ae:	428e      	cmp	r6, r1
 80016b0:	d84e      	bhi.n	8001750 <HAL_I2C_Init+0x100>
 80016b2:	3301      	adds	r3, #1
 80016b4:	4313      	orrs	r3, r2
 80016b6:	622b      	str	r3, [r5, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80016b8:	6825      	ldr	r5, [r4, #0]
 80016ba:	69e9      	ldr	r1, [r5, #28]
 80016bc:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80016c0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80016c4:	6863      	ldr	r3, [r4, #4]
 80016c6:	4a45      	ldr	r2, [pc, #276]	; (80017dc <HAL_I2C_Init+0x18c>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d84b      	bhi.n	8001764 <HAL_I2C_Init+0x114>
 80016cc:	3801      	subs	r0, #1
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80016d4:	3301      	adds	r3, #1
 80016d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016da:	2b04      	cmp	r3, #4
 80016dc:	bf38      	it	cc
 80016de:	2304      	movcc	r3, #4
 80016e0:	430b      	orrs	r3, r1
 80016e2:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80016e4:	6821      	ldr	r1, [r4, #0]
 80016e6:	680b      	ldr	r3, [r1, #0]
 80016e8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80016ec:	69e2      	ldr	r2, [r4, #28]
 80016ee:	6a20      	ldr	r0, [r4, #32]
 80016f0:	4302      	orrs	r2, r0
 80016f2:	4313      	orrs	r3, r2
 80016f4:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80016f6:	6821      	ldr	r1, [r4, #0]
 80016f8:	688b      	ldr	r3, [r1, #8]
 80016fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80016fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001702:	6922      	ldr	r2, [r4, #16]
 8001704:	68e0      	ldr	r0, [r4, #12]
 8001706:	4302      	orrs	r2, r0
 8001708:	4313      	orrs	r3, r2
 800170a:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800170c:	6821      	ldr	r1, [r4, #0]
 800170e:	68cb      	ldr	r3, [r1, #12]
 8001710:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001714:	6962      	ldr	r2, [r4, #20]
 8001716:	69a0      	ldr	r0, [r4, #24]
 8001718:	4302      	orrs	r2, r0
 800171a:	4313      	orrs	r3, r2
 800171c:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 800171e:	6822      	ldr	r2, [r4, #0]
 8001720:	6813      	ldr	r3, [r2, #0]
 8001722:	f043 0301 	orr.w	r3, r3, #1
 8001726:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001728:	2000      	movs	r0, #0
 800172a:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800172c:	2320      	movs	r3, #32
 800172e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001732:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001734:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8001738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800173a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800173e:	f002 fb2f 	bl	8003da0 <HAL_I2C_MspInit>
 8001742:	e78e      	b.n	8001662 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001744:	4b28      	ldr	r3, [pc, #160]	; (80017e8 <HAL_I2C_Init+0x198>)
 8001746:	4298      	cmp	r0, r3
 8001748:	bf8c      	ite	hi
 800174a:	2300      	movhi	r3, #0
 800174c:	2301      	movls	r3, #1
 800174e:	e79b      	b.n	8001688 <HAL_I2C_Init+0x38>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001750:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001754:	fb01 f303 	mul.w	r3, r1, r3
 8001758:	4924      	ldr	r1, [pc, #144]	; (80017ec <HAL_I2C_Init+0x19c>)
 800175a:	fba1 1303 	umull	r1, r3, r1, r3
 800175e:	099b      	lsrs	r3, r3, #6
 8001760:	3301      	adds	r3, #1
 8001762:	e7a7      	b.n	80016b4 <HAL_I2C_Init+0x64>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001764:	68a2      	ldr	r2, [r4, #8]
 8001766:	b9ba      	cbnz	r2, 8001798 <HAL_I2C_Init+0x148>
 8001768:	1e46      	subs	r6, r0, #1
 800176a:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 800176e:	fbb6 f6f7 	udiv	r6, r6, r7
 8001772:	3601      	adds	r6, #1
 8001774:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8001778:	fab6 f686 	clz	r6, r6
 800177c:	0976      	lsrs	r6, r6, #5
 800177e:	bb36      	cbnz	r6, 80017ce <HAL_I2C_Init+0x17e>
 8001780:	b9c2      	cbnz	r2, 80017b4 <HAL_I2C_Init+0x164>
 8001782:	3801      	subs	r0, #1
 8001784:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001788:	fbb0 f3f3 	udiv	r3, r0, r3
 800178c:	3301      	adds	r3, #1
 800178e:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8001792:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 8001796:	e7a3      	b.n	80016e0 <HAL_I2C_Init+0x90>
 8001798:	1e46      	subs	r6, r0, #1
 800179a:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 800179e:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 80017a2:	fbb6 f6f7 	udiv	r6, r6, r7
 80017a6:	3601      	adds	r6, #1
 80017a8:	f3c6 060b 	ubfx	r6, r6, #0, #12
 80017ac:	fab6 f686 	clz	r6, r6
 80017b0:	0976      	lsrs	r6, r6, #5
 80017b2:	e7e4      	b.n	800177e <HAL_I2C_Init+0x12e>
 80017b4:	3801      	subs	r0, #1
 80017b6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80017ba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80017be:	fbb0 f2f3 	udiv	r2, r0, r3
 80017c2:	3201      	adds	r2, #1
 80017c4:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80017c8:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 80017cc:	e788      	b.n	80016e0 <HAL_I2C_Init+0x90>
 80017ce:	2301      	movs	r3, #1
 80017d0:	e786      	b.n	80016e0 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 80017d2:	2001      	movs	r0, #1
}
 80017d4:	4770      	bx	lr
    return HAL_ERROR;
 80017d6:	2001      	movs	r0, #1
 80017d8:	e7ae      	b.n	8001738 <HAL_I2C_Init+0xe8>
 80017da:	bf00      	nop
 80017dc:	000186a0 	.word	0x000186a0
 80017e0:	001e847f 	.word	0x001e847f
 80017e4:	431bde83 	.word	0x431bde83
 80017e8:	003d08ff 	.word	0x003d08ff
 80017ec:	10624dd3 	.word	0x10624dd3

080017f0 <HAL_I2C_Master_Transmit>:
{
 80017f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017f4:	b084      	sub	sp, #16
 80017f6:	4604      	mov	r4, r0
 80017f8:	460e      	mov	r6, r1
 80017fa:	4690      	mov	r8, r2
 80017fc:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 80017fe:	f7ff fa13 	bl	8000c28 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001802:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001806:	b2db      	uxtb	r3, r3
 8001808:	2b20      	cmp	r3, #32
 800180a:	d004      	beq.n	8001816 <HAL_I2C_Master_Transmit+0x26>
    return HAL_BUSY;
 800180c:	2602      	movs	r6, #2
}
 800180e:	4630      	mov	r0, r6
 8001810:	b004      	add	sp, #16
 8001812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001816:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001818:	9000      	str	r0, [sp, #0]
 800181a:	2319      	movs	r3, #25
 800181c:	2201      	movs	r2, #1
 800181e:	494f      	ldr	r1, [pc, #316]	; (800195c <HAL_I2C_Master_Transmit+0x16c>)
 8001820:	4620      	mov	r0, r4
 8001822:	f7ff fd7e 	bl	8001322 <I2C_WaitOnFlagUntilTimeout>
 8001826:	2800      	cmp	r0, #0
 8001828:	f040 8091 	bne.w	800194e <HAL_I2C_Master_Transmit+0x15e>
    __HAL_LOCK(hi2c);
 800182c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001830:	2b01      	cmp	r3, #1
 8001832:	f000 808e 	beq.w	8001952 <HAL_I2C_Master_Transmit+0x162>
 8001836:	2301      	movs	r3, #1
 8001838:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800183c:	6823      	ldr	r3, [r4, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	f012 0f01 	tst.w	r2, #1
 8001844:	d103      	bne.n	800184e <HAL_I2C_Master_Transmit+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	f042 0201 	orr.w	r2, r2, #1
 800184c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800184e:	6822      	ldr	r2, [r4, #0]
 8001850:	6813      	ldr	r3, [r2, #0]
 8001852:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001856:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001858:	2321      	movs	r3, #33	; 0x21
 800185a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800185e:	2310      	movs	r3, #16
 8001860:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001864:	2300      	movs	r3, #0
 8001866:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8001868:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 800186c:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800186e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001870:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001872:	4b3b      	ldr	r3, [pc, #236]	; (8001960 <HAL_I2C_Master_Transmit+0x170>)
 8001874:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001876:	462b      	mov	r3, r5
 8001878:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800187a:	4631      	mov	r1, r6
 800187c:	4620      	mov	r0, r4
 800187e:	f7ff fddb 	bl	8001438 <I2C_MasterRequestWrite>
 8001882:	4606      	mov	r6, r0
 8001884:	2800      	cmp	r0, #0
 8001886:	d166      	bne.n	8001956 <HAL_I2C_Master_Transmit+0x166>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001888:	2300      	movs	r3, #0
 800188a:	9303      	str	r3, [sp, #12]
 800188c:	6823      	ldr	r3, [r4, #0]
 800188e:	695a      	ldr	r2, [r3, #20]
 8001890:	9203      	str	r2, [sp, #12]
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	9303      	str	r3, [sp, #12]
 8001896:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8001898:	e012      	b.n	80018c0 <HAL_I2C_Master_Transmit+0xd0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800189a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800189c:	2b04      	cmp	r3, #4
 800189e:	d001      	beq.n	80018a4 <HAL_I2C_Master_Transmit+0xb4>
        return HAL_ERROR;
 80018a0:	2601      	movs	r6, #1
 80018a2:	e7b4      	b.n	800180e <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018a4:	6822      	ldr	r2, [r4, #0]
 80018a6:	6813      	ldr	r3, [r2, #0]
 80018a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018ac:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 80018ae:	2601      	movs	r6, #1
 80018b0:	e7ad      	b.n	800180e <HAL_I2C_Master_Transmit+0x1e>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018b2:	462a      	mov	r2, r5
 80018b4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80018b6:	4620      	mov	r0, r4
 80018b8:	f7ff fea0 	bl	80015fc <I2C_WaitOnBTFFlagUntilTimeout>
 80018bc:	2800      	cmp	r0, #0
 80018be:	d12c      	bne.n	800191a <HAL_I2C_Master_Transmit+0x12a>
    while (hi2c->XferSize > 0U)
 80018c0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d035      	beq.n	8001932 <HAL_I2C_Master_Transmit+0x142>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018c6:	462a      	mov	r2, r5
 80018c8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80018ca:	4620      	mov	r0, r4
 80018cc:	f7ff fe08 	bl	80014e0 <I2C_WaitOnTXEFlagUntilTimeout>
 80018d0:	2800      	cmp	r0, #0
 80018d2:	d1e2      	bne.n	800189a <HAL_I2C_Master_Transmit+0xaa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018d4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80018d6:	6823      	ldr	r3, [r4, #0]
 80018d8:	7812      	ldrb	r2, [r2, #0]
 80018da:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80018dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80018de:	1c4b      	adds	r3, r1, #1
 80018e0:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80018e2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80018e4:	3b01      	subs	r3, #1
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80018ea:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80018ec:	3b01      	subs	r3, #1
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80018f2:	6822      	ldr	r2, [r4, #0]
 80018f4:	6950      	ldr	r0, [r2, #20]
 80018f6:	f010 0f04 	tst.w	r0, #4
 80018fa:	d0da      	beq.n	80018b2 <HAL_I2C_Master_Transmit+0xc2>
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d0d8      	beq.n	80018b2 <HAL_I2C_Master_Transmit+0xc2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001900:	784b      	ldrb	r3, [r1, #1]
 8001902:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8001904:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001906:	3301      	adds	r3, #1
 8001908:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 800190a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800190c:	3b01      	subs	r3, #1
 800190e:	b29b      	uxth	r3, r3
 8001910:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8001912:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001914:	3b01      	subs	r3, #1
 8001916:	8523      	strh	r3, [r4, #40]	; 0x28
 8001918:	e7cb      	b.n	80018b2 <HAL_I2C_Master_Transmit+0xc2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800191a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800191c:	2b04      	cmp	r3, #4
 800191e:	d001      	beq.n	8001924 <HAL_I2C_Master_Transmit+0x134>
        return HAL_ERROR;
 8001920:	2601      	movs	r6, #1
 8001922:	e774      	b.n	800180e <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001924:	6822      	ldr	r2, [r4, #0]
 8001926:	6813      	ldr	r3, [r2, #0]
 8001928:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800192c:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 800192e:	2601      	movs	r6, #1
 8001930:	e76d      	b.n	800180e <HAL_I2C_Master_Transmit+0x1e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001932:	6822      	ldr	r2, [r4, #0]
 8001934:	6813      	ldr	r3, [r2, #0]
 8001936:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800193a:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800193c:	2320      	movs	r3, #32
 800193e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001942:	2300      	movs	r3, #0
 8001944:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8001948:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 800194c:	e75f      	b.n	800180e <HAL_I2C_Master_Transmit+0x1e>
      return HAL_BUSY;
 800194e:	2602      	movs	r6, #2
 8001950:	e75d      	b.n	800180e <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 8001952:	2602      	movs	r6, #2
 8001954:	e75b      	b.n	800180e <HAL_I2C_Master_Transmit+0x1e>
      return HAL_ERROR;
 8001956:	2601      	movs	r6, #1
 8001958:	e759      	b.n	800180e <HAL_I2C_Master_Transmit+0x1e>
 800195a:	bf00      	nop
 800195c:	00100002 	.word	0x00100002
 8001960:	ffff0000 	.word	0xffff0000

08001964 <HAL_I2C_Mem_Write>:
{
 8001964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	4604      	mov	r4, r0
 800196c:	460e      	mov	r6, r1
 800196e:	4617      	mov	r7, r2
 8001970:	4698      	mov	r8, r3
  uint32_t tickstart = HAL_GetTick();
 8001972:	f7ff f959 	bl	8000c28 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001976:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800197a:	b2db      	uxtb	r3, r3
 800197c:	2b20      	cmp	r3, #32
 800197e:	d004      	beq.n	800198a <HAL_I2C_Mem_Write+0x26>
    return HAL_BUSY;
 8001980:	2302      	movs	r3, #2
}
 8001982:	4618      	mov	r0, r3
 8001984:	b002      	add	sp, #8
 8001986:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800198a:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800198c:	9000      	str	r0, [sp, #0]
 800198e:	2319      	movs	r3, #25
 8001990:	2201      	movs	r2, #1
 8001992:	494c      	ldr	r1, [pc, #304]	; (8001ac4 <HAL_I2C_Mem_Write+0x160>)
 8001994:	4620      	mov	r0, r4
 8001996:	f7ff fcc4 	bl	8001322 <I2C_WaitOnFlagUntilTimeout>
 800199a:	2800      	cmp	r0, #0
 800199c:	f040 808b 	bne.w	8001ab6 <HAL_I2C_Mem_Write+0x152>
    __HAL_LOCK(hi2c);
 80019a0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	f000 8088 	beq.w	8001aba <HAL_I2C_Mem_Write+0x156>
 80019aa:	2301      	movs	r3, #1
 80019ac:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019b0:	6823      	ldr	r3, [r4, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	f012 0f01 	tst.w	r2, #1
 80019b8:	d103      	bne.n	80019c2 <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	f042 0201 	orr.w	r2, r2, #1
 80019c0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019c2:	6822      	ldr	r2, [r4, #0]
 80019c4:	6813      	ldr	r3, [r2, #0]
 80019c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80019ca:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80019cc:	2321      	movs	r3, #33	; 0x21
 80019ce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80019d2:	2340      	movs	r3, #64	; 0x40
 80019d4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019d8:	2300      	movs	r3, #0
 80019da:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80019dc:	9b08      	ldr	r3, [sp, #32]
 80019de:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80019e0:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 80019e4:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019e6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80019e8:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019ea:	4b37      	ldr	r3, [pc, #220]	; (8001ac8 <HAL_I2C_Mem_Write+0x164>)
 80019ec:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019ee:	9501      	str	r5, [sp, #4]
 80019f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80019f2:	9300      	str	r3, [sp, #0]
 80019f4:	4643      	mov	r3, r8
 80019f6:	463a      	mov	r2, r7
 80019f8:	4631      	mov	r1, r6
 80019fa:	4620      	mov	r0, r4
 80019fc:	f7ff fd9a 	bl	8001534 <I2C_RequestMemoryWrite>
 8001a00:	2800      	cmp	r0, #0
 8001a02:	d15c      	bne.n	8001abe <HAL_I2C_Mem_Write+0x15a>
    while (hi2c->XferSize > 0U)
 8001a04:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d034      	beq.n	8001a74 <HAL_I2C_Mem_Write+0x110>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a0a:	462a      	mov	r2, r5
 8001a0c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001a0e:	4620      	mov	r0, r4
 8001a10:	f7ff fd66 	bl	80014e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a14:	bb10      	cbnz	r0, 8001a5c <HAL_I2C_Mem_Write+0xf8>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a16:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001a18:	6823      	ldr	r3, [r4, #0]
 8001a1a:	7812      	ldrb	r2, [r2, #0]
 8001a1c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001a1e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001a20:	1c4b      	adds	r3, r1, #1
 8001a22:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8001a24:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001a26:	3b01      	subs	r3, #1
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001a2c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001a2e:	3a01      	subs	r2, #1
 8001a30:	b292      	uxth	r2, r2
 8001a32:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a34:	6822      	ldr	r2, [r4, #0]
 8001a36:	6950      	ldr	r0, [r2, #20]
 8001a38:	f010 0f04 	tst.w	r0, #4
 8001a3c:	d0e2      	beq.n	8001a04 <HAL_I2C_Mem_Write+0xa0>
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d0e0      	beq.n	8001a04 <HAL_I2C_Mem_Write+0xa0>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a42:	784b      	ldrb	r3, [r1, #1]
 8001a44:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8001a46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a48:	3301      	adds	r3, #1
 8001a4a:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8001a4c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001a52:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001a54:	3b01      	subs	r3, #1
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001a5a:	e7d3      	b.n	8001a04 <HAL_I2C_Mem_Write+0xa0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a5e:	2b04      	cmp	r3, #4
 8001a60:	d001      	beq.n	8001a66 <HAL_I2C_Mem_Write+0x102>
        return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e78d      	b.n	8001982 <HAL_I2C_Mem_Write+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a66:	6822      	ldr	r2, [r4, #0]
 8001a68:	6813      	ldr	r3, [r2, #0]
 8001a6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a6e:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e786      	b.n	8001982 <HAL_I2C_Mem_Write+0x1e>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a74:	462a      	mov	r2, r5
 8001a76:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001a78:	4620      	mov	r0, r4
 8001a7a:	f7ff fdbf 	bl	80015fc <I2C_WaitOnBTFFlagUntilTimeout>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	b158      	cbz	r0, 8001a9a <HAL_I2C_Mem_Write+0x136>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a84:	2b04      	cmp	r3, #4
 8001a86:	d001      	beq.n	8001a8c <HAL_I2C_Mem_Write+0x128>
      return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e77a      	b.n	8001982 <HAL_I2C_Mem_Write+0x1e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a8c:	6822      	ldr	r2, [r4, #0]
 8001a8e:	6813      	ldr	r3, [r2, #0]
 8001a90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a94:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e773      	b.n	8001982 <HAL_I2C_Mem_Write+0x1e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a9a:	6821      	ldr	r1, [r4, #0]
 8001a9c:	680a      	ldr	r2, [r1, #0]
 8001a9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001aa2:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001aa4:	2220      	movs	r2, #32
 8001aa6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8001ab0:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    return HAL_OK;
 8001ab4:	e765      	b.n	8001982 <HAL_I2C_Mem_Write+0x1e>
      return HAL_BUSY;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	e763      	b.n	8001982 <HAL_I2C_Mem_Write+0x1e>
    __HAL_LOCK(hi2c);
 8001aba:	2302      	movs	r3, #2
 8001abc:	e761      	b.n	8001982 <HAL_I2C_Mem_Write+0x1e>
      return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e75f      	b.n	8001982 <HAL_I2C_Mem_Write+0x1e>
 8001ac2:	bf00      	nop
 8001ac4:	00100002 	.word	0x00100002
 8001ac8:	ffff0000 	.word	0xffff0000

08001acc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001acc:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ace:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <RCC_Delay+0x24>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a08      	ldr	r2, [pc, #32]	; (8001af4 <RCC_Delay+0x28>)
 8001ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad8:	0a5b      	lsrs	r3, r3, #9
 8001ada:	fb00 f003 	mul.w	r0, r0, r3
 8001ade:	9001      	str	r0, [sp, #4]
  do
  {
    __NOP();
 8001ae0:	bf00      	nop
  }
  while (Delay --);
 8001ae2:	9b01      	ldr	r3, [sp, #4]
 8001ae4:	1e5a      	subs	r2, r3, #1
 8001ae6:	9201      	str	r2, [sp, #4]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1f9      	bne.n	8001ae0 <RCC_Delay+0x14>
}
 8001aec:	b002      	add	sp, #8
 8001aee:	4770      	bx	lr
 8001af0:	20000044 	.word	0x20000044
 8001af4:	10624dd3 	.word	0x10624dd3

08001af8 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8001af8:	2800      	cmp	r0, #0
 8001afa:	f000 81f5 	beq.w	8001ee8 <HAL_RCC_OscConfig+0x3f0>
{
 8001afe:	b570      	push	{r4, r5, r6, lr}
 8001b00:	b082      	sub	sp, #8
 8001b02:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b04:	6803      	ldr	r3, [r0, #0]
 8001b06:	f013 0f01 	tst.w	r3, #1
 8001b0a:	d02c      	beq.n	8001b66 <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b0c:	4bab      	ldr	r3, [pc, #684]	; (8001dbc <HAL_RCC_OscConfig+0x2c4>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 030c 	and.w	r3, r3, #12
 8001b14:	2b04      	cmp	r3, #4
 8001b16:	d01d      	beq.n	8001b54 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b18:	4ba8      	ldr	r3, [pc, #672]	; (8001dbc <HAL_RCC_OscConfig+0x2c4>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 030c 	and.w	r3, r3, #12
 8001b20:	2b08      	cmp	r3, #8
 8001b22:	d012      	beq.n	8001b4a <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b24:	6863      	ldr	r3, [r4, #4]
 8001b26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b2a:	d041      	beq.n	8001bb0 <HAL_RCC_OscConfig+0xb8>
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d155      	bne.n	8001bdc <HAL_RCC_OscConfig+0xe4>
 8001b30:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b34:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	e037      	b.n	8001bba <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b4a:	4b9c      	ldr	r3, [pc, #624]	; (8001dbc <HAL_RCC_OscConfig+0x2c4>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001b52:	d0e7      	beq.n	8001b24 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b54:	4b99      	ldr	r3, [pc, #612]	; (8001dbc <HAL_RCC_OscConfig+0x2c4>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001b5c:	d003      	beq.n	8001b66 <HAL_RCC_OscConfig+0x6e>
 8001b5e:	6863      	ldr	r3, [r4, #4]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f000 81c3 	beq.w	8001eec <HAL_RCC_OscConfig+0x3f4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b66:	6823      	ldr	r3, [r4, #0]
 8001b68:	f013 0f02 	tst.w	r3, #2
 8001b6c:	d076      	beq.n	8001c5c <HAL_RCC_OscConfig+0x164>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b6e:	4b93      	ldr	r3, [pc, #588]	; (8001dbc <HAL_RCC_OscConfig+0x2c4>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f013 0f0c 	tst.w	r3, #12
 8001b76:	d05f      	beq.n	8001c38 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b78:	4b90      	ldr	r3, [pc, #576]	; (8001dbc <HAL_RCC_OscConfig+0x2c4>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f003 030c 	and.w	r3, r3, #12
 8001b80:	2b08      	cmp	r3, #8
 8001b82:	d054      	beq.n	8001c2e <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b84:	6923      	ldr	r3, [r4, #16]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f000 808a 	beq.w	8001ca0 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 8001b8c:	4b8c      	ldr	r3, [pc, #560]	; (8001dc0 <HAL_RCC_OscConfig+0x2c8>)
 8001b8e:	2201      	movs	r2, #1
 8001b90:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b92:	f7ff f849 	bl	8000c28 <HAL_GetTick>
 8001b96:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b98:	4b88      	ldr	r3, [pc, #544]	; (8001dbc <HAL_RCC_OscConfig+0x2c4>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f013 0f02 	tst.w	r3, #2
 8001ba0:	d175      	bne.n	8001c8e <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ba2:	f7ff f841 	bl	8000c28 <HAL_GetTick>
 8001ba6:	1b40      	subs	r0, r0, r5
 8001ba8:	2802      	cmp	r0, #2
 8001baa:	d9f5      	bls.n	8001b98 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8001bac:	2003      	movs	r0, #3
 8001bae:	e1a0      	b.n	8001ef2 <HAL_RCC_OscConfig+0x3fa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bb0:	4a82      	ldr	r2, [pc, #520]	; (8001dbc <HAL_RCC_OscConfig+0x2c4>)
 8001bb2:	6813      	ldr	r3, [r2, #0]
 8001bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb8:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bba:	6863      	ldr	r3, [r4, #4]
 8001bbc:	b343      	cbz	r3, 8001c10 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8001bbe:	f7ff f833 	bl	8000c28 <HAL_GetTick>
 8001bc2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bc4:	4b7d      	ldr	r3, [pc, #500]	; (8001dbc <HAL_RCC_OscConfig+0x2c4>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001bcc:	d1cb      	bne.n	8001b66 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bce:	f7ff f82b 	bl	8000c28 <HAL_GetTick>
 8001bd2:	1b40      	subs	r0, r0, r5
 8001bd4:	2864      	cmp	r0, #100	; 0x64
 8001bd6:	d9f5      	bls.n	8001bc4 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8001bd8:	2003      	movs	r0, #3
 8001bda:	e18a      	b.n	8001ef2 <HAL_RCC_OscConfig+0x3fa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001be0:	d009      	beq.n	8001bf6 <HAL_RCC_OscConfig+0xfe>
 8001be2:	4b76      	ldr	r3, [pc, #472]	; (8001dbc <HAL_RCC_OscConfig+0x2c4>)
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	e7e1      	b.n	8001bba <HAL_RCC_OscConfig+0xc2>
 8001bf6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001bfa:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	e7d4      	b.n	8001bba <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8001c10:	f7ff f80a 	bl	8000c28 <HAL_GetTick>
 8001c14:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c16:	4b69      	ldr	r3, [pc, #420]	; (8001dbc <HAL_RCC_OscConfig+0x2c4>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001c1e:	d0a2      	beq.n	8001b66 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c20:	f7ff f802 	bl	8000c28 <HAL_GetTick>
 8001c24:	1b40      	subs	r0, r0, r5
 8001c26:	2864      	cmp	r0, #100	; 0x64
 8001c28:	d9f5      	bls.n	8001c16 <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8001c2a:	2003      	movs	r0, #3
 8001c2c:	e161      	b.n	8001ef2 <HAL_RCC_OscConfig+0x3fa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c2e:	4b63      	ldr	r3, [pc, #396]	; (8001dbc <HAL_RCC_OscConfig+0x2c4>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001c36:	d1a5      	bne.n	8001b84 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c38:	4b60      	ldr	r3, [pc, #384]	; (8001dbc <HAL_RCC_OscConfig+0x2c4>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f013 0f02 	tst.w	r3, #2
 8001c40:	d004      	beq.n	8001c4c <HAL_RCC_OscConfig+0x154>
 8001c42:	6923      	ldr	r3, [r4, #16]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d001      	beq.n	8001c4c <HAL_RCC_OscConfig+0x154>
        return HAL_ERROR;
 8001c48:	2001      	movs	r0, #1
 8001c4a:	e152      	b.n	8001ef2 <HAL_RCC_OscConfig+0x3fa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c4c:	4a5b      	ldr	r2, [pc, #364]	; (8001dbc <HAL_RCC_OscConfig+0x2c4>)
 8001c4e:	6813      	ldr	r3, [r2, #0]
 8001c50:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001c54:	6961      	ldr	r1, [r4, #20]
 8001c56:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001c5a:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c5c:	6823      	ldr	r3, [r4, #0]
 8001c5e:	f013 0f08 	tst.w	r3, #8
 8001c62:	d032      	beq.n	8001cca <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c64:	69a3      	ldr	r3, [r4, #24]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d05b      	beq.n	8001d22 <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 8001c6a:	4b56      	ldr	r3, [pc, #344]	; (8001dc4 <HAL_RCC_OscConfig+0x2cc>)
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001c70:	f7fe ffda 	bl	8000c28 <HAL_GetTick>
 8001c74:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c76:	4b51      	ldr	r3, [pc, #324]	; (8001dbc <HAL_RCC_OscConfig+0x2c4>)
 8001c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7a:	f013 0f02 	tst.w	r3, #2
 8001c7e:	d121      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c80:	f7fe ffd2 	bl	8000c28 <HAL_GetTick>
 8001c84:	1b40      	subs	r0, r0, r5
 8001c86:	2802      	cmp	r0, #2
 8001c88:	d9f5      	bls.n	8001c76 <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 8001c8a:	2003      	movs	r0, #3
 8001c8c:	e131      	b.n	8001ef2 <HAL_RCC_OscConfig+0x3fa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c8e:	4a4b      	ldr	r2, [pc, #300]	; (8001dbc <HAL_RCC_OscConfig+0x2c4>)
 8001c90:	6813      	ldr	r3, [r2, #0]
 8001c92:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001c96:	6961      	ldr	r1, [r4, #20]
 8001c98:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	e7dd      	b.n	8001c5c <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8001ca0:	4b47      	ldr	r3, [pc, #284]	; (8001dc0 <HAL_RCC_OscConfig+0x2c8>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ca6:	f7fe ffbf 	bl	8000c28 <HAL_GetTick>
 8001caa:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cac:	4b43      	ldr	r3, [pc, #268]	; (8001dbc <HAL_RCC_OscConfig+0x2c4>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f013 0f02 	tst.w	r3, #2
 8001cb4:	d0d2      	beq.n	8001c5c <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cb6:	f7fe ffb7 	bl	8000c28 <HAL_GetTick>
 8001cba:	1b40      	subs	r0, r0, r5
 8001cbc:	2802      	cmp	r0, #2
 8001cbe:	d9f5      	bls.n	8001cac <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8001cc0:	2003      	movs	r0, #3
 8001cc2:	e116      	b.n	8001ef2 <HAL_RCC_OscConfig+0x3fa>
      RCC_Delay(1);
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	f7ff ff01 	bl	8001acc <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cca:	6823      	ldr	r3, [r4, #0]
 8001ccc:	f013 0f04 	tst.w	r3, #4
 8001cd0:	f000 8098 	beq.w	8001e04 <HAL_RCC_OscConfig+0x30c>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cd4:	4b39      	ldr	r3, [pc, #228]	; (8001dbc <HAL_RCC_OscConfig+0x2c4>)
 8001cd6:	69db      	ldr	r3, [r3, #28]
 8001cd8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001cdc:	d133      	bne.n	8001d46 <HAL_RCC_OscConfig+0x24e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cde:	4b37      	ldr	r3, [pc, #220]	; (8001dbc <HAL_RCC_OscConfig+0x2c4>)
 8001ce0:	69da      	ldr	r2, [r3, #28]
 8001ce2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ce6:	61da      	str	r2, [r3, #28]
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cee:	9301      	str	r3, [sp, #4]
 8001cf0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001cf2:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf4:	4b34      	ldr	r3, [pc, #208]	; (8001dc8 <HAL_RCC_OscConfig+0x2d0>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001cfc:	d025      	beq.n	8001d4a <HAL_RCC_OscConfig+0x252>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cfe:	68e3      	ldr	r3, [r4, #12]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d036      	beq.n	8001d72 <HAL_RCC_OscConfig+0x27a>
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d14c      	bne.n	8001da2 <HAL_RCC_OscConfig+0x2aa>
 8001d08:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001d0c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001d10:	6a1a      	ldr	r2, [r3, #32]
 8001d12:	f022 0201 	bic.w	r2, r2, #1
 8001d16:	621a      	str	r2, [r3, #32]
 8001d18:	6a1a      	ldr	r2, [r3, #32]
 8001d1a:	f022 0204 	bic.w	r2, r2, #4
 8001d1e:	621a      	str	r2, [r3, #32]
 8001d20:	e02c      	b.n	8001d7c <HAL_RCC_OscConfig+0x284>
      __HAL_RCC_LSI_DISABLE();
 8001d22:	4b28      	ldr	r3, [pc, #160]	; (8001dc4 <HAL_RCC_OscConfig+0x2cc>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001d28:	f7fe ff7e 	bl	8000c28 <HAL_GetTick>
 8001d2c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d2e:	4b23      	ldr	r3, [pc, #140]	; (8001dbc <HAL_RCC_OscConfig+0x2c4>)
 8001d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d32:	f013 0f02 	tst.w	r3, #2
 8001d36:	d0c8      	beq.n	8001cca <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d38:	f7fe ff76 	bl	8000c28 <HAL_GetTick>
 8001d3c:	1b40      	subs	r0, r0, r5
 8001d3e:	2802      	cmp	r0, #2
 8001d40:	d9f5      	bls.n	8001d2e <HAL_RCC_OscConfig+0x236>
          return HAL_TIMEOUT;
 8001d42:	2003      	movs	r0, #3
 8001d44:	e0d5      	b.n	8001ef2 <HAL_RCC_OscConfig+0x3fa>
    FlagStatus       pwrclkchanged = RESET;
 8001d46:	2500      	movs	r5, #0
 8001d48:	e7d4      	b.n	8001cf4 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d4a:	4a1f      	ldr	r2, [pc, #124]	; (8001dc8 <HAL_RCC_OscConfig+0x2d0>)
 8001d4c:	6813      	ldr	r3, [r2, #0]
 8001d4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d52:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001d54:	f7fe ff68 	bl	8000c28 <HAL_GetTick>
 8001d58:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d5a:	4b1b      	ldr	r3, [pc, #108]	; (8001dc8 <HAL_RCC_OscConfig+0x2d0>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001d62:	d1cc      	bne.n	8001cfe <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d64:	f7fe ff60 	bl	8000c28 <HAL_GetTick>
 8001d68:	1b80      	subs	r0, r0, r6
 8001d6a:	2864      	cmp	r0, #100	; 0x64
 8001d6c:	d9f5      	bls.n	8001d5a <HAL_RCC_OscConfig+0x262>
          return HAL_TIMEOUT;
 8001d6e:	2003      	movs	r0, #3
 8001d70:	e0bf      	b.n	8001ef2 <HAL_RCC_OscConfig+0x3fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d72:	4a12      	ldr	r2, [pc, #72]	; (8001dbc <HAL_RCC_OscConfig+0x2c4>)
 8001d74:	6a13      	ldr	r3, [r2, #32]
 8001d76:	f043 0301 	orr.w	r3, r3, #1
 8001d7a:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d7c:	68e3      	ldr	r3, [r4, #12]
 8001d7e:	b37b      	cbz	r3, 8001de0 <HAL_RCC_OscConfig+0x2e8>
      tickstart = HAL_GetTick();
 8001d80:	f7fe ff52 	bl	8000c28 <HAL_GetTick>
 8001d84:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d86:	4b0d      	ldr	r3, [pc, #52]	; (8001dbc <HAL_RCC_OscConfig+0x2c4>)
 8001d88:	6a1b      	ldr	r3, [r3, #32]
 8001d8a:	f013 0f02 	tst.w	r3, #2
 8001d8e:	d138      	bne.n	8001e02 <HAL_RCC_OscConfig+0x30a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d90:	f7fe ff4a 	bl	8000c28 <HAL_GetTick>
 8001d94:	1b80      	subs	r0, r0, r6
 8001d96:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d9a:	4298      	cmp	r0, r3
 8001d9c:	d9f3      	bls.n	8001d86 <HAL_RCC_OscConfig+0x28e>
          return HAL_TIMEOUT;
 8001d9e:	2003      	movs	r0, #3
 8001da0:	e0a7      	b.n	8001ef2 <HAL_RCC_OscConfig+0x3fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001da2:	2b05      	cmp	r3, #5
 8001da4:	d012      	beq.n	8001dcc <HAL_RCC_OscConfig+0x2d4>
 8001da6:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <HAL_RCC_OscConfig+0x2c4>)
 8001da8:	6a1a      	ldr	r2, [r3, #32]
 8001daa:	f022 0201 	bic.w	r2, r2, #1
 8001dae:	621a      	str	r2, [r3, #32]
 8001db0:	6a1a      	ldr	r2, [r3, #32]
 8001db2:	f022 0204 	bic.w	r2, r2, #4
 8001db6:	621a      	str	r2, [r3, #32]
 8001db8:	e7e0      	b.n	8001d7c <HAL_RCC_OscConfig+0x284>
 8001dba:	bf00      	nop
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	42420000 	.word	0x42420000
 8001dc4:	42420480 	.word	0x42420480
 8001dc8:	40007000 	.word	0x40007000
 8001dcc:	4b4c      	ldr	r3, [pc, #304]	; (8001f00 <HAL_RCC_OscConfig+0x408>)
 8001dce:	6a1a      	ldr	r2, [r3, #32]
 8001dd0:	f042 0204 	orr.w	r2, r2, #4
 8001dd4:	621a      	str	r2, [r3, #32]
 8001dd6:	6a1a      	ldr	r2, [r3, #32]
 8001dd8:	f042 0201 	orr.w	r2, r2, #1
 8001ddc:	621a      	str	r2, [r3, #32]
 8001dde:	e7cd      	b.n	8001d7c <HAL_RCC_OscConfig+0x284>
      tickstart = HAL_GetTick();
 8001de0:	f7fe ff22 	bl	8000c28 <HAL_GetTick>
 8001de4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001de6:	4b46      	ldr	r3, [pc, #280]	; (8001f00 <HAL_RCC_OscConfig+0x408>)
 8001de8:	6a1b      	ldr	r3, [r3, #32]
 8001dea:	f013 0f02 	tst.w	r3, #2
 8001dee:	d008      	beq.n	8001e02 <HAL_RCC_OscConfig+0x30a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001df0:	f7fe ff1a 	bl	8000c28 <HAL_GetTick>
 8001df4:	1b80      	subs	r0, r0, r6
 8001df6:	f241 3388 	movw	r3, #5000	; 0x1388
 8001dfa:	4298      	cmp	r0, r3
 8001dfc:	d9f3      	bls.n	8001de6 <HAL_RCC_OscConfig+0x2ee>
          return HAL_TIMEOUT;
 8001dfe:	2003      	movs	r0, #3
 8001e00:	e077      	b.n	8001ef2 <HAL_RCC_OscConfig+0x3fa>
    if (pwrclkchanged == SET)
 8001e02:	b9e5      	cbnz	r5, 8001e3e <HAL_RCC_OscConfig+0x346>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e04:	69e3      	ldr	r3, [r4, #28]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d072      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x3f8>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e0a:	4a3d      	ldr	r2, [pc, #244]	; (8001f00 <HAL_RCC_OscConfig+0x408>)
 8001e0c:	6852      	ldr	r2, [r2, #4]
 8001e0e:	f002 020c 	and.w	r2, r2, #12
 8001e12:	2a08      	cmp	r2, #8
 8001e14:	d056      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x3cc>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d017      	beq.n	8001e4a <HAL_RCC_OscConfig+0x352>
        __HAL_RCC_PLL_DISABLE();
 8001e1a:	4b3a      	ldr	r3, [pc, #232]	; (8001f04 <HAL_RCC_OscConfig+0x40c>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001e20:	f7fe ff02 	bl	8000c28 <HAL_GetTick>
 8001e24:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e26:	4b36      	ldr	r3, [pc, #216]	; (8001f00 <HAL_RCC_OscConfig+0x408>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001e2e:	d047      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x3c8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e30:	f7fe fefa 	bl	8000c28 <HAL_GetTick>
 8001e34:	1b00      	subs	r0, r0, r4
 8001e36:	2802      	cmp	r0, #2
 8001e38:	d9f5      	bls.n	8001e26 <HAL_RCC_OscConfig+0x32e>
            return HAL_TIMEOUT;
 8001e3a:	2003      	movs	r0, #3
 8001e3c:	e059      	b.n	8001ef2 <HAL_RCC_OscConfig+0x3fa>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e3e:	4a30      	ldr	r2, [pc, #192]	; (8001f00 <HAL_RCC_OscConfig+0x408>)
 8001e40:	69d3      	ldr	r3, [r2, #28]
 8001e42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e46:	61d3      	str	r3, [r2, #28]
 8001e48:	e7dc      	b.n	8001e04 <HAL_RCC_OscConfig+0x30c>
        __HAL_RCC_PLL_DISABLE();
 8001e4a:	4b2e      	ldr	r3, [pc, #184]	; (8001f04 <HAL_RCC_OscConfig+0x40c>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001e50:	f7fe feea 	bl	8000c28 <HAL_GetTick>
 8001e54:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e56:	4b2a      	ldr	r3, [pc, #168]	; (8001f00 <HAL_RCC_OscConfig+0x408>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001e5e:	d006      	beq.n	8001e6e <HAL_RCC_OscConfig+0x376>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e60:	f7fe fee2 	bl	8000c28 <HAL_GetTick>
 8001e64:	1b40      	subs	r0, r0, r5
 8001e66:	2802      	cmp	r0, #2
 8001e68:	d9f5      	bls.n	8001e56 <HAL_RCC_OscConfig+0x35e>
            return HAL_TIMEOUT;
 8001e6a:	2003      	movs	r0, #3
 8001e6c:	e041      	b.n	8001ef2 <HAL_RCC_OscConfig+0x3fa>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e6e:	6a23      	ldr	r3, [r4, #32]
 8001e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e74:	d01a      	beq.n	8001eac <HAL_RCC_OscConfig+0x3b4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e76:	4922      	ldr	r1, [pc, #136]	; (8001f00 <HAL_RCC_OscConfig+0x408>)
 8001e78:	684b      	ldr	r3, [r1, #4]
 8001e7a:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8001e7e:	6a22      	ldr	r2, [r4, #32]
 8001e80:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001e82:	4302      	orrs	r2, r0
 8001e84:	4313      	orrs	r3, r2
 8001e86:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8001e88:	4b1e      	ldr	r3, [pc, #120]	; (8001f04 <HAL_RCC_OscConfig+0x40c>)
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001e8e:	f7fe fecb 	bl	8000c28 <HAL_GetTick>
 8001e92:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e94:	4b1a      	ldr	r3, [pc, #104]	; (8001f00 <HAL_RCC_OscConfig+0x408>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001e9c:	d10e      	bne.n	8001ebc <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e9e:	f7fe fec3 	bl	8000c28 <HAL_GetTick>
 8001ea2:	1b00      	subs	r0, r0, r4
 8001ea4:	2802      	cmp	r0, #2
 8001ea6:	d9f5      	bls.n	8001e94 <HAL_RCC_OscConfig+0x39c>
            return HAL_TIMEOUT;
 8001ea8:	2003      	movs	r0, #3
 8001eaa:	e022      	b.n	8001ef2 <HAL_RCC_OscConfig+0x3fa>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001eac:	4a14      	ldr	r2, [pc, #80]	; (8001f00 <HAL_RCC_OscConfig+0x408>)
 8001eae:	6853      	ldr	r3, [r2, #4]
 8001eb0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001eb4:	68a1      	ldr	r1, [r4, #8]
 8001eb6:	430b      	orrs	r3, r1
 8001eb8:	6053      	str	r3, [r2, #4]
 8001eba:	e7dc      	b.n	8001e76 <HAL_RCC_OscConfig+0x37e>
  return HAL_OK;
 8001ebc:	2000      	movs	r0, #0
 8001ebe:	e018      	b.n	8001ef2 <HAL_RCC_OscConfig+0x3fa>
 8001ec0:	2000      	movs	r0, #0
 8001ec2:	e016      	b.n	8001ef2 <HAL_RCC_OscConfig+0x3fa>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d016      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x3fe>
        pll_config = RCC->CFGR;
 8001ec8:	4b0d      	ldr	r3, [pc, #52]	; (8001f00 <HAL_RCC_OscConfig+0x408>)
 8001eca:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ecc:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001ed0:	6a22      	ldr	r2, [r4, #32]
 8001ed2:	4291      	cmp	r1, r2
 8001ed4:	d001      	beq.n	8001eda <HAL_RCC_OscConfig+0x3e2>
          return HAL_ERROR;
 8001ed6:	2001      	movs	r0, #1
 8001ed8:	e00b      	b.n	8001ef2 <HAL_RCC_OscConfig+0x3fa>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001eda:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001ede:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d00a      	beq.n	8001efa <HAL_RCC_OscConfig+0x402>
          return HAL_ERROR;
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	e004      	b.n	8001ef2 <HAL_RCC_OscConfig+0x3fa>
    return HAL_ERROR;
 8001ee8:	2001      	movs	r0, #1
}
 8001eea:	4770      	bx	lr
        return HAL_ERROR;
 8001eec:	2001      	movs	r0, #1
 8001eee:	e000      	b.n	8001ef2 <HAL_RCC_OscConfig+0x3fa>
  return HAL_OK;
 8001ef0:	2000      	movs	r0, #0
}
 8001ef2:	b002      	add	sp, #8
 8001ef4:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001ef6:	2001      	movs	r0, #1
 8001ef8:	e7fb      	b.n	8001ef2 <HAL_RCC_OscConfig+0x3fa>
  return HAL_OK;
 8001efa:	2000      	movs	r0, #0
 8001efc:	e7f9      	b.n	8001ef2 <HAL_RCC_OscConfig+0x3fa>
 8001efe:	bf00      	nop
 8001f00:	40021000 	.word	0x40021000
 8001f04:	42420060 	.word	0x42420060

08001f08 <HAL_RCC_GetSysClockFreq>:
{
 8001f08:	b410      	push	{r4}
 8001f0a:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f0c:	4c18      	ldr	r4, [pc, #96]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x68>)
 8001f0e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001f12:	f10d 0c18 	add.w	ip, sp, #24
 8001f16:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001f1a:	8a23      	ldrh	r3, [r4, #16]
 8001f1c:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8001f20:	4b14      	ldr	r3, [pc, #80]	; (8001f74 <HAL_RCC_GetSysClockFreq+0x6c>)
 8001f22:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001f24:	f003 020c 	and.w	r2, r3, #12
 8001f28:	2a04      	cmp	r2, #4
 8001f2a:	d003      	beq.n	8001f34 <HAL_RCC_GetSysClockFreq+0x2c>
 8001f2c:	2a08      	cmp	r2, #8
 8001f2e:	d005      	beq.n	8001f3c <HAL_RCC_GetSysClockFreq+0x34>
      sysclockfreq = HSI_VALUE;
 8001f30:	4811      	ldr	r0, [pc, #68]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8001f32:	e000      	b.n	8001f36 <HAL_RCC_GetSysClockFreq+0x2e>
      sysclockfreq = HSE_VALUE;
 8001f34:	4811      	ldr	r0, [pc, #68]	; (8001f7c <HAL_RCC_GetSysClockFreq+0x74>)
}
 8001f36:	b007      	add	sp, #28
 8001f38:	bc10      	pop	{r4}
 8001f3a:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f3c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001f40:	a906      	add	r1, sp, #24
 8001f42:	440a      	add	r2, r1
 8001f44:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f48:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001f4c:	d00c      	beq.n	8001f68 <HAL_RCC_GetSysClockFreq+0x60>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f4e:	4b09      	ldr	r3, [pc, #36]	; (8001f74 <HAL_RCC_GetSysClockFreq+0x6c>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8001f56:	440b      	add	r3, r1
 8001f58:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f5c:	4807      	ldr	r0, [pc, #28]	; (8001f7c <HAL_RCC_GetSysClockFreq+0x74>)
 8001f5e:	fb00 f002 	mul.w	r0, r0, r2
 8001f62:	fbb0 f0f3 	udiv	r0, r0, r3
 8001f66:	e7e6      	b.n	8001f36 <HAL_RCC_GetSysClockFreq+0x2e>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f68:	4805      	ldr	r0, [pc, #20]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x78>)
 8001f6a:	fb00 f002 	mul.w	r0, r0, r2
 8001f6e:	e7e2      	b.n	8001f36 <HAL_RCC_GetSysClockFreq+0x2e>
 8001f70:	080073b8 	.word	0x080073b8
 8001f74:	40021000 	.word	0x40021000
 8001f78:	007a1200 	.word	0x007a1200
 8001f7c:	00f42400 	.word	0x00f42400
 8001f80:	003d0900 	.word	0x003d0900

08001f84 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001f84:	2800      	cmp	r0, #0
 8001f86:	f000 80a3 	beq.w	80020d0 <HAL_RCC_ClockConfig+0x14c>
{
 8001f8a:	b570      	push	{r4, r5, r6, lr}
 8001f8c:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f8e:	4b52      	ldr	r3, [pc, #328]	; (80020d8 <HAL_RCC_ClockConfig+0x154>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	428b      	cmp	r3, r1
 8001f98:	d20c      	bcs.n	8001fb4 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9a:	4a4f      	ldr	r2, [pc, #316]	; (80020d8 <HAL_RCC_ClockConfig+0x154>)
 8001f9c:	6813      	ldr	r3, [r2, #0]
 8001f9e:	f023 0307 	bic.w	r3, r3, #7
 8001fa2:	430b      	orrs	r3, r1
 8001fa4:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa6:	6813      	ldr	r3, [r2, #0]
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	428b      	cmp	r3, r1
 8001fae:	d001      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 8001fb0:	2001      	movs	r0, #1
}
 8001fb2:	bd70      	pop	{r4, r5, r6, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fb4:	6823      	ldr	r3, [r4, #0]
 8001fb6:	f013 0f02 	tst.w	r3, #2
 8001fba:	d017      	beq.n	8001fec <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fbc:	f013 0f04 	tst.w	r3, #4
 8001fc0:	d004      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fc2:	4a46      	ldr	r2, [pc, #280]	; (80020dc <HAL_RCC_ClockConfig+0x158>)
 8001fc4:	6853      	ldr	r3, [r2, #4]
 8001fc6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fca:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fcc:	6823      	ldr	r3, [r4, #0]
 8001fce:	f013 0f08 	tst.w	r3, #8
 8001fd2:	d004      	beq.n	8001fde <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fd4:	4a41      	ldr	r2, [pc, #260]	; (80020dc <HAL_RCC_ClockConfig+0x158>)
 8001fd6:	6853      	ldr	r3, [r2, #4]
 8001fd8:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001fdc:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fde:	4a3f      	ldr	r2, [pc, #252]	; (80020dc <HAL_RCC_ClockConfig+0x158>)
 8001fe0:	6853      	ldr	r3, [r2, #4]
 8001fe2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fe6:	68a0      	ldr	r0, [r4, #8]
 8001fe8:	4303      	orrs	r3, r0
 8001fea:	6053      	str	r3, [r2, #4]
 8001fec:	460d      	mov	r5, r1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fee:	6823      	ldr	r3, [r4, #0]
 8001ff0:	f013 0f01 	tst.w	r3, #1
 8001ff4:	d031      	beq.n	800205a <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ff6:	6863      	ldr	r3, [r4, #4]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d020      	beq.n	800203e <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d025      	beq.n	800204c <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002000:	4a36      	ldr	r2, [pc, #216]	; (80020dc <HAL_RCC_ClockConfig+0x158>)
 8002002:	6812      	ldr	r2, [r2, #0]
 8002004:	f012 0f02 	tst.w	r2, #2
 8002008:	d064      	beq.n	80020d4 <HAL_RCC_ClockConfig+0x150>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800200a:	4934      	ldr	r1, [pc, #208]	; (80020dc <HAL_RCC_ClockConfig+0x158>)
 800200c:	684a      	ldr	r2, [r1, #4]
 800200e:	f022 0203 	bic.w	r2, r2, #3
 8002012:	4313      	orrs	r3, r2
 8002014:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8002016:	f7fe fe07 	bl	8000c28 <HAL_GetTick>
 800201a:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800201c:	4b2f      	ldr	r3, [pc, #188]	; (80020dc <HAL_RCC_ClockConfig+0x158>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f003 030c 	and.w	r3, r3, #12
 8002024:	6862      	ldr	r2, [r4, #4]
 8002026:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800202a:	d016      	beq.n	800205a <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800202c:	f7fe fdfc 	bl	8000c28 <HAL_GetTick>
 8002030:	1b80      	subs	r0, r0, r6
 8002032:	f241 3388 	movw	r3, #5000	; 0x1388
 8002036:	4298      	cmp	r0, r3
 8002038:	d9f0      	bls.n	800201c <HAL_RCC_ClockConfig+0x98>
        return HAL_TIMEOUT;
 800203a:	2003      	movs	r0, #3
 800203c:	e7b9      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x2e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800203e:	4a27      	ldr	r2, [pc, #156]	; (80020dc <HAL_RCC_ClockConfig+0x158>)
 8002040:	6812      	ldr	r2, [r2, #0]
 8002042:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002046:	d1e0      	bne.n	800200a <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8002048:	2001      	movs	r0, #1
 800204a:	e7b2      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x2e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800204c:	4a23      	ldr	r2, [pc, #140]	; (80020dc <HAL_RCC_ClockConfig+0x158>)
 800204e:	6812      	ldr	r2, [r2, #0]
 8002050:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002054:	d1d9      	bne.n	800200a <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8002056:	2001      	movs	r0, #1
 8002058:	e7ab      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x2e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800205a:	4b1f      	ldr	r3, [pc, #124]	; (80020d8 <HAL_RCC_ClockConfig+0x154>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	42ab      	cmp	r3, r5
 8002064:	d90c      	bls.n	8002080 <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002066:	4a1c      	ldr	r2, [pc, #112]	; (80020d8 <HAL_RCC_ClockConfig+0x154>)
 8002068:	6813      	ldr	r3, [r2, #0]
 800206a:	f023 0307 	bic.w	r3, r3, #7
 800206e:	432b      	orrs	r3, r5
 8002070:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002072:	6813      	ldr	r3, [r2, #0]
 8002074:	f003 0307 	and.w	r3, r3, #7
 8002078:	42ab      	cmp	r3, r5
 800207a:	d001      	beq.n	8002080 <HAL_RCC_ClockConfig+0xfc>
    return HAL_ERROR;
 800207c:	2001      	movs	r0, #1
 800207e:	e798      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002080:	6823      	ldr	r3, [r4, #0]
 8002082:	f013 0f04 	tst.w	r3, #4
 8002086:	d006      	beq.n	8002096 <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002088:	4a14      	ldr	r2, [pc, #80]	; (80020dc <HAL_RCC_ClockConfig+0x158>)
 800208a:	6853      	ldr	r3, [r2, #4]
 800208c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002090:	68e1      	ldr	r1, [r4, #12]
 8002092:	430b      	orrs	r3, r1
 8002094:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002096:	6823      	ldr	r3, [r4, #0]
 8002098:	f013 0f08 	tst.w	r3, #8
 800209c:	d007      	beq.n	80020ae <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800209e:	4a0f      	ldr	r2, [pc, #60]	; (80020dc <HAL_RCC_ClockConfig+0x158>)
 80020a0:	6853      	ldr	r3, [r2, #4]
 80020a2:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80020a6:	6921      	ldr	r1, [r4, #16]
 80020a8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80020ac:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020ae:	f7ff ff2b 	bl	8001f08 <HAL_RCC_GetSysClockFreq>
 80020b2:	4b0a      	ldr	r3, [pc, #40]	; (80020dc <HAL_RCC_ClockConfig+0x158>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80020ba:	4a09      	ldr	r2, [pc, #36]	; (80020e0 <HAL_RCC_ClockConfig+0x15c>)
 80020bc:	5cd3      	ldrb	r3, [r2, r3]
 80020be:	40d8      	lsrs	r0, r3
 80020c0:	4b08      	ldr	r3, [pc, #32]	; (80020e4 <HAL_RCC_ClockConfig+0x160>)
 80020c2:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80020c4:	4b08      	ldr	r3, [pc, #32]	; (80020e8 <HAL_RCC_ClockConfig+0x164>)
 80020c6:	6818      	ldr	r0, [r3, #0]
 80020c8:	f7fe fd6a 	bl	8000ba0 <HAL_InitTick>
  return HAL_OK;
 80020cc:	2000      	movs	r0, #0
 80020ce:	e770      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80020d0:	2001      	movs	r0, #1
}
 80020d2:	4770      	bx	lr
        return HAL_ERROR;
 80020d4:	2001      	movs	r0, #1
 80020d6:	e76c      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x2e>
 80020d8:	40022000 	.word	0x40022000
 80020dc:	40021000 	.word	0x40021000
 80020e0:	0800b318 	.word	0x0800b318
 80020e4:	20000044 	.word	0x20000044
 80020e8:	20000004 	.word	0x20000004

080020ec <HAL_RCC_GetHCLKFreq>:
}
 80020ec:	4b01      	ldr	r3, [pc, #4]	; (80020f4 <HAL_RCC_GetHCLKFreq+0x8>)
 80020ee:	6818      	ldr	r0, [r3, #0]
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	20000044 	.word	0x20000044

080020f8 <HAL_RCC_GetPCLK1Freq>:
{
 80020f8:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020fa:	f7ff fff7 	bl	80020ec <HAL_RCC_GetHCLKFreq>
 80020fe:	4b04      	ldr	r3, [pc, #16]	; (8002110 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002106:	4a03      	ldr	r2, [pc, #12]	; (8002114 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002108:	5cd3      	ldrb	r3, [r2, r3]
}
 800210a:	40d8      	lsrs	r0, r3
 800210c:	bd08      	pop	{r3, pc}
 800210e:	bf00      	nop
 8002110:	40021000 	.word	0x40021000
 8002114:	0800b328 	.word	0x0800b328

08002118 <HAL_RCC_GetPCLK2Freq>:
{
 8002118:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800211a:	f7ff ffe7 	bl	80020ec <HAL_RCC_GetHCLKFreq>
 800211e:	4b04      	ldr	r3, [pc, #16]	; (8002130 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002126:	4a03      	ldr	r2, [pc, #12]	; (8002134 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002128:	5cd3      	ldrb	r3, [r2, r3]
}
 800212a:	40d8      	lsrs	r0, r3
 800212c:	bd08      	pop	{r3, pc}
 800212e:	bf00      	nop
 8002130:	40021000 	.word	0x40021000
 8002134:	0800b328 	.word	0x0800b328

08002138 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800213a:	4605      	mov	r5, r0
 800213c:	460f      	mov	r7, r1
 800213e:	4616      	mov	r6, r2
 8002140:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002142:	682b      	ldr	r3, [r5, #0]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	ea37 0303 	bics.w	r3, r7, r3
 800214a:	bf0c      	ite	eq
 800214c:	2301      	moveq	r3, #1
 800214e:	2300      	movne	r3, #0
 8002150:	42b3      	cmp	r3, r6
 8002152:	d037      	beq.n	80021c4 <SPI_WaitFlagStateUntilTimeout+0x8c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002154:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8002158:	d0f3      	beq.n	8002142 <SPI_WaitFlagStateUntilTimeout+0xa>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800215a:	f7fe fd65 	bl	8000c28 <HAL_GetTick>
 800215e:	9b06      	ldr	r3, [sp, #24]
 8002160:	1ac0      	subs	r0, r0, r3
 8002162:	42a0      	cmp	r0, r4
 8002164:	d201      	bcs.n	800216a <SPI_WaitFlagStateUntilTimeout+0x32>
 8002166:	2c00      	cmp	r4, #0
 8002168:	d1eb      	bne.n	8002142 <SPI_WaitFlagStateUntilTimeout+0xa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800216a:	682a      	ldr	r2, [r5, #0]
 800216c:	6853      	ldr	r3, [r2, #4]
 800216e:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8002172:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002174:	686b      	ldr	r3, [r5, #4]
 8002176:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800217a:	d00b      	beq.n	8002194 <SPI_WaitFlagStateUntilTimeout+0x5c>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800217c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800217e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002182:	d014      	beq.n	80021ae <SPI_WaitFlagStateUntilTimeout+0x76>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002184:	2301      	movs	r3, #1
 8002186:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800218a:	2300      	movs	r3, #0
 800218c:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50

        return HAL_TIMEOUT;
 8002190:	2003      	movs	r0, #3
 8002192:	e018      	b.n	80021c6 <SPI_WaitFlagStateUntilTimeout+0x8e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002194:	68ab      	ldr	r3, [r5, #8]
 8002196:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800219a:	d002      	beq.n	80021a2 <SPI_WaitFlagStateUntilTimeout+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800219c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021a0:	d1ec      	bne.n	800217c <SPI_WaitFlagStateUntilTimeout+0x44>
          __HAL_SPI_DISABLE(hspi);
 80021a2:	682a      	ldr	r2, [r5, #0]
 80021a4:	6813      	ldr	r3, [r2, #0]
 80021a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80021aa:	6013      	str	r3, [r2, #0]
 80021ac:	e7e6      	b.n	800217c <SPI_WaitFlagStateUntilTimeout+0x44>
          SPI_RESET_CRC(hspi);
 80021ae:	682a      	ldr	r2, [r5, #0]
 80021b0:	6813      	ldr	r3, [r2, #0]
 80021b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80021b6:	6013      	str	r3, [r2, #0]
 80021b8:	682a      	ldr	r2, [r5, #0]
 80021ba:	6813      	ldr	r3, [r2, #0]
 80021bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	e7df      	b.n	8002184 <SPI_WaitFlagStateUntilTimeout+0x4c>
      }
    }
  }

  return HAL_OK;
 80021c4:	2000      	movs	r0, #0
}
 80021c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080021c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80021c8:	b510      	push	{r4, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	4604      	mov	r4, r0
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80021ce:	9200      	str	r2, [sp, #0]
 80021d0:	460b      	mov	r3, r1
 80021d2:	2200      	movs	r2, #0
 80021d4:	2180      	movs	r1, #128	; 0x80
 80021d6:	f7ff ffaf 	bl	8002138 <SPI_WaitFlagStateUntilTimeout>
 80021da:	4603      	mov	r3, r0
 80021dc:	b910      	cbnz	r0, 80021e4 <SPI_EndRxTxTransaction+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 80021de:	4618      	mov	r0, r3
 80021e0:	b002      	add	sp, #8
 80021e2:	bd10      	pop	{r4, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80021e4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80021e6:	f043 0320 	orr.w	r3, r3, #32
 80021ea:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e7f6      	b.n	80021de <SPI_EndRxTxTransaction+0x16>

080021f0 <HAL_SPI_Init>:
  if (hspi == NULL)
 80021f0:	2800      	cmp	r0, #0
 80021f2:	d039      	beq.n	8002268 <HAL_SPI_Init+0x78>
{
 80021f4:	b510      	push	{r4, lr}
 80021f6:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021f8:	2300      	movs	r3, #0
 80021fa:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80021fc:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8002200:	2b00      	cmp	r3, #0
 8002202:	d02c      	beq.n	800225e <HAL_SPI_Init+0x6e>
  hspi->State = HAL_SPI_STATE_BUSY;
 8002204:	2302      	movs	r3, #2
 8002206:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 800220a:	6822      	ldr	r2, [r4, #0]
 800220c:	6813      	ldr	r3, [r2, #0]
 800220e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002212:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002214:	6863      	ldr	r3, [r4, #4]
 8002216:	68a2      	ldr	r2, [r4, #8]
 8002218:	4313      	orrs	r3, r2
 800221a:	68e2      	ldr	r2, [r4, #12]
 800221c:	4313      	orrs	r3, r2
 800221e:	6922      	ldr	r2, [r4, #16]
 8002220:	4313      	orrs	r3, r2
 8002222:	6962      	ldr	r2, [r4, #20]
 8002224:	4313      	orrs	r3, r2
 8002226:	69a2      	ldr	r2, [r4, #24]
 8002228:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800222c:	4313      	orrs	r3, r2
 800222e:	69e2      	ldr	r2, [r4, #28]
 8002230:	4313      	orrs	r3, r2
 8002232:	6a22      	ldr	r2, [r4, #32]
 8002234:	4313      	orrs	r3, r2
 8002236:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002238:	6822      	ldr	r2, [r4, #0]
 800223a:	430b      	orrs	r3, r1
 800223c:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800223e:	8b63      	ldrh	r3, [r4, #26]
 8002240:	6822      	ldr	r2, [r4, #0]
 8002242:	f003 0304 	and.w	r3, r3, #4
 8002246:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002248:	6822      	ldr	r2, [r4, #0]
 800224a:	69d3      	ldr	r3, [r2, #28]
 800224c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002250:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002252:	2000      	movs	r0, #0
 8002254:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002256:	2301      	movs	r3, #1
 8002258:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 800225c:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 800225e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8002262:	f002 fcbf 	bl	8004be4 <HAL_SPI_MspInit>
 8002266:	e7cd      	b.n	8002204 <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 8002268:	2001      	movs	r0, #1
}
 800226a:	4770      	bx	lr

0800226c <HAL_SPI_Transmit>:
{
 800226c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002270:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 8002272:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 8002276:	2c01      	cmp	r4, #1
 8002278:	f000 80c3 	beq.w	8002402 <HAL_SPI_Transmit+0x196>
 800227c:	461d      	mov	r5, r3
 800227e:	4617      	mov	r7, r2
 8002280:	4688      	mov	r8, r1
 8002282:	4604      	mov	r4, r0
 8002284:	2301      	movs	r3, #1
 8002286:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 800228a:	f7fe fccd 	bl	8000c28 <HAL_GetTick>
 800228e:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8002290:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b01      	cmp	r3, #1
 8002298:	d009      	beq.n	80022ae <HAL_SPI_Transmit+0x42>
    errorcode = HAL_BUSY;
 800229a:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800229c:	2301      	movs	r3, #1
 800229e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80022a2:	2300      	movs	r3, #0
 80022a4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80022a8:	b002      	add	sp, #8
 80022aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 80022ae:	f1b8 0f00 	cmp.w	r8, #0
 80022b2:	f000 8098 	beq.w	80023e6 <HAL_SPI_Transmit+0x17a>
 80022b6:	2f00      	cmp	r7, #0
 80022b8:	f000 8097 	beq.w	80023ea <HAL_SPI_Transmit+0x17e>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80022bc:	2303      	movs	r3, #3
 80022be:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022c2:	2300      	movs	r3, #0
 80022c4:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80022c6:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80022ca:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 80022cc:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80022ce:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80022d0:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80022d2:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80022d4:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 80022d6:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022d8:	68a3      	ldr	r3, [r4, #8]
 80022da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022de:	d01c      	beq.n	800231a <HAL_SPI_Transmit+0xae>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022e0:	6823      	ldr	r3, [r4, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80022e8:	d103      	bne.n	80022f2 <HAL_SPI_Transmit+0x86>
    __HAL_SPI_ENABLE(hspi);
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022f0:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80022f2:	68e3      	ldr	r3, [r4, #12]
 80022f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022f8:	d015      	beq.n	8002326 <HAL_SPI_Transmit+0xba>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022fa:	6863      	ldr	r3, [r4, #4]
 80022fc:	b10b      	cbz	r3, 8002302 <HAL_SPI_Transmit+0x96>
 80022fe:	2f01      	cmp	r7, #1
 8002300:	d149      	bne.n	8002396 <HAL_SPI_Transmit+0x12a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002302:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002304:	6823      	ldr	r3, [r4, #0]
 8002306:	7812      	ldrb	r2, [r2, #0]
 8002308:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800230a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800230c:	3301      	adds	r3, #1
 800230e:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8002310:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002312:	3b01      	subs	r3, #1
 8002314:	b29b      	uxth	r3, r3
 8002316:	86e3      	strh	r3, [r4, #54]	; 0x36
 8002318:	e03d      	b.n	8002396 <HAL_SPI_Transmit+0x12a>
    SPI_1LINE_TX(hspi);
 800231a:	6822      	ldr	r2, [r4, #0]
 800231c:	6813      	ldr	r3, [r2, #0]
 800231e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002322:	6013      	str	r3, [r2, #0]
 8002324:	e7dc      	b.n	80022e0 <HAL_SPI_Transmit+0x74>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002326:	6863      	ldr	r3, [r4, #4]
 8002328:	b10b      	cbz	r3, 800232e <HAL_SPI_Transmit+0xc2>
 800232a:	2f01      	cmp	r7, #1
 800232c:	d115      	bne.n	800235a <HAL_SPI_Transmit+0xee>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800232e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002330:	6823      	ldr	r3, [r4, #0]
 8002332:	8812      	ldrh	r2, [r2, #0]
 8002334:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002336:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002338:	3302      	adds	r3, #2
 800233a:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800233c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800233e:	3b01      	subs	r3, #1
 8002340:	b29b      	uxth	r3, r3
 8002342:	86e3      	strh	r3, [r4, #54]	; 0x36
 8002344:	e009      	b.n	800235a <HAL_SPI_Transmit+0xee>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002346:	f7fe fc6f 	bl	8000c28 <HAL_GetTick>
 800234a:	1b80      	subs	r0, r0, r6
 800234c:	42a8      	cmp	r0, r5
 800234e:	d302      	bcc.n	8002356 <HAL_SPI_Transmit+0xea>
 8002350:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8002354:	d14b      	bne.n	80023ee <HAL_SPI_Transmit+0x182>
 8002356:	2d00      	cmp	r5, #0
 8002358:	d04b      	beq.n	80023f2 <HAL_SPI_Transmit+0x186>
    while (hspi->TxXferCount > 0U)
 800235a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800235c:	b29b      	uxth	r3, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d02c      	beq.n	80023bc <HAL_SPI_Transmit+0x150>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002362:	6823      	ldr	r3, [r4, #0]
 8002364:	689a      	ldr	r2, [r3, #8]
 8002366:	f012 0f02 	tst.w	r2, #2
 800236a:	d0ec      	beq.n	8002346 <HAL_SPI_Transmit+0xda>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800236c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800236e:	8812      	ldrh	r2, [r2, #0]
 8002370:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002372:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002374:	3302      	adds	r3, #2
 8002376:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002378:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800237a:	3b01      	subs	r3, #1
 800237c:	b29b      	uxth	r3, r3
 800237e:	86e3      	strh	r3, [r4, #54]	; 0x36
 8002380:	e7eb      	b.n	800235a <HAL_SPI_Transmit+0xee>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002382:	f7fe fc51 	bl	8000c28 <HAL_GetTick>
 8002386:	1b80      	subs	r0, r0, r6
 8002388:	42a8      	cmp	r0, r5
 800238a:	d302      	bcc.n	8002392 <HAL_SPI_Transmit+0x126>
 800238c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8002390:	d131      	bne.n	80023f6 <HAL_SPI_Transmit+0x18a>
 8002392:	2d00      	cmp	r5, #0
 8002394:	d031      	beq.n	80023fa <HAL_SPI_Transmit+0x18e>
    while (hspi->TxXferCount > 0U)
 8002396:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002398:	b29b      	uxth	r3, r3
 800239a:	b17b      	cbz	r3, 80023bc <HAL_SPI_Transmit+0x150>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800239c:	6823      	ldr	r3, [r4, #0]
 800239e:	689a      	ldr	r2, [r3, #8]
 80023a0:	f012 0f02 	tst.w	r2, #2
 80023a4:	d0ed      	beq.n	8002382 <HAL_SPI_Transmit+0x116>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80023a6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80023a8:	7812      	ldrb	r2, [r2, #0]
 80023aa:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80023ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80023ae:	3301      	adds	r3, #1
 80023b0:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80023b2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80023b4:	3b01      	subs	r3, #1
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	86e3      	strh	r3, [r4, #54]	; 0x36
 80023ba:	e7ec      	b.n	8002396 <HAL_SPI_Transmit+0x12a>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023bc:	4632      	mov	r2, r6
 80023be:	4629      	mov	r1, r5
 80023c0:	4620      	mov	r0, r4
 80023c2:	f7ff ff01 	bl	80021c8 <SPI_EndRxTxTransaction>
 80023c6:	b108      	cbz	r0, 80023cc <HAL_SPI_Transmit+0x160>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023c8:	2320      	movs	r3, #32
 80023ca:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80023cc:	68a3      	ldr	r3, [r4, #8]
 80023ce:	b933      	cbnz	r3, 80023de <HAL_SPI_Transmit+0x172>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80023d0:	9301      	str	r3, [sp, #4]
 80023d2:	6823      	ldr	r3, [r4, #0]
 80023d4:	68da      	ldr	r2, [r3, #12]
 80023d6:	9201      	str	r2, [sp, #4]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	9301      	str	r3, [sp, #4]
 80023dc:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80023de:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80023e0:	b96b      	cbnz	r3, 80023fe <HAL_SPI_Transmit+0x192>
  HAL_StatusTypeDef errorcode = HAL_OK;
 80023e2:	2000      	movs	r0, #0
 80023e4:	e75a      	b.n	800229c <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 80023e6:	2001      	movs	r0, #1
 80023e8:	e758      	b.n	800229c <HAL_SPI_Transmit+0x30>
 80023ea:	2001      	movs	r0, #1
 80023ec:	e756      	b.n	800229c <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 80023ee:	2003      	movs	r0, #3
 80023f0:	e754      	b.n	800229c <HAL_SPI_Transmit+0x30>
 80023f2:	2003      	movs	r0, #3
 80023f4:	e752      	b.n	800229c <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 80023f6:	2003      	movs	r0, #3
 80023f8:	e750      	b.n	800229c <HAL_SPI_Transmit+0x30>
 80023fa:	2003      	movs	r0, #3
 80023fc:	e74e      	b.n	800229c <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 80023fe:	2001      	movs	r0, #1
 8002400:	e74c      	b.n	800229c <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 8002402:	2002      	movs	r0, #2
 8002404:	e750      	b.n	80022a8 <HAL_SPI_Transmit+0x3c>

08002406 <HAL_SPI_GetState>:
  return hspi->State;
 8002406:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 800240a:	4770      	bx	lr

0800240c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800240c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800240e:	6a03      	ldr	r3, [r0, #32]
 8002410:	f023 0301 	bic.w	r3, r3, #1
 8002414:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002416:	6a05      	ldr	r5, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002418:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800241a:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800241c:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002420:	680b      	ldr	r3, [r1, #0]
 8002422:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002424:	f025 0502 	bic.w	r5, r5, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002428:	688b      	ldr	r3, [r1, #8]
 800242a:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800242c:	4d10      	ldr	r5, [pc, #64]	; (8002470 <TIM_OC1_SetConfig+0x64>)
 800242e:	42a8      	cmp	r0, r5
 8002430:	d003      	beq.n	800243a <TIM_OC1_SetConfig+0x2e>
 8002432:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002436:	42a8      	cmp	r0, r5
 8002438:	d105      	bne.n	8002446 <TIM_OC1_SetConfig+0x3a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800243a:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800243e:	68cd      	ldr	r5, [r1, #12]
 8002440:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002442:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002446:	4d0a      	ldr	r5, [pc, #40]	; (8002470 <TIM_OC1_SetConfig+0x64>)
 8002448:	42a8      	cmp	r0, r5
 800244a:	d003      	beq.n	8002454 <TIM_OC1_SetConfig+0x48>
 800244c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002450:	42a8      	cmp	r0, r5
 8002452:	d105      	bne.n	8002460 <TIM_OC1_SetConfig+0x54>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002454:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002458:	694d      	ldr	r5, [r1, #20]
 800245a:	4315      	orrs	r5, r2
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800245c:	698a      	ldr	r2, [r1, #24]
 800245e:	432a      	orrs	r2, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002460:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002462:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002464:	684a      	ldr	r2, [r1, #4]
 8002466:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002468:	6203      	str	r3, [r0, #32]
}
 800246a:	bc30      	pop	{r4, r5}
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	40012c00 	.word	0x40012c00

08002474 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002474:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002476:	6a03      	ldr	r3, [r0, #32]
 8002478:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800247c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800247e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002480:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002482:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002484:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002488:	680d      	ldr	r5, [r1, #0]
 800248a:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800248c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002490:	688d      	ldr	r5, [r1, #8]
 8002492:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002496:	4d12      	ldr	r5, [pc, #72]	; (80024e0 <TIM_OC3_SetConfig+0x6c>)
 8002498:	42a8      	cmp	r0, r5
 800249a:	d003      	beq.n	80024a4 <TIM_OC3_SetConfig+0x30>
 800249c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80024a0:	42a8      	cmp	r0, r5
 80024a2:	d106      	bne.n	80024b2 <TIM_OC3_SetConfig+0x3e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80024a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80024a8:	68cd      	ldr	r5, [r1, #12]
 80024aa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80024ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024b2:	4d0b      	ldr	r5, [pc, #44]	; (80024e0 <TIM_OC3_SetConfig+0x6c>)
 80024b4:	42a8      	cmp	r0, r5
 80024b6:	d003      	beq.n	80024c0 <TIM_OC3_SetConfig+0x4c>
 80024b8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80024bc:	42a8      	cmp	r0, r5
 80024be:	d107      	bne.n	80024d0 <TIM_OC3_SetConfig+0x5c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80024c0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80024c4:	694d      	ldr	r5, [r1, #20]
 80024c6:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80024ca:	698d      	ldr	r5, [r1, #24]
 80024cc:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024d0:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80024d2:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80024d4:	684a      	ldr	r2, [r1, #4]
 80024d6:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024d8:	6203      	str	r3, [r0, #32]
}
 80024da:	bc30      	pop	{r4, r5}
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	40012c00 	.word	0x40012c00

080024e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024e4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80024e6:	6a03      	ldr	r3, [r0, #32]
 80024e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80024ec:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024ee:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024f0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80024f2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80024f4:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024f8:	680d      	ldr	r5, [r1, #0]
 80024fa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80024fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002502:	688d      	ldr	r5, [r1, #8]
 8002504:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002508:	4d09      	ldr	r5, [pc, #36]	; (8002530 <TIM_OC4_SetConfig+0x4c>)
 800250a:	42a8      	cmp	r0, r5
 800250c:	d003      	beq.n	8002516 <TIM_OC4_SetConfig+0x32>
 800250e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002512:	42a8      	cmp	r0, r5
 8002514:	d104      	bne.n	8002520 <TIM_OC4_SetConfig+0x3c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002516:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800251a:	694d      	ldr	r5, [r1, #20]
 800251c:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002520:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002522:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002524:	684a      	ldr	r2, [r1, #4]
 8002526:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002528:	6203      	str	r3, [r0, #32]
}
 800252a:	bc30      	pop	{r4, r5}
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	40012c00 	.word	0x40012c00

08002534 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002534:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002536:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002538:	6a04      	ldr	r4, [r0, #32]
 800253a:	f024 0401 	bic.w	r4, r4, #1
 800253e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002540:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002542:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002546:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800254a:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 800254e:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002550:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002552:	6203      	str	r3, [r0, #32]
}
 8002554:	bc10      	pop	{r4}
 8002556:	4770      	bx	lr

08002558 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002558:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800255a:	6a03      	ldr	r3, [r0, #32]
 800255c:	f023 0310 	bic.w	r3, r3, #16
 8002560:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002562:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002564:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002566:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800256a:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800256e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002572:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002576:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002578:	6203      	str	r3, [r0, #32]
}
 800257a:	bc10      	pop	{r4}
 800257c:	4770      	bx	lr

0800257e <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800257e:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002580:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002584:	4319      	orrs	r1, r3
 8002586:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800258a:	6081      	str	r1, [r0, #8]
}
 800258c:	4770      	bx	lr

0800258e <HAL_TIM_PWM_MspInit>:
}
 800258e:	4770      	bx	lr

08002590 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8002590:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002592:	4a24      	ldr	r2, [pc, #144]	; (8002624 <TIM_Base_SetConfig+0x94>)
 8002594:	4290      	cmp	r0, r2
 8002596:	d012      	beq.n	80025be <TIM_Base_SetConfig+0x2e>
 8002598:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800259c:	4290      	cmp	r0, r2
 800259e:	d00e      	beq.n	80025be <TIM_Base_SetConfig+0x2e>
 80025a0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80025a4:	d00b      	beq.n	80025be <TIM_Base_SetConfig+0x2e>
 80025a6:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80025aa:	4290      	cmp	r0, r2
 80025ac:	d007      	beq.n	80025be <TIM_Base_SetConfig+0x2e>
 80025ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80025b2:	4290      	cmp	r0, r2
 80025b4:	d003      	beq.n	80025be <TIM_Base_SetConfig+0x2e>
 80025b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80025ba:	4290      	cmp	r0, r2
 80025bc:	d103      	bne.n	80025c6 <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80025c2:	684a      	ldr	r2, [r1, #4]
 80025c4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025c6:	4a17      	ldr	r2, [pc, #92]	; (8002624 <TIM_Base_SetConfig+0x94>)
 80025c8:	4290      	cmp	r0, r2
 80025ca:	d012      	beq.n	80025f2 <TIM_Base_SetConfig+0x62>
 80025cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025d0:	4290      	cmp	r0, r2
 80025d2:	d00e      	beq.n	80025f2 <TIM_Base_SetConfig+0x62>
 80025d4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80025d8:	d00b      	beq.n	80025f2 <TIM_Base_SetConfig+0x62>
 80025da:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80025de:	4290      	cmp	r0, r2
 80025e0:	d007      	beq.n	80025f2 <TIM_Base_SetConfig+0x62>
 80025e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80025e6:	4290      	cmp	r0, r2
 80025e8:	d003      	beq.n	80025f2 <TIM_Base_SetConfig+0x62>
 80025ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80025ee:	4290      	cmp	r0, r2
 80025f0:	d103      	bne.n	80025fa <TIM_Base_SetConfig+0x6a>
    tmpcr1 &= ~TIM_CR1_CKD;
 80025f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025f6:	68ca      	ldr	r2, [r1, #12]
 80025f8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025fe:	694a      	ldr	r2, [r1, #20]
 8002600:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002602:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002604:	688b      	ldr	r3, [r1, #8]
 8002606:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002608:	680b      	ldr	r3, [r1, #0]
 800260a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800260c:	4b05      	ldr	r3, [pc, #20]	; (8002624 <TIM_Base_SetConfig+0x94>)
 800260e:	4298      	cmp	r0, r3
 8002610:	d003      	beq.n	800261a <TIM_Base_SetConfig+0x8a>
 8002612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002616:	4298      	cmp	r0, r3
 8002618:	d101      	bne.n	800261e <TIM_Base_SetConfig+0x8e>
    TIMx->RCR = Structure->RepetitionCounter;
 800261a:	690b      	ldr	r3, [r1, #16]
 800261c:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800261e:	2301      	movs	r3, #1
 8002620:	6143      	str	r3, [r0, #20]
}
 8002622:	4770      	bx	lr
 8002624:	40012c00 	.word	0x40012c00

08002628 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002628:	b1a8      	cbz	r0, 8002656 <HAL_TIM_Base_Init+0x2e>
{
 800262a:	b510      	push	{r4, lr}
 800262c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800262e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002632:	b15b      	cbz	r3, 800264c <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8002634:	2302      	movs	r3, #2
 8002636:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800263a:	1d21      	adds	r1, r4, #4
 800263c:	6820      	ldr	r0, [r4, #0]
 800263e:	f7ff ffa7 	bl	8002590 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002642:	2301      	movs	r3, #1
 8002644:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002648:	2000      	movs	r0, #0
}
 800264a:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800264c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002650:	f002 fbb0 	bl	8004db4 <HAL_TIM_Base_MspInit>
 8002654:	e7ee      	b.n	8002634 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002656:	2001      	movs	r0, #1
}
 8002658:	4770      	bx	lr

0800265a <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800265a:	b1a8      	cbz	r0, 8002688 <HAL_TIM_PWM_Init+0x2e>
{
 800265c:	b510      	push	{r4, lr}
 800265e:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002660:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002664:	b15b      	cbz	r3, 800267e <HAL_TIM_PWM_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8002666:	2302      	movs	r3, #2
 8002668:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800266c:	1d21      	adds	r1, r4, #4
 800266e:	6820      	ldr	r0, [r4, #0]
 8002670:	f7ff ff8e 	bl	8002590 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002674:	2301      	movs	r3, #1
 8002676:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800267a:	2000      	movs	r0, #0
}
 800267c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800267e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002682:	f7ff ff84 	bl	800258e <HAL_TIM_PWM_MspInit>
 8002686:	e7ee      	b.n	8002666 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8002688:	2001      	movs	r0, #1
}
 800268a:	4770      	bx	lr

0800268c <TIM_OC2_SetConfig>:
{
 800268c:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800268e:	6a03      	ldr	r3, [r0, #32]
 8002690:	f023 0310 	bic.w	r3, r3, #16
 8002694:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002696:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002698:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800269a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800269c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026a0:	680d      	ldr	r5, [r1, #0]
 80026a2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80026a6:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80026aa:	688d      	ldr	r5, [r1, #8]
 80026ac:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80026b0:	4d11      	ldr	r5, [pc, #68]	; (80026f8 <TIM_OC2_SetConfig+0x6c>)
 80026b2:	42a8      	cmp	r0, r5
 80026b4:	d003      	beq.n	80026be <TIM_OC2_SetConfig+0x32>
 80026b6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80026ba:	42a8      	cmp	r0, r5
 80026bc:	d106      	bne.n	80026cc <TIM_OC2_SetConfig+0x40>
    tmpccer &= ~TIM_CCER_CC2NP;
 80026be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80026c2:	68cd      	ldr	r5, [r1, #12]
 80026c4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80026c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026cc:	4d0a      	ldr	r5, [pc, #40]	; (80026f8 <TIM_OC2_SetConfig+0x6c>)
 80026ce:	42a8      	cmp	r0, r5
 80026d0:	d003      	beq.n	80026da <TIM_OC2_SetConfig+0x4e>
 80026d2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80026d6:	42a8      	cmp	r0, r5
 80026d8:	d107      	bne.n	80026ea <TIM_OC2_SetConfig+0x5e>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80026da:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80026de:	694d      	ldr	r5, [r1, #20]
 80026e0:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80026e4:	698d      	ldr	r5, [r1, #24]
 80026e6:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80026ea:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80026ec:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80026ee:	684a      	ldr	r2, [r1, #4]
 80026f0:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80026f2:	6203      	str	r3, [r0, #32]
}
 80026f4:	bc30      	pop	{r4, r5}
 80026f6:	4770      	bx	lr
 80026f8:	40012c00 	.word	0x40012c00

080026fc <HAL_TIM_PWM_ConfigChannel>:
{
 80026fc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80026fe:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002702:	2b01      	cmp	r3, #1
 8002704:	d066      	beq.n	80027d4 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8002706:	460d      	mov	r5, r1
 8002708:	4604      	mov	r4, r0
 800270a:	2301      	movs	r3, #1
 800270c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002710:	2302      	movs	r3, #2
 8002712:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8002716:	2a0c      	cmp	r2, #12
 8002718:	d81a      	bhi.n	8002750 <HAL_TIM_PWM_ConfigChannel+0x54>
 800271a:	e8df f002 	tbb	[pc, r2]
 800271e:	1907      	.short	0x1907
 8002720:	19201919 	.word	0x19201919
 8002724:	19341919 	.word	0x19341919
 8002728:	1919      	.short	0x1919
 800272a:	47          	.byte	0x47
 800272b:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800272c:	6800      	ldr	r0, [r0, #0]
 800272e:	f7ff fe6d 	bl	800240c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002732:	6822      	ldr	r2, [r4, #0]
 8002734:	6993      	ldr	r3, [r2, #24]
 8002736:	f043 0308 	orr.w	r3, r3, #8
 800273a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800273c:	6822      	ldr	r2, [r4, #0]
 800273e:	6993      	ldr	r3, [r2, #24]
 8002740:	f023 0304 	bic.w	r3, r3, #4
 8002744:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002746:	6822      	ldr	r2, [r4, #0]
 8002748:	6993      	ldr	r3, [r2, #24]
 800274a:	6929      	ldr	r1, [r5, #16]
 800274c:	430b      	orrs	r3, r1
 800274e:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002750:	2301      	movs	r3, #1
 8002752:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002756:	2000      	movs	r0, #0
 8002758:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800275c:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800275e:	6800      	ldr	r0, [r0, #0]
 8002760:	f7ff ff94 	bl	800268c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002764:	6822      	ldr	r2, [r4, #0]
 8002766:	6993      	ldr	r3, [r2, #24]
 8002768:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800276c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800276e:	6822      	ldr	r2, [r4, #0]
 8002770:	6993      	ldr	r3, [r2, #24]
 8002772:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002776:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002778:	6822      	ldr	r2, [r4, #0]
 800277a:	6993      	ldr	r3, [r2, #24]
 800277c:	6929      	ldr	r1, [r5, #16]
 800277e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002782:	6193      	str	r3, [r2, #24]
      break;
 8002784:	e7e4      	b.n	8002750 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002786:	6800      	ldr	r0, [r0, #0]
 8002788:	f7ff fe74 	bl	8002474 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800278c:	6822      	ldr	r2, [r4, #0]
 800278e:	69d3      	ldr	r3, [r2, #28]
 8002790:	f043 0308 	orr.w	r3, r3, #8
 8002794:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002796:	6822      	ldr	r2, [r4, #0]
 8002798:	69d3      	ldr	r3, [r2, #28]
 800279a:	f023 0304 	bic.w	r3, r3, #4
 800279e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80027a0:	6822      	ldr	r2, [r4, #0]
 80027a2:	69d3      	ldr	r3, [r2, #28]
 80027a4:	6929      	ldr	r1, [r5, #16]
 80027a6:	430b      	orrs	r3, r1
 80027a8:	61d3      	str	r3, [r2, #28]
      break;
 80027aa:	e7d1      	b.n	8002750 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80027ac:	6800      	ldr	r0, [r0, #0]
 80027ae:	f7ff fe99 	bl	80024e4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80027b2:	6822      	ldr	r2, [r4, #0]
 80027b4:	69d3      	ldr	r3, [r2, #28]
 80027b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027ba:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80027bc:	6822      	ldr	r2, [r4, #0]
 80027be:	69d3      	ldr	r3, [r2, #28]
 80027c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027c4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80027c6:	6822      	ldr	r2, [r4, #0]
 80027c8:	69d3      	ldr	r3, [r2, #28]
 80027ca:	6929      	ldr	r1, [r5, #16]
 80027cc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80027d0:	61d3      	str	r3, [r2, #28]
      break;
 80027d2:	e7bd      	b.n	8002750 <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_LOCK(htim);
 80027d4:	2002      	movs	r0, #2
 80027d6:	e7c1      	b.n	800275c <HAL_TIM_PWM_ConfigChannel+0x60>

080027d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027d8:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027da:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027dc:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027e0:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80027e4:	430b      	orrs	r3, r1
 80027e6:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027e8:	6083      	str	r3, [r0, #8]
}
 80027ea:	bc10      	pop	{r4}
 80027ec:	4770      	bx	lr

080027ee <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80027ee:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d066      	beq.n	80028c4 <HAL_TIM_ConfigClockSource+0xd6>
{
 80027f6:	b510      	push	{r4, lr}
 80027f8:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80027fa:	2301      	movs	r3, #1
 80027fc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002800:	2302      	movs	r3, #2
 8002802:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002806:	6802      	ldr	r2, [r0, #0]
 8002808:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800280a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800280e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002812:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8002814:	680b      	ldr	r3, [r1, #0]
 8002816:	2b40      	cmp	r3, #64	; 0x40
 8002818:	d04a      	beq.n	80028b0 <HAL_TIM_ConfigClockSource+0xc2>
 800281a:	d913      	bls.n	8002844 <HAL_TIM_ConfigClockSource+0x56>
 800281c:	2b60      	cmp	r3, #96	; 0x60
 800281e:	d03d      	beq.n	800289c <HAL_TIM_ConfigClockSource+0xae>
 8002820:	d91e      	bls.n	8002860 <HAL_TIM_ConfigClockSource+0x72>
 8002822:	2b70      	cmp	r3, #112	; 0x70
 8002824:	d028      	beq.n	8002878 <HAL_TIM_ConfigClockSource+0x8a>
 8002826:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800282a:	d130      	bne.n	800288e <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 800282c:	68cb      	ldr	r3, [r1, #12]
 800282e:	684a      	ldr	r2, [r1, #4]
 8002830:	6889      	ldr	r1, [r1, #8]
 8002832:	6800      	ldr	r0, [r0, #0]
 8002834:	f7ff ffd0 	bl	80027d8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002838:	6822      	ldr	r2, [r4, #0]
 800283a:	6893      	ldr	r3, [r2, #8]
 800283c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002840:	6093      	str	r3, [r2, #8]
      break;
 8002842:	e024      	b.n	800288e <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 8002844:	2b10      	cmp	r3, #16
 8002846:	d006      	beq.n	8002856 <HAL_TIM_ConfigClockSource+0x68>
 8002848:	d904      	bls.n	8002854 <HAL_TIM_ConfigClockSource+0x66>
 800284a:	2b20      	cmp	r3, #32
 800284c:	d003      	beq.n	8002856 <HAL_TIM_ConfigClockSource+0x68>
 800284e:	2b30      	cmp	r3, #48	; 0x30
 8002850:	d001      	beq.n	8002856 <HAL_TIM_ConfigClockSource+0x68>
 8002852:	e01c      	b.n	800288e <HAL_TIM_ConfigClockSource+0xa0>
 8002854:	b9db      	cbnz	r3, 800288e <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002856:	4619      	mov	r1, r3
 8002858:	6820      	ldr	r0, [r4, #0]
 800285a:	f7ff fe90 	bl	800257e <TIM_ITRx_SetConfig>
      break;
 800285e:	e016      	b.n	800288e <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 8002860:	2b50      	cmp	r3, #80	; 0x50
 8002862:	d114      	bne.n	800288e <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002864:	68ca      	ldr	r2, [r1, #12]
 8002866:	6849      	ldr	r1, [r1, #4]
 8002868:	6800      	ldr	r0, [r0, #0]
 800286a:	f7ff fe63 	bl	8002534 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800286e:	2150      	movs	r1, #80	; 0x50
 8002870:	6820      	ldr	r0, [r4, #0]
 8002872:	f7ff fe84 	bl	800257e <TIM_ITRx_SetConfig>
      break;
 8002876:	e00a      	b.n	800288e <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 8002878:	68cb      	ldr	r3, [r1, #12]
 800287a:	684a      	ldr	r2, [r1, #4]
 800287c:	6889      	ldr	r1, [r1, #8]
 800287e:	6800      	ldr	r0, [r0, #0]
 8002880:	f7ff ffaa 	bl	80027d8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002884:	6822      	ldr	r2, [r4, #0]
 8002886:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002888:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800288c:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 800288e:	2301      	movs	r3, #1
 8002890:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002894:	2000      	movs	r0, #0
 8002896:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800289a:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 800289c:	68ca      	ldr	r2, [r1, #12]
 800289e:	6849      	ldr	r1, [r1, #4]
 80028a0:	6800      	ldr	r0, [r0, #0]
 80028a2:	f7ff fe59 	bl	8002558 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028a6:	2160      	movs	r1, #96	; 0x60
 80028a8:	6820      	ldr	r0, [r4, #0]
 80028aa:	f7ff fe68 	bl	800257e <TIM_ITRx_SetConfig>
      break;
 80028ae:	e7ee      	b.n	800288e <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028b0:	68ca      	ldr	r2, [r1, #12]
 80028b2:	6849      	ldr	r1, [r1, #4]
 80028b4:	6800      	ldr	r0, [r0, #0]
 80028b6:	f7ff fe3d 	bl	8002534 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028ba:	2140      	movs	r1, #64	; 0x40
 80028bc:	6820      	ldr	r0, [r4, #0]
 80028be:	f7ff fe5e 	bl	800257e <TIM_ITRx_SetConfig>
      break;
 80028c2:	e7e4      	b.n	800288e <HAL_TIM_ConfigClockSource+0xa0>
  __HAL_LOCK(htim);
 80028c4:	2002      	movs	r0, #2
}
 80028c6:	4770      	bx	lr

080028c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80028c8:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80028ca:	f001 011f 	and.w	r1, r1, #31
 80028ce:	2301      	movs	r3, #1
 80028d0:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80028d4:	6a03      	ldr	r3, [r0, #32]
 80028d6:	ea23 0304 	bic.w	r3, r3, r4
 80028da:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80028dc:	6a03      	ldr	r3, [r0, #32]
 80028de:	408a      	lsls	r2, r1
 80028e0:	4313      	orrs	r3, r2
 80028e2:	6203      	str	r3, [r0, #32]
}
 80028e4:	bc10      	pop	{r4}
 80028e6:	4770      	bx	lr

080028e8 <HAL_TIM_PWM_Start>:
{
 80028e8:	b510      	push	{r4, lr}
 80028ea:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80028ec:	2201      	movs	r2, #1
 80028ee:	6800      	ldr	r0, [r0, #0]
 80028f0:	f7ff ffea 	bl	80028c8 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80028f4:	6823      	ldr	r3, [r4, #0]
 80028f6:	4a0b      	ldr	r2, [pc, #44]	; (8002924 <HAL_TIM_PWM_Start+0x3c>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d003      	beq.n	8002904 <HAL_TIM_PWM_Start+0x1c>
 80028fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002900:	4293      	cmp	r3, r2
 8002902:	d103      	bne.n	800290c <HAL_TIM_PWM_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 8002904:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002906:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800290a:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800290c:	6822      	ldr	r2, [r4, #0]
 800290e:	6893      	ldr	r3, [r2, #8]
 8002910:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002914:	2b06      	cmp	r3, #6
 8002916:	d003      	beq.n	8002920 <HAL_TIM_PWM_Start+0x38>
    __HAL_TIM_ENABLE(htim);
 8002918:	6813      	ldr	r3, [r2, #0]
 800291a:	f043 0301 	orr.w	r3, r3, #1
 800291e:	6013      	str	r3, [r2, #0]
}
 8002920:	2000      	movs	r0, #0
 8002922:	bd10      	pop	{r4, pc}
 8002924:	40012c00 	.word	0x40012c00

08002928 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002928:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800292c:	2b01      	cmp	r3, #1
 800292e:	d01c      	beq.n	800296a <HAL_TIMEx_MasterConfigSynchronization+0x42>
{
 8002930:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 8002932:	2601      	movs	r6, #1
 8002934:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002938:	2302      	movs	r3, #2
 800293a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800293e:	6802      	ldr	r2, [r0, #0]
 8002940:	6855      	ldr	r5, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002942:	6893      	ldr	r3, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002944:	f025 0570 	bic.w	r5, r5, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002948:	680c      	ldr	r4, [r1, #0]
 800294a:	432c      	orrs	r4, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800294c:	f023 0580 	bic.w	r5, r3, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002950:	684b      	ldr	r3, [r1, #4]
 8002952:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002954:	6054      	str	r4, [r2, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002956:	6802      	ldr	r2, [r0, #0]
 8002958:	6093      	str	r3, [r2, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800295a:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800295e:	2300      	movs	r3, #0
 8002960:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8002964:	4618      	mov	r0, r3
}
 8002966:	bc70      	pop	{r4, r5, r6}
 8002968:	4770      	bx	lr
  __HAL_LOCK(htim);
 800296a:	2002      	movs	r0, #2
}
 800296c:	4770      	bx	lr
	...

08002970 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002970:	b538      	push	{r3, r4, r5, lr}
 8002972:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002974:	6802      	ldr	r2, [r0, #0]
 8002976:	6913      	ldr	r3, [r2, #16]
 8002978:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800297c:	68c1      	ldr	r1, [r0, #12]
 800297e:	430b      	orrs	r3, r1
 8002980:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002982:	6883      	ldr	r3, [r0, #8]
 8002984:	6902      	ldr	r2, [r0, #16]
 8002986:	4313      	orrs	r3, r2
 8002988:	6942      	ldr	r2, [r0, #20]
 800298a:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 800298c:	6801      	ldr	r1, [r0, #0]
 800298e:	68cb      	ldr	r3, [r1, #12]
 8002990:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002994:	f023 030c 	bic.w	r3, r3, #12
 8002998:	4313      	orrs	r3, r2
 800299a:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800299c:	6802      	ldr	r2, [r0, #0]
 800299e:	6953      	ldr	r3, [r2, #20]
 80029a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029a4:	6981      	ldr	r1, [r0, #24]
 80029a6:	430b      	orrs	r3, r1
 80029a8:	6153      	str	r3, [r2, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80029aa:	6802      	ldr	r2, [r0, #0]
 80029ac:	4b21      	ldr	r3, [pc, #132]	; (8002a34 <UART_SetConfig+0xc4>)
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d01f      	beq.n	80029f2 <UART_SetConfig+0x82>
    pclk = HAL_RCC_GetPCLK2Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80029b2:	f7ff fba1 	bl	80020f8 <HAL_RCC_GetPCLK1Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029b6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80029ba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80029be:	6863      	ldr	r3, [r4, #4]
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	fbb0 f0f3 	udiv	r0, r0, r3
 80029c6:	4d1c      	ldr	r5, [pc, #112]	; (8002a38 <UART_SetConfig+0xc8>)
 80029c8:	fba5 3200 	umull	r3, r2, r5, r0
 80029cc:	0951      	lsrs	r1, r2, #5
 80029ce:	2264      	movs	r2, #100	; 0x64
 80029d0:	fb02 0211 	mls	r2, r2, r1, r0
 80029d4:	0113      	lsls	r3, r2, #4
 80029d6:	3332      	adds	r3, #50	; 0x32
 80029d8:	fba5 2303 	umull	r2, r3, r5, r3
 80029dc:	095b      	lsrs	r3, r3, #5
 80029de:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80029e2:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	6821      	ldr	r1, [r4, #0]
 80029ec:	4413      	add	r3, r2
 80029ee:	608b      	str	r3, [r1, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 80029f0:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 80029f2:	f7ff fb91 	bl	8002118 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029f6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80029fa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80029fe:	6863      	ldr	r3, [r4, #4]
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	fbb0 f0f3 	udiv	r0, r0, r3
 8002a06:	4d0c      	ldr	r5, [pc, #48]	; (8002a38 <UART_SetConfig+0xc8>)
 8002a08:	fba5 3200 	umull	r3, r2, r5, r0
 8002a0c:	0951      	lsrs	r1, r2, #5
 8002a0e:	2264      	movs	r2, #100	; 0x64
 8002a10:	fb02 0211 	mls	r2, r2, r1, r0
 8002a14:	0113      	lsls	r3, r2, #4
 8002a16:	3332      	adds	r3, #50	; 0x32
 8002a18:	fba5 2303 	umull	r2, r3, r5, r3
 8002a1c:	095b      	lsrs	r3, r3, #5
 8002a1e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a22:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002a26:	f003 030f 	and.w	r3, r3, #15
 8002a2a:	6821      	ldr	r1, [r4, #0]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	608b      	str	r3, [r1, #8]
 8002a30:	e7de      	b.n	80029f0 <UART_SetConfig+0x80>
 8002a32:	bf00      	nop
 8002a34:	40013800 	.word	0x40013800
 8002a38:	51eb851f 	.word	0x51eb851f

08002a3c <UART_WaitOnFlagUntilTimeout>:
{
 8002a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a40:	4605      	mov	r5, r0
 8002a42:	460f      	mov	r7, r1
 8002a44:	4616      	mov	r6, r2
 8002a46:	4698      	mov	r8, r3
 8002a48:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a4a:	682b      	ldr	r3, [r5, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	ea37 0303 	bics.w	r3, r7, r3
 8002a52:	bf0c      	ite	eq
 8002a54:	2301      	moveq	r3, #1
 8002a56:	2300      	movne	r3, #0
 8002a58:	42b3      	cmp	r3, r6
 8002a5a:	d11d      	bne.n	8002a98 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8002a5c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8002a60:	d0f3      	beq.n	8002a4a <UART_WaitOnFlagUntilTimeout+0xe>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a62:	b12c      	cbz	r4, 8002a70 <UART_WaitOnFlagUntilTimeout+0x34>
 8002a64:	f7fe f8e0 	bl	8000c28 <HAL_GetTick>
 8002a68:	eba0 0008 	sub.w	r0, r0, r8
 8002a6c:	42a0      	cmp	r0, r4
 8002a6e:	d9ec      	bls.n	8002a4a <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a70:	682a      	ldr	r2, [r5, #0]
 8002a72:	68d3      	ldr	r3, [r2, #12]
 8002a74:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002a78:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a7a:	682a      	ldr	r2, [r5, #0]
 8002a7c:	6953      	ldr	r3, [r2, #20]
 8002a7e:	f023 0301 	bic.w	r3, r3, #1
 8002a82:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002a84:	2320      	movs	r3, #32
 8002a86:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002a8a:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8002a8e:	2300      	movs	r3, #0
 8002a90:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 8002a94:	2003      	movs	r0, #3
 8002a96:	e000      	b.n	8002a9a <UART_WaitOnFlagUntilTimeout+0x5e>
  return HAL_OK;
 8002a98:	2000      	movs	r0, #0
}
 8002a9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002a9e <HAL_UART_Init>:
  if (huart == NULL)
 8002a9e:	b358      	cbz	r0, 8002af8 <HAL_UART_Init+0x5a>
{
 8002aa0:	b510      	push	{r4, lr}
 8002aa2:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002aa4:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002aa8:	b30b      	cbz	r3, 8002aee <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8002aaa:	2324      	movs	r3, #36	; 0x24
 8002aac:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002ab0:	6822      	ldr	r2, [r4, #0]
 8002ab2:	68d3      	ldr	r3, [r2, #12]
 8002ab4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ab8:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002aba:	4620      	mov	r0, r4
 8002abc:	f7ff ff58 	bl	8002970 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ac0:	6822      	ldr	r2, [r4, #0]
 8002ac2:	6913      	ldr	r3, [r2, #16]
 8002ac4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002ac8:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002aca:	6822      	ldr	r2, [r4, #0]
 8002acc:	6953      	ldr	r3, [r2, #20]
 8002ace:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002ad2:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002ad4:	6822      	ldr	r2, [r4, #0]
 8002ad6:	68d3      	ldr	r3, [r2, #12]
 8002ad8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002adc:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ade:	2000      	movs	r0, #0
 8002ae0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002ae2:	2320      	movs	r3, #32
 8002ae4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002ae8:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8002aec:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002aee:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002af2:	f002 fa69 	bl	8004fc8 <HAL_UART_MspInit>
 8002af6:	e7d8      	b.n	8002aaa <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8002af8:	2001      	movs	r0, #1
}
 8002afa:	4770      	bx	lr

08002afc <HAL_UART_Transmit>:
{
 8002afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b00:	b082      	sub	sp, #8
 8002b02:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002b04:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b20      	cmp	r3, #32
 8002b0c:	d155      	bne.n	8002bba <HAL_UART_Transmit+0xbe>
 8002b0e:	4604      	mov	r4, r0
 8002b10:	460d      	mov	r5, r1
 8002b12:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8002b14:	2900      	cmp	r1, #0
 8002b16:	d055      	beq.n	8002bc4 <HAL_UART_Transmit+0xc8>
 8002b18:	2a00      	cmp	r2, #0
 8002b1a:	d055      	beq.n	8002bc8 <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 8002b1c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d053      	beq.n	8002bcc <HAL_UART_Transmit+0xd0>
 8002b24:	2301      	movs	r3, #1
 8002b26:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b2e:	2321      	movs	r3, #33	; 0x21
 8002b30:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8002b34:	f7fe f878 	bl	8000c28 <HAL_GetTick>
 8002b38:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8002b3a:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b3e:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b42:	e010      	b.n	8002b66 <HAL_UART_Transmit+0x6a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b44:	9600      	str	r6, [sp, #0]
 8002b46:	463b      	mov	r3, r7
 8002b48:	2200      	movs	r2, #0
 8002b4a:	2180      	movs	r1, #128	; 0x80
 8002b4c:	4620      	mov	r0, r4
 8002b4e:	f7ff ff75 	bl	8002a3c <UART_WaitOnFlagUntilTimeout>
 8002b52:	2800      	cmp	r0, #0
 8002b54:	d13c      	bne.n	8002bd0 <HAL_UART_Transmit+0xd4>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002b56:	882b      	ldrh	r3, [r5, #0]
 8002b58:	6822      	ldr	r2, [r4, #0]
 8002b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b5e:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002b60:	6923      	ldr	r3, [r4, #16]
 8002b62:	b9c3      	cbnz	r3, 8002b96 <HAL_UART_Transmit+0x9a>
          pData += 2U;
 8002b64:	3502      	adds	r5, #2
    while (huart->TxXferCount > 0U)
 8002b66:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	b1b3      	cbz	r3, 8002b9a <HAL_UART_Transmit+0x9e>
      huart->TxXferCount--;
 8002b6c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002b74:	68a3      	ldr	r3, [r4, #8]
 8002b76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b7a:	d0e3      	beq.n	8002b44 <HAL_UART_Transmit+0x48>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b7c:	9600      	str	r6, [sp, #0]
 8002b7e:	463b      	mov	r3, r7
 8002b80:	2200      	movs	r2, #0
 8002b82:	2180      	movs	r1, #128	; 0x80
 8002b84:	4620      	mov	r0, r4
 8002b86:	f7ff ff59 	bl	8002a3c <UART_WaitOnFlagUntilTimeout>
 8002b8a:	bb18      	cbnz	r0, 8002bd4 <HAL_UART_Transmit+0xd8>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002b8c:	782a      	ldrb	r2, [r5, #0]
 8002b8e:	6823      	ldr	r3, [r4, #0]
 8002b90:	605a      	str	r2, [r3, #4]
 8002b92:	3501      	adds	r5, #1
 8002b94:	e7e7      	b.n	8002b66 <HAL_UART_Transmit+0x6a>
          pData += 1U;
 8002b96:	3501      	adds	r5, #1
 8002b98:	e7e5      	b.n	8002b66 <HAL_UART_Transmit+0x6a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b9a:	9600      	str	r6, [sp, #0]
 8002b9c:	463b      	mov	r3, r7
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	2140      	movs	r1, #64	; 0x40
 8002ba2:	4620      	mov	r0, r4
 8002ba4:	f7ff ff4a 	bl	8002a3c <UART_WaitOnFlagUntilTimeout>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	b9a8      	cbnz	r0, 8002bd8 <HAL_UART_Transmit+0xdc>
    huart->gState = HAL_UART_STATE_READY;
 8002bac:	2220      	movs	r2, #32
 8002bae:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    return HAL_OK;
 8002bb8:	e000      	b.n	8002bbc <HAL_UART_Transmit+0xc0>
    return HAL_BUSY;
 8002bba:	2302      	movs	r3, #2
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	b002      	add	sp, #8
 8002bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e7f9      	b.n	8002bbc <HAL_UART_Transmit+0xc0>
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e7f7      	b.n	8002bbc <HAL_UART_Transmit+0xc0>
    __HAL_LOCK(huart);
 8002bcc:	2302      	movs	r3, #2
 8002bce:	e7f5      	b.n	8002bbc <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e7f3      	b.n	8002bbc <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e7f1      	b.n	8002bbc <HAL_UART_Transmit+0xc0>
      return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e7ef      	b.n	8002bbc <HAL_UART_Transmit+0xc0>

08002bdc <u8g_Delay>:
 #include "../Drivers/u8glib/inc/u8g_arm.h"

 static uint8_t control = 0;

 void u8g_Delay(uint16_t val)  
 {  
 8002bdc:	b508      	push	{r3, lr}


	 HAL_Delay(val/25);
 8002bde:	4b03      	ldr	r3, [pc, #12]	; (8002bec <u8g_Delay+0x10>)
 8002be0:	fba3 3000 	umull	r3, r0, r3, r0
 8002be4:	08c0      	lsrs	r0, r0, #3
 8002be6:	f7fe f825 	bl	8000c34 <HAL_Delay>
 }  
 8002bea:	bd08      	pop	{r3, pc}
 8002bec:	51eb851f 	.word	0x51eb851f

08002bf0 <u8g_MicroDelay>:
 void u8g_MicroDelay(void)  
 {  
      asm("nop");
 8002bf0:	bf00      	nop
      asm("nop");
 8002bf2:	bf00      	nop
      asm("nop");
 8002bf4:	bf00      	nop

	 //HAL_Delay(1);
 }  
 8002bf6:	4770      	bx	lr

08002bf8 <u8g_10MicroDelay>:
 void u8g_10MicroDelay(void)  
 {  
     asm("nop");
 8002bf8:	bf00      	nop
     asm("nop");
 8002bfa:	bf00      	nop
     asm("nop");
 8002bfc:	bf00      	nop
     asm("nop");
 8002bfe:	bf00      	nop
     asm("nop");
 8002c00:	bf00      	nop
     asm("nop");
 8002c02:	bf00      	nop

      //HAL_Delay(1);
 }  
 8002c04:	4770      	bx	lr
	...

08002c08 <u8g_com_hw_spi_fn>:
 uint8_t u8g_com_hw_spi_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)  
 {  
 8002c08:	b500      	push	{lr}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f88d 2007 	strb.w	r2, [sp, #7]
  switch(msg)  
 8002c12:	3901      	subs	r1, #1
 8002c14:	2906      	cmp	r1, #6
 8002c16:	d807      	bhi.n	8002c28 <u8g_com_hw_spi_fn+0x20>
 8002c18:	e8df f001 	tbb	[pc, r1]
 8002c1c:	06150a04 	.word	0x06150a04
 8002c20:	392a      	.short	0x392a
 8002c22:	39          	.byte	0x39
 8002c23:	00          	.byte	0x00
  {  
   case U8G_COM_MSG_STOP:  
    break;  
   case U8G_COM_MSG_INIT:  
    u8g_MicroDelay();  
 8002c24:	f7ff ffe4 	bl	8002bf0 <u8g_MicroDelay>
         arg_val = 0;  
    }  
    break;  
  }  
  return 1;  
 }  
 8002c28:	2001      	movs	r0, #1
 8002c2a:	b003      	add	sp, #12
 8002c2c:	f85d fb04 	ldr.w	pc, [sp], #4
    u8g_10MicroDelay();  
 8002c30:	f7ff ffe2 	bl	8002bf8 <u8g_10MicroDelay>
    HAL_GPIO_WritePin(PORT_DC, DC, arg_val);  
 8002c34:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8002c38:	2104      	movs	r1, #4
 8002c3a:	481a      	ldr	r0, [pc, #104]	; (8002ca4 <u8g_com_hw_spi_fn+0x9c>)
 8002c3c:	f7fe fb52 	bl	80012e4 <HAL_GPIO_WritePin>
    u8g_10MicroDelay();  
 8002c40:	f7ff ffda 	bl	8002bf8 <u8g_10MicroDelay>
    break;  
 8002c44:	e7f0      	b.n	8002c28 <u8g_com_hw_spi_fn+0x20>
    if ( arg_val == 0 )  
 8002c46:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002c4a:	b953      	cbnz	r3, 8002c62 <u8g_com_hw_spi_fn+0x5a>
    	 u8g_MicroDelay();
 8002c4c:	f7ff ffd0 	bl	8002bf0 <u8g_MicroDelay>
         HAL_GPIO_WritePin(PORT_CS, CS, GPIO_PIN_SET);  
 8002c50:	2201      	movs	r2, #1
 8002c52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c56:	4814      	ldr	r0, [pc, #80]	; (8002ca8 <u8g_com_hw_spi_fn+0xa0>)
 8002c58:	f7fe fb44 	bl	80012e4 <HAL_GPIO_WritePin>
    u8g_MicroDelay();  
 8002c5c:	f7ff ffc8 	bl	8002bf0 <u8g_MicroDelay>
    break;  
 8002c60:	e7e2      	b.n	8002c28 <u8g_com_hw_spi_fn+0x20>
      HAL_GPIO_WritePin(PORT_CS, CS, GPIO_PIN_RESET);  
 8002c62:	2200      	movs	r2, #0
 8002c64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c68:	480f      	ldr	r0, [pc, #60]	; (8002ca8 <u8g_com_hw_spi_fn+0xa0>)
 8002c6a:	f7fe fb3b 	bl	80012e4 <HAL_GPIO_WritePin>
 8002c6e:	e7f5      	b.n	8002c5c <u8g_com_hw_spi_fn+0x54>
     HAL_SPI_Transmit(&SPI_HANDLER, &arg_val, 1, 100);
 8002c70:	2364      	movs	r3, #100	; 0x64
 8002c72:	2201      	movs	r2, #1
 8002c74:	f10d 0107 	add.w	r1, sp, #7
 8002c78:	480c      	ldr	r0, [pc, #48]	; (8002cac <u8g_com_hw_spi_fn+0xa4>)
 8002c7a:	f7ff faf7 	bl	800226c <HAL_SPI_Transmit>
     while(HAL_SPI_GetState(&SPI_HANDLER) != HAL_SPI_STATE_READY);  
 8002c7e:	480b      	ldr	r0, [pc, #44]	; (8002cac <u8g_com_hw_spi_fn+0xa4>)
 8002c80:	f7ff fbc1 	bl	8002406 <HAL_SPI_GetState>
 8002c84:	2801      	cmp	r0, #1
 8002c86:	d1fa      	bne.n	8002c7e <u8g_com_hw_spi_fn+0x76>
     u8g_MicroDelay();  
 8002c88:	f7ff ffb2 	bl	8002bf0 <u8g_MicroDelay>
     break;  
 8002c8c:	e7cc      	b.n	8002c28 <u8g_com_hw_spi_fn+0x20>
         HAL_SPI_Transmit(&SPI_HANDLER, (uint8_t *)arg_ptr, arg_val, 100);
 8002c8e:	2364      	movs	r3, #100	; 0x64
 8002c90:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8002c94:	4601      	mov	r1, r0
 8002c96:	4805      	ldr	r0, [pc, #20]	; (8002cac <u8g_com_hw_spi_fn+0xa4>)
 8002c98:	f7ff fae8 	bl	800226c <HAL_SPI_Transmit>
         u8g_MicroDelay();  
 8002c9c:	f7ff ffa8 	bl	8002bf0 <u8g_MicroDelay>
    break;  
 8002ca0:	e7c2      	b.n	8002c28 <u8g_com_hw_spi_fn+0x20>
 8002ca2:	bf00      	nop
 8002ca4:	40011400 	.word	0x40011400
 8002ca8:	40011000 	.word	0x40011000
 8002cac:	20000588 	.word	0x20000588

08002cb0 <u8g_com_hw_i2c_fn>:

 uint8_t u8g_com_hw_i2c_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
 {
 8002cb0:	b510      	push	{r4, lr}
 8002cb2:	f5ad 7d7c 	sub.w	sp, sp, #1008	; 0x3f0
 8002cb6:	4614      	mov	r4, r2
  switch(msg)
 8002cb8:	3901      	subs	r1, #1
 8002cba:	2906      	cmp	r1, #6
 8002cbc:	d807      	bhi.n	8002cce <u8g_com_hw_i2c_fn+0x1e>
 8002cbe:	e8df f001 	tbb	[pc, r1]
 8002cc2:	0a04      	.short	0x0a04
 8002cc4:	25150606 	.word	0x25150606
 8002cc8:	25          	.byte	0x25
 8002cc9:	00          	.byte	0x00
  {
   case U8G_COM_MSG_STOP:
    break;

   case U8G_COM_MSG_INIT:
    u8g_MicroDelay();
 8002cca:	f7ff ff91 	bl	8002bf0 <u8g_MicroDelay>
   }

    break;
  }
  return 1;
 }
 8002cce:	2001      	movs	r0, #1
 8002cd0:	f50d 7d7c 	add.w	sp, sp, #1008	; 0x3f0
 8002cd4:	bd10      	pop	{r4, pc}
    u8g_10MicroDelay();
 8002cd6:	f7ff ff8f 	bl	8002bf8 <u8g_10MicroDelay>
    if (arg_val == 0)
 8002cda:	b91c      	cbnz	r4, 8002ce4 <u8g_com_hw_i2c_fn+0x34>
         control = 0;
 8002cdc:	4b17      	ldr	r3, [pc, #92]	; (8002d3c <u8g_com_hw_i2c_fn+0x8c>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	701a      	strb	r2, [r3, #0]
 8002ce2:	e7f4      	b.n	8002cce <u8g_com_hw_i2c_fn+0x1e>
         control = 0x40;
 8002ce4:	4b15      	ldr	r3, [pc, #84]	; (8002d3c <u8g_com_hw_i2c_fn+0x8c>)
 8002ce6:	2240      	movs	r2, #64	; 0x40
 8002ce8:	701a      	strb	r2, [r3, #0]
 8002cea:	e7f0      	b.n	8002cce <u8g_com_hw_i2c_fn+0x1e>
        buffer[0] = control;
 8002cec:	4b13      	ldr	r3, [pc, #76]	; (8002d3c <u8g_com_hw_i2c_fn+0x8c>)
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	f88d 3008 	strb.w	r3, [sp, #8]
        buffer[1] = arg_val;
 8002cf4:	f88d 4009 	strb.w	r4, [sp, #9]
        HAL_I2C_Master_Transmit(&I2C_HANDLER, DEVICE_ADDRESS, (uint8_t*) buffer, 2, I2C_TIMEOUT);
 8002cf8:	f242 7310 	movw	r3, #10000	; 0x2710
 8002cfc:	9300      	str	r3, [sp, #0]
 8002cfe:	2302      	movs	r3, #2
 8002d00:	aa02      	add	r2, sp, #8
 8002d02:	2178      	movs	r1, #120	; 0x78
 8002d04:	480e      	ldr	r0, [pc, #56]	; (8002d40 <u8g_com_hw_i2c_fn+0x90>)
 8002d06:	f7fe fd73 	bl	80017f0 <HAL_I2C_Master_Transmit>
        break;
 8002d0a:	e7e0      	b.n	8002cce <u8g_com_hw_i2c_fn+0x1e>
           buffer[0] = control;
 8002d0c:	4a0b      	ldr	r2, [pc, #44]	; (8002d3c <u8g_com_hw_i2c_fn+0x8c>)
 8002d0e:	7812      	ldrb	r2, [r2, #0]
 8002d10:	f88d 2008 	strb.w	r2, [sp, #8]
           for (int i = 1; i <= arg_val; i++)
 8002d14:	2201      	movs	r2, #1
 8002d16:	e004      	b.n	8002d22 <u8g_com_hw_i2c_fn+0x72>
                buffer[i] = *(ptr++);
 8002d18:	7818      	ldrb	r0, [r3, #0]
 8002d1a:	a902      	add	r1, sp, #8
 8002d1c:	5488      	strb	r0, [r1, r2]
           for (int i = 1; i <= arg_val; i++)
 8002d1e:	3201      	adds	r2, #1
                buffer[i] = *(ptr++);
 8002d20:	3301      	adds	r3, #1
           for (int i = 1; i <= arg_val; i++)
 8002d22:	4294      	cmp	r4, r2
 8002d24:	daf8      	bge.n	8002d18 <u8g_com_hw_i2c_fn+0x68>
           HAL_I2C_Master_Transmit(&I2C_HANDLER, DEVICE_ADDRESS, (uint8_t *)buffer, arg_val, I2C_TIMEOUT);
 8002d26:	f242 7310 	movw	r3, #10000	; 0x2710
 8002d2a:	9300      	str	r3, [sp, #0]
 8002d2c:	4623      	mov	r3, r4
 8002d2e:	aa02      	add	r2, sp, #8
 8002d30:	2178      	movs	r1, #120	; 0x78
 8002d32:	4803      	ldr	r0, [pc, #12]	; (8002d40 <u8g_com_hw_i2c_fn+0x90>)
 8002d34:	f7fe fd5c 	bl	80017f0 <HAL_I2C_Master_Transmit>
    break;
 8002d38:	e7c9      	b.n	8002cce <u8g_com_hw_i2c_fn+0x1e>
 8002d3a:	bf00      	nop
 8002d3c:	20000234 	.word	0x20000234
 8002d40:	20000424 	.word	0x20000424

08002d44 <u8g_DrawHBitmap>:
*/

#include "../Drivers/u8glib/inc/u8g.h"

void u8g_DrawHBitmap(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t cnt, const uint8_t *bitmap)
{
 8002d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d48:	b082      	sub	sp, #8
 8002d4a:	4680      	mov	r8, r0
 8002d4c:	460d      	mov	r5, r1
 8002d4e:	4617      	mov	r7, r2
 8002d50:	461c      	mov	r4, r3
 8002d52:	9e08      	ldr	r6, [sp, #32]
  while( cnt > 0 )
 8002d54:	e00c      	b.n	8002d70 <u8g_DrawHBitmap+0x2c>
  {
    u8g_Draw8Pixel(u8g, x, y, 0, *bitmap);
 8002d56:	f816 3b01 	ldrb.w	r3, [r6], #1
 8002d5a:	9300      	str	r3, [sp, #0]
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	463a      	mov	r2, r7
 8002d60:	4629      	mov	r1, r5
 8002d62:	4640      	mov	r0, r8
 8002d64:	f000 fbe2 	bl	800352c <u8g_Draw8Pixel>
    bitmap++;
    cnt--;
 8002d68:	3c01      	subs	r4, #1
 8002d6a:	b2e4      	uxtb	r4, r4
    x+=8;
 8002d6c:	3508      	adds	r5, #8
 8002d6e:	b2ed      	uxtb	r5, r5
  while( cnt > 0 )
 8002d70:	2c00      	cmp	r4, #0
 8002d72:	d1f0      	bne.n	8002d56 <u8g_DrawHBitmap+0x12>
  }
}
 8002d74:	b002      	add	sp, #8
 8002d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002d7a <u8g_DrawBitmap>:

void u8g_DrawBitmap(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t cnt, u8g_uint_t h, const uint8_t *bitmap)
{
 8002d7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	4681      	mov	r9, r0
 8002d82:	4688      	mov	r8, r1
 8002d84:	4615      	mov	r5, r2
 8002d86:	461f      	mov	r7, r3
 8002d88:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
 8002d8c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  if ( u8g_IsBBXIntersection(u8g, x, y, cnt*8, h) == 0 )
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	9400      	str	r4, [sp, #0]
 8002d92:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8002d96:	f000 f813 	bl	8002dc0 <u8g_IsBBXIntersection>
 8002d9a:	b960      	cbnz	r0, 8002db6 <u8g_DrawBitmap+0x3c>
 8002d9c:	e00d      	b.n	8002dba <u8g_DrawBitmap+0x40>
    return;
  while( h > 0 )
  {
    u8g_DrawHBitmap(u8g, x, y, cnt, bitmap);
 8002d9e:	9600      	str	r6, [sp, #0]
 8002da0:	463b      	mov	r3, r7
 8002da2:	462a      	mov	r2, r5
 8002da4:	4641      	mov	r1, r8
 8002da6:	4648      	mov	r0, r9
 8002da8:	f7ff ffcc 	bl	8002d44 <u8g_DrawHBitmap>
    bitmap += cnt;
 8002dac:	443e      	add	r6, r7
    y++;
 8002dae:	3501      	adds	r5, #1
 8002db0:	b2ed      	uxtb	r5, r5
    h--;
 8002db2:	3c01      	subs	r4, #1
 8002db4:	b2e4      	uxtb	r4, r4
  while( h > 0 )
 8002db6:	2c00      	cmp	r4, #0
 8002db8:	d1f1      	bne.n	8002d9e <u8g_DrawBitmap+0x24>
  }
}
 8002dba:	b003      	add	sp, #12
 8002dbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002dc0 <u8g_IsBBXIntersection>:
  }
}


uint8_t u8g_IsBBXIntersection(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
 8002dc0:	b470      	push	{r4, r5, r6}
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
 8002dc2:	f89d 400c 	ldrb.w	r4, [sp, #12]
 8002dc6:	4414      	add	r4, r2
 8002dc8:	b2e4      	uxtb	r4, r4
  tmp--;
 8002dca:	3c01      	subs	r4, #1
 8002dcc:	b2e4      	uxtb	r4, r4
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
 8002dce:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 8002dd2:	f890 603b 	ldrb.w	r6, [r0, #59]	; 0x3b
  if ( v0 <= a1 )
 8002dd6:	4296      	cmp	r6, r2
 8002dd8:	d305      	bcc.n	8002de6 <u8g_IsBBXIntersection+0x26>
    if ( v1 >= a0 )
 8002dda:	42a5      	cmp	r5, r4
 8002ddc:	d907      	bls.n	8002dee <u8g_IsBBXIntersection+0x2e>
      if ( v0 > v1 )
 8002dde:	42a2      	cmp	r2, r4
 8002de0:	d805      	bhi.n	8002dee <u8g_IsBBXIntersection+0x2e>
    return 0; 
 8002de2:	2000      	movs	r0, #0
 8002de4:	e01c      	b.n	8002e20 <u8g_IsBBXIntersection+0x60>
    if ( v1 >= a0 )
 8002de6:	42a5      	cmp	r5, r4
 8002de8:	d819      	bhi.n	8002e1e <u8g_IsBBXIntersection+0x5e>
      if ( v0 > v1 )
 8002dea:	42a2      	cmp	r2, r4
 8002dec:	d91a      	bls.n	8002e24 <u8g_IsBBXIntersection+0x64>
  
  tmp = x;
  tmp += w;
 8002dee:	440b      	add	r3, r1
 8002df0:	b2db      	uxtb	r3, r3
  tmp--;
 8002df2:	3b01      	subs	r3, #1
 8002df4:	b2db      	uxtb	r3, r3
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
 8002df6:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8002dfa:	f890 003a 	ldrb.w	r0, [r0, #58]	; 0x3a
  if ( v0 <= a1 )
 8002dfe:	4288      	cmp	r0, r1
 8002e00:	d305      	bcc.n	8002e0e <u8g_IsBBXIntersection+0x4e>
    if ( v1 >= a0 )
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d910      	bls.n	8002e28 <u8g_IsBBXIntersection+0x68>
      if ( v0 > v1 )
 8002e06:	4299      	cmp	r1, r3
 8002e08:	d910      	bls.n	8002e2c <u8g_IsBBXIntersection+0x6c>
	return 1;
 8002e0a:	2001      	movs	r0, #1
 8002e0c:	e008      	b.n	8002e20 <u8g_IsBBXIntersection+0x60>
    if ( v1 >= a0 )
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d80e      	bhi.n	8002e30 <u8g_IsBBXIntersection+0x70>
      if ( v0 > v1 )
 8002e12:	4299      	cmp	r1, r3
 8002e14:	d801      	bhi.n	8002e1a <u8g_IsBBXIntersection+0x5a>
	return 0;
 8002e16:	2000      	movs	r0, #0
 8002e18:	e002      	b.n	8002e20 <u8g_IsBBXIntersection+0x60>
	return 1;
 8002e1a:	2001      	movs	r0, #1
 8002e1c:	e000      	b.n	8002e20 <u8g_IsBBXIntersection+0x60>
    return 0; 
 8002e1e:	2000      	movs	r0, #0
}
 8002e20:	bc70      	pop	{r4, r5, r6}
 8002e22:	4770      	bx	lr
    return 0; 
 8002e24:	2000      	movs	r0, #0
 8002e26:	e7fb      	b.n	8002e20 <u8g_IsBBXIntersection+0x60>
      return 1;
 8002e28:	2001      	movs	r0, #1
 8002e2a:	e7f9      	b.n	8002e20 <u8g_IsBBXIntersection+0x60>
	return 0;
 8002e2c:	2000      	movs	r0, #0
 8002e2e:	e7f7      	b.n	8002e20 <u8g_IsBBXIntersection+0x60>
      return 0;
 8002e30:	2000      	movs	r0, #0
 8002e32:	e7f5      	b.n	8002e20 <u8g_IsBBXIntersection+0x60>

08002e34 <u8g_InitCom>:
*/

#include "../Drivers/u8glib/inc/u8g.h"

uint8_t u8g_InitCom(u8g_t *u8g, u8g_dev_t *dev, uint8_t clk_cycle_time)
{
 8002e34:	b510      	push	{r4, lr}
  return dev->com_fn(u8g, U8G_COM_MSG_INIT, clk_cycle_time, NULL);
 8002e36:	688c      	ldr	r4, [r1, #8]
 8002e38:	2300      	movs	r3, #0
 8002e3a:	2101      	movs	r1, #1
 8002e3c:	47a0      	blx	r4
}
 8002e3e:	bd10      	pop	{r4, pc}

08002e40 <u8g_SetChipSelect>:
  dev->com_fn(u8g, U8G_COM_MSG_STOP, 0, NULL);
}

/* cs contains the chip number, which should be enabled */
void u8g_SetChipSelect(u8g_t *u8g, u8g_dev_t *dev, uint8_t cs)
{
 8002e40:	b510      	push	{r4, lr}
  dev->com_fn(u8g, U8G_COM_MSG_CHIP_SELECT, cs, NULL);
 8002e42:	688c      	ldr	r4, [r1, #8]
 8002e44:	2300      	movs	r3, #0
 8002e46:	2103      	movs	r1, #3
 8002e48:	47a0      	blx	r4
}
 8002e4a:	bd10      	pop	{r4, pc}

08002e4c <u8g_SetResetLow>:

void u8g_SetResetLow(u8g_t *u8g, u8g_dev_t *dev)
{
 8002e4c:	b510      	push	{r4, lr}
  dev->com_fn(u8g, U8G_COM_MSG_RESET, 0, NULL);
 8002e4e:	688c      	ldr	r4, [r1, #8]
 8002e50:	2300      	movs	r3, #0
 8002e52:	461a      	mov	r2, r3
 8002e54:	2104      	movs	r1, #4
 8002e56:	47a0      	blx	r4
}
 8002e58:	bd10      	pop	{r4, pc}

08002e5a <u8g_SetResetHigh>:

void u8g_SetResetHigh(u8g_t *u8g, u8g_dev_t *dev)
{
 8002e5a:	b510      	push	{r4, lr}
  dev->com_fn(u8g, U8G_COM_MSG_RESET, 1, NULL);
 8002e5c:	688c      	ldr	r4, [r1, #8]
 8002e5e:	2300      	movs	r3, #0
 8002e60:	2201      	movs	r2, #1
 8002e62:	2104      	movs	r1, #4
 8002e64:	47a0      	blx	r4
}
 8002e66:	bd10      	pop	{r4, pc}

08002e68 <u8g_SetAddress>:


void u8g_SetAddress(u8g_t *u8g, u8g_dev_t *dev, uint8_t address)
{
 8002e68:	b510      	push	{r4, lr}
  dev->com_fn(u8g, U8G_COM_MSG_ADDRESS, address, NULL);
 8002e6a:	688c      	ldr	r4, [r1, #8]
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	2102      	movs	r1, #2
 8002e70:	47a0      	blx	r4
}
 8002e72:	bd10      	pop	{r4, pc}

08002e74 <u8g_WriteByte>:

uint8_t u8g_WriteByte(u8g_t *u8g, u8g_dev_t *dev, uint8_t val)
{
 8002e74:	b510      	push	{r4, lr}
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_BYTE, val, NULL);
 8002e76:	688c      	ldr	r4, [r1, #8]
 8002e78:	2300      	movs	r3, #0
 8002e7a:	2105      	movs	r1, #5
 8002e7c:	47a0      	blx	r4
}
 8002e7e:	bd10      	pop	{r4, pc}

08002e80 <u8g_WriteSequence>:

uint8_t u8g_WriteSequence(u8g_t *u8g, u8g_dev_t *dev, uint8_t cnt, uint8_t *seq)
{
 8002e80:	b510      	push	{r4, lr}
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_SEQ, cnt, seq);
 8002e82:	688c      	ldr	r4, [r1, #8]
 8002e84:	2106      	movs	r1, #6
 8002e86:	47a0      	blx	r4
}
 8002e88:	bd10      	pop	{r4, pc}

08002e8a <u8g_WriteEscSeqP>:
#define U8G_ESC_255 255, 255
#define U8G_ESC_RST(x) 255, (0xc0 | ((x)&0x0f))

*/
uint8_t u8g_WriteEscSeqP(u8g_t *u8g, u8g_dev_t *dev, const uint8_t *esc_seq)
{
 8002e8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e8e:	4607      	mov	r7, r0
 8002e90:	4688      	mov	r8, r1
 8002e92:	4615      	mov	r5, r2
  uint8_t is_escape = 0;
 8002e94:	2600      	movs	r6, #0
 8002e96:	e007      	b.n	8002ea8 <u8g_WriteEscSeqP+0x1e>
    value = u8g_pgm_read(esc_seq);
    if ( is_escape == 0 )
    {
      if ( value != 255 )
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
 8002e98:	4622      	mov	r2, r4
 8002e9a:	4641      	mov	r1, r8
 8002e9c:	4638      	mov	r0, r7
 8002e9e:	f7ff ffe9 	bl	8002e74 <u8g_WriteByte>
 8002ea2:	2800      	cmp	r0, #0
 8002ea4:	d050      	beq.n	8002f48 <u8g_WriteEscSeqP+0xbe>
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    }
    esc_seq++;
 8002ea6:	3501      	adds	r5, #1
    value = u8g_pgm_read(esc_seq);
 8002ea8:	782c      	ldrb	r4, [r5, #0]
    if ( is_escape == 0 )
 8002eaa:	b91e      	cbnz	r6, 8002eb4 <u8g_WriteEscSeqP+0x2a>
      if ( value != 255 )
 8002eac:	2cff      	cmp	r4, #255	; 0xff
 8002eae:	d1f3      	bne.n	8002e98 <u8g_WriteEscSeqP+0xe>
        is_escape = 1;
 8002eb0:	2601      	movs	r6, #1
 8002eb2:	e7f8      	b.n	8002ea6 <u8g_WriteEscSeqP+0x1c>
      if ( value == 255 )
 8002eb4:	2cff      	cmp	r4, #255	; 0xff
 8002eb6:	d010      	beq.n	8002eda <u8g_WriteEscSeqP+0x50>
      else if ( value == 254 )
 8002eb8:	2cfe      	cmp	r4, #254	; 0xfe
 8002eba:	d046      	beq.n	8002f4a <u8g_WriteEscSeqP+0xc0>
      else if ( value >= 0x0f0 )
 8002ebc:	2cef      	cmp	r4, #239	; 0xef
 8002ebe:	d83f      	bhi.n	8002f40 <u8g_WriteEscSeqP+0xb6>
      else if ( value >= 0xe0  )
 8002ec0:	2cdf      	cmp	r4, #223	; 0xdf
 8002ec2:	d813      	bhi.n	8002eec <u8g_WriteEscSeqP+0x62>
      else if ( value >= 0xd0 )
 8002ec4:	2ccf      	cmp	r4, #207	; 0xcf
 8002ec6:	d819      	bhi.n	8002efc <u8g_WriteEscSeqP+0x72>
      else if ( value >= 0xc0 )
 8002ec8:	2cbf      	cmp	r4, #191	; 0xbf
 8002eca:	d81f      	bhi.n	8002f0c <u8g_WriteEscSeqP+0x82>
      else if ( value >= 0xbe )
 8002ecc:	2cbd      	cmp	r4, #189	; 0xbd
 8002ece:	d839      	bhi.n	8002f44 <u8g_WriteEscSeqP+0xba>
      else if ( value <= 127 )
 8002ed0:	f014 0f80 	tst.w	r4, #128	; 0x80
 8002ed4:	d02f      	beq.n	8002f36 <u8g_WriteEscSeqP+0xac>
      is_escape = 0;
 8002ed6:	2600      	movs	r6, #0
 8002ed8:	e7e5      	b.n	8002ea6 <u8g_WriteEscSeqP+0x1c>
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
 8002eda:	4622      	mov	r2, r4
 8002edc:	4641      	mov	r1, r8
 8002ede:	4638      	mov	r0, r7
 8002ee0:	f7ff ffc8 	bl	8002e74 <u8g_WriteByte>
 8002ee4:	4606      	mov	r6, r0
 8002ee6:	b380      	cbz	r0, 8002f4a <u8g_WriteEscSeqP+0xc0>
      is_escape = 0;
 8002ee8:	2600      	movs	r6, #0
 8002eea:	e7dc      	b.n	8002ea6 <u8g_WriteEscSeqP+0x1c>
        u8g_SetAddress(u8g, dev, value & 0x0f);
 8002eec:	f004 020f 	and.w	r2, r4, #15
 8002ef0:	4641      	mov	r1, r8
 8002ef2:	4638      	mov	r0, r7
 8002ef4:	f7ff ffb8 	bl	8002e68 <u8g_SetAddress>
      is_escape = 0;
 8002ef8:	2600      	movs	r6, #0
 8002efa:	e7d4      	b.n	8002ea6 <u8g_WriteEscSeqP+0x1c>
        u8g_SetChipSelect(u8g, dev, value & 0x0f);
 8002efc:	f004 020f 	and.w	r2, r4, #15
 8002f00:	4641      	mov	r1, r8
 8002f02:	4638      	mov	r0, r7
 8002f04:	f7ff ff9c 	bl	8002e40 <u8g_SetChipSelect>
      is_escape = 0;
 8002f08:	2600      	movs	r6, #0
 8002f0a:	e7cc      	b.n	8002ea6 <u8g_WriteEscSeqP+0x1c>
        u8g_SetResetLow(u8g, dev);
 8002f0c:	4641      	mov	r1, r8
 8002f0e:	4638      	mov	r0, r7
 8002f10:	f7ff ff9c 	bl	8002e4c <u8g_SetResetLow>
 8002f14:	0124      	lsls	r4, r4, #4
 8002f16:	b2e4      	uxtb	r4, r4
        value+=2;
 8002f18:	3402      	adds	r4, #2
        u8g_Delay(value);
 8002f1a:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
 8002f1e:	4620      	mov	r0, r4
 8002f20:	f7ff fe5c 	bl	8002bdc <u8g_Delay>
        u8g_SetResetHigh(u8g, dev);
 8002f24:	4641      	mov	r1, r8
 8002f26:	4638      	mov	r0, r7
 8002f28:	f7ff ff97 	bl	8002e5a <u8g_SetResetHigh>
        u8g_Delay(value);
 8002f2c:	4620      	mov	r0, r4
 8002f2e:	f7ff fe55 	bl	8002bdc <u8g_Delay>
      is_escape = 0;
 8002f32:	2600      	movs	r6, #0
 8002f34:	e7b7      	b.n	8002ea6 <u8g_WriteEscSeqP+0x1c>
        u8g_Delay(value);
 8002f36:	4620      	mov	r0, r4
 8002f38:	f7ff fe50 	bl	8002bdc <u8g_Delay>
      is_escape = 0;
 8002f3c:	2600      	movs	r6, #0
 8002f3e:	e7b2      	b.n	8002ea6 <u8g_WriteEscSeqP+0x1c>
 8002f40:	2600      	movs	r6, #0
 8002f42:	e7b0      	b.n	8002ea6 <u8g_WriteEscSeqP+0x1c>
 8002f44:	2600      	movs	r6, #0
 8002f46:	e7ae      	b.n	8002ea6 <u8g_WriteEscSeqP+0x1c>
          return 0;
 8002f48:	4606      	mov	r6, r0
  }
  return 1;
}
 8002f4a:	4630      	mov	r0, r6
 8002f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002f50 <u8g_com_null_fn>:
      break;
    case U8G_COM_MSG_WRITE_SEQ:
      break;
  }
  return 1;
}
 8002f50:	2001      	movs	r0, #1
 8002f52:	4770      	bx	lr

08002f54 <u8g_dev_ssd1306_128x32_2x_fn>:
  
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
}

uint8_t u8g_dev_ssd1306_128x32_2x_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 8002f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f58:	4605      	mov	r5, r0
 8002f5a:	460c      	mov	r4, r1
 8002f5c:	4616      	mov	r6, r2
 8002f5e:	461f      	mov	r7, r3
  switch(msg)
 8002f60:	f1a2 030a 	sub.w	r3, r2, #10
 8002f64:	2b0b      	cmp	r3, #11
 8002f66:	d80f      	bhi.n	8002f88 <u8g_dev_ssd1306_128x32_2x_fn+0x34>
 8002f68:	e8df f003 	tbb	[pc, r3]
 8002f6c:	0e0e0e06 	.word	0x0e0e0e06
 8002f70:	645f0e0e 	.word	0x645f0e0e
 8002f74:	160e0e0e 	.word	0x160e0e0e
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
 8002f78:	2202      	movs	r2, #2
 8002f7a:	f7ff ff5b 	bl	8002e34 <u8g_InitCom>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x32_init_seq);
 8002f7e:	4a30      	ldr	r2, [pc, #192]	; (8003040 <u8g_dev_ssd1306_128x32_2x_fn+0xec>)
 8002f80:	4621      	mov	r1, r4
 8002f82:	4628      	mov	r0, r5
 8002f84:	f7ff ff81 	bl	8002e8a <u8g_WriteEscSeqP>
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
      return 1;
  }
  return u8g_dev_pb16v1_base_fn(u8g, dev, msg, arg);
 8002f88:	463b      	mov	r3, r7
 8002f8a:	4632      	mov	r2, r6
 8002f8c:	4621      	mov	r1, r4
 8002f8e:	4628      	mov	r0, r5
 8002f90:	f000 fbd9 	bl	8003746 <u8g_dev_pb16v1_base_fn>
}
 8002f94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
 8002f98:	f8d1 8004 	ldr.w	r8, [r1, #4]
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x32_data_start);    
 8002f9c:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 800304c <u8g_dev_ssd1306_128x32_2x_fn+0xf8>
 8002fa0:	464a      	mov	r2, r9
 8002fa2:	f7ff ff72 	bl	8002e8a <u8g_WriteEscSeqP>
        u8g_WriteByte(u8g, dev, 0x0b0 | (pb->p.page*2));	/* select current page (SSD1306) */
 8002fa6:	f898 2004 	ldrb.w	r2, [r8, #4]
 8002faa:	0052      	lsls	r2, r2, #1
 8002fac:	f062 024f 	orn	r2, r2, #79	; 0x4f
 8002fb0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fb4:	4621      	mov	r1, r4
 8002fb6:	4628      	mov	r0, r5
 8002fb8:	f7ff ff5c 	bl	8002e74 <u8g_WriteByte>
        u8g_SetAddress(u8g, dev, 1);					/* data mode */
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	4621      	mov	r1, r4
 8002fc0:	4628      	mov	r0, r5
 8002fc2:	f7ff ff51 	bl	8002e68 <u8g_SetAddress>
	u8g_WriteSequence(u8g, dev, pb->width, pb->buf); 
 8002fc6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8002fca:	f898 2005 	ldrb.w	r2, [r8, #5]
 8002fce:	4621      	mov	r1, r4
 8002fd0:	4628      	mov	r0, r5
 8002fd2:	f7ff ff55 	bl	8002e80 <u8g_WriteSequence>
        u8g_SetChipSelect(u8g, dev, 0);
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	4621      	mov	r1, r4
 8002fda:	4628      	mov	r0, r5
 8002fdc:	f7ff ff30 	bl	8002e40 <u8g_SetChipSelect>
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x32_data_start);    
 8002fe0:	464a      	mov	r2, r9
 8002fe2:	4621      	mov	r1, r4
 8002fe4:	4628      	mov	r0, r5
 8002fe6:	f7ff ff50 	bl	8002e8a <u8g_WriteEscSeqP>
        u8g_WriteByte(u8g, dev, 0x0b0 | (pb->p.page*2+1));	/* select current page (SSD1306) */
 8002fea:	f898 2004 	ldrb.w	r2, [r8, #4]
 8002fee:	0052      	lsls	r2, r2, #1
 8002ff0:	3201      	adds	r2, #1
 8002ff2:	b252      	sxtb	r2, r2
 8002ff4:	f062 024f 	orn	r2, r2, #79	; 0x4f
 8002ff8:	b2d2      	uxtb	r2, r2
 8002ffa:	4621      	mov	r1, r4
 8002ffc:	4628      	mov	r0, r5
 8002ffe:	f7ff ff39 	bl	8002e74 <u8g_WriteByte>
        u8g_SetAddress(u8g, dev, 1);					/* data mode */
 8003002:	2201      	movs	r2, #1
 8003004:	4621      	mov	r1, r4
 8003006:	4628      	mov	r0, r5
 8003008:	f7ff ff2e 	bl	8002e68 <u8g_SetAddress>
	u8g_WriteSequence(u8g, dev, pb->width, (uint8_t *)(pb->buf)+pb->width); 
 800300c:	f898 2005 	ldrb.w	r2, [r8, #5]
 8003010:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8003014:	4413      	add	r3, r2
 8003016:	4621      	mov	r1, r4
 8003018:	4628      	mov	r0, r5
 800301a:	f7ff ff31 	bl	8002e80 <u8g_WriteSequence>
        u8g_SetChipSelect(u8g, dev, 0);
 800301e:	2200      	movs	r2, #0
 8003020:	4621      	mov	r1, r4
 8003022:	4628      	mov	r0, r5
 8003024:	f7ff ff0c 	bl	8002e40 <u8g_SetChipSelect>
      break;
 8003028:	e7ae      	b.n	8002f88 <u8g_dev_ssd1306_128x32_2x_fn+0x34>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_on);    
 800302a:	4a06      	ldr	r2, [pc, #24]	; (8003044 <u8g_dev_ssd1306_128x32_2x_fn+0xf0>)
 800302c:	f7ff ff2d 	bl	8002e8a <u8g_WriteEscSeqP>
      return 1;
 8003030:	2001      	movs	r0, #1
 8003032:	e7af      	b.n	8002f94 <u8g_dev_ssd1306_128x32_2x_fn+0x40>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
 8003034:	4a04      	ldr	r2, [pc, #16]	; (8003048 <u8g_dev_ssd1306_128x32_2x_fn+0xf4>)
 8003036:	f7ff ff28 	bl	8002e8a <u8g_WriteEscSeqP>
      return 1;
 800303a:	2001      	movs	r0, #1
 800303c:	e7aa      	b.n	8002f94 <u8g_dev_ssd1306_128x32_2x_fn+0x40>
 800303e:	bf00      	nop
 8003040:	080073cc 	.word	0x080073cc
 8003044:	08007408 	.word	0x08007408
 8003048:	080073fc 	.word	0x080073fc
 800304c:	080073f4 	.word	0x080073f4

08003050 <u8g_dev_ssd1309_128x64_fn>:
  U8G_ESC_CS(0),             /* disable chip */
  U8G_ESC_END                /* end of sequence */
};

uint8_t u8g_dev_ssd1309_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 8003050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003054:	4605      	mov	r5, r0
 8003056:	460c      	mov	r4, r1
 8003058:	4616      	mov	r6, r2
 800305a:	461f      	mov	r7, r3
  switch(msg)
 800305c:	f1a2 030a 	sub.w	r3, r2, #10
 8003060:	2b0b      	cmp	r3, #11
 8003062:	d80f      	bhi.n	8003084 <u8g_dev_ssd1309_128x64_fn+0x34>
 8003064:	e8df f003 	tbb	[pc, r3]
 8003068:	0e0e0e06 	.word	0x0e0e0e06
 800306c:	5651380e 	.word	0x5651380e
 8003070:	180e0e0e 	.word	0x180e0e0e
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
 8003074:	2202      	movs	r2, #2
 8003076:	f7ff fedd 	bl	8002e34 <u8g_InitCom>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1309_128x64_init_seq);
 800307a:	4a29      	ldr	r2, [pc, #164]	; (8003120 <u8g_dev_ssd1309_128x64_fn+0xd0>)
 800307c:	4621      	mov	r1, r4
 800307e:	4628      	mov	r0, r5
 8003080:	f7ff ff03 	bl	8002e8a <u8g_WriteEscSeqP>
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
      return 1;
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
 8003084:	463b      	mov	r3, r7
 8003086:	4632      	mov	r2, r6
 8003088:	4621      	mov	r1, r4
 800308a:	4628      	mov	r0, r5
 800308c:	f000 fc09 	bl	80038a2 <u8g_dev_pb8v1_base_fn>
 8003090:	4603      	mov	r3, r0
}
 8003092:	4618      	mov	r0, r3
 8003094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
 8003098:	f8d1 8004 	ldr.w	r8, [r1, #4]
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1309_128x64_data_start);    
 800309c:	4a21      	ldr	r2, [pc, #132]	; (8003124 <u8g_dev_ssd1309_128x64_fn+0xd4>)
 800309e:	f7ff fef4 	bl	8002e8a <u8g_WriteEscSeqP>
        u8g_WriteByte(u8g, dev, 0x0b0 | pb->p.page); /* select current page (SSD1306) */
 80030a2:	f898 2004 	ldrb.w	r2, [r8, #4]
 80030a6:	f042 02b0 	orr.w	r2, r2, #176	; 0xb0
 80030aa:	4621      	mov	r1, r4
 80030ac:	4628      	mov	r0, r5
 80030ae:	f7ff fee1 	bl	8002e74 <u8g_WriteByte>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
 80030b2:	2201      	movs	r2, #1
 80030b4:	4621      	mov	r1, r4
 80030b6:	4628      	mov	r0, r5
 80030b8:	f7ff fed6 	bl	8002e68 <u8g_SetAddress>
        if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
 80030bc:	4622      	mov	r2, r4
 80030be:	4629      	mov	r1, r5
 80030c0:	4640      	mov	r0, r8
 80030c2:	f000 fad0 	bl	8003666 <u8g_pb_WriteBuffer>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2800      	cmp	r0, #0
 80030ca:	d0e2      	beq.n	8003092 <u8g_dev_ssd1309_128x64_fn+0x42>
        u8g_SetChipSelect(u8g, dev, 0);
 80030cc:	2200      	movs	r2, #0
 80030ce:	4621      	mov	r1, r4
 80030d0:	4628      	mov	r0, r5
 80030d2:	f7ff feb5 	bl	8002e40 <u8g_SetChipSelect>
      break;
 80030d6:	e7d5      	b.n	8003084 <u8g_dev_ssd1309_128x64_fn+0x34>
      u8g_SetChipSelect(u8g, dev, 1);
 80030d8:	2201      	movs	r2, #1
 80030da:	f7ff feb1 	bl	8002e40 <u8g_SetChipSelect>
      u8g_SetAddress(u8g, dev, 0);          /* instruction mode */
 80030de:	2200      	movs	r2, #0
 80030e0:	4621      	mov	r1, r4
 80030e2:	4628      	mov	r0, r5
 80030e4:	f7ff fec0 	bl	8002e68 <u8g_SetAddress>
      u8g_WriteByte(u8g, dev, 0x081);
 80030e8:	2281      	movs	r2, #129	; 0x81
 80030ea:	4621      	mov	r1, r4
 80030ec:	4628      	mov	r0, r5
 80030ee:	f7ff fec1 	bl	8002e74 <u8g_WriteByte>
      u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) ); /* 11 Jul 2015: fixed contrast calculation */
 80030f2:	783a      	ldrb	r2, [r7, #0]
 80030f4:	4621      	mov	r1, r4
 80030f6:	4628      	mov	r0, r5
 80030f8:	f7ff febc 	bl	8002e74 <u8g_WriteByte>
      u8g_SetChipSelect(u8g, dev, 0);      
 80030fc:	2200      	movs	r2, #0
 80030fe:	4621      	mov	r1, r4
 8003100:	4628      	mov	r0, r5
 8003102:	f7ff fe9d 	bl	8002e40 <u8g_SetChipSelect>
      return 1; 
 8003106:	2301      	movs	r3, #1
 8003108:	e7c3      	b.n	8003092 <u8g_dev_ssd1309_128x64_fn+0x42>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_on);    
 800310a:	4a07      	ldr	r2, [pc, #28]	; (8003128 <u8g_dev_ssd1309_128x64_fn+0xd8>)
 800310c:	f7ff febd 	bl	8002e8a <u8g_WriteEscSeqP>
      return 1;
 8003110:	2301      	movs	r3, #1
 8003112:	e7be      	b.n	8003092 <u8g_dev_ssd1309_128x64_fn+0x42>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
 8003114:	4a05      	ldr	r2, [pc, #20]	; (800312c <u8g_dev_ssd1309_128x64_fn+0xdc>)
 8003116:	f7ff feb8 	bl	8002e8a <u8g_WriteEscSeqP>
      return 1;
 800311a:	2301      	movs	r3, #1
 800311c:	e7b9      	b.n	8003092 <u8g_dev_ssd1309_128x64_fn+0x42>
 800311e:	bf00      	nop
 8003120:	0800741c 	.word	0x0800741c
 8003124:	08007414 	.word	0x08007414
 8003128:	08007454 	.word	0x08007454
 800312c:	08007448 	.word	0x08007448

08003130 <u8g_font_get_byte>:
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
}
 8003130:	5c40      	ldrb	r0, [r0, r1]
 8003132:	4770      	bx	lr

08003134 <u8g_font_get_word>:

static uint16_t u8g_font_get_word(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE; 
static uint16_t u8g_font_get_word(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
    uint16_t pos;
    font += offset;
 8003134:	1842      	adds	r2, r0, r1
    pos = u8g_pgm_read( (u8g_pgm_uint8_t *)font );
 8003136:	5c43      	ldrb	r3, [r0, r1]
    font++;
    pos <<= 8;
    pos += u8g_pgm_read( (u8g_pgm_uint8_t *)font);
 8003138:	7850      	ldrb	r0, [r2, #1]
 800313a:	eb00 2003 	add.w	r0, r0, r3, lsl #8
    return pos;
}
 800313e:	b280      	uxth	r0, r0
 8003140:	4770      	bx	lr

08003142 <u8g_font_GetFormat>:
/*========================================================================*/
/* direct access on the font */

static uint8_t u8g_font_GetFormat(const u8g_fntpgm_uint8_t *font) U8G_NOINLINE;
static uint8_t u8g_font_GetFormat(const u8g_fntpgm_uint8_t *font)
{
 8003142:	b508      	push	{r3, lr}
  return u8g_font_get_byte(font, 0);
 8003144:	2100      	movs	r1, #0
 8003146:	f7ff fff3 	bl	8003130 <u8g_font_get_byte>
}
 800314a:	bd08      	pop	{r3, pc}

0800314c <u8g_font_GetFontGlyphStructureSize>:

static uint8_t u8g_font_GetFontGlyphStructureSize(const u8g_fntpgm_uint8_t *font) U8G_NOINLINE;
static uint8_t u8g_font_GetFontGlyphStructureSize(const u8g_fntpgm_uint8_t *font)
{
 800314c:	b508      	push	{r3, lr}
  switch(u8g_font_GetFormat(font))
 800314e:	f7ff fff8 	bl	8003142 <u8g_font_GetFormat>
 8003152:	b118      	cbz	r0, 800315c <u8g_font_GetFontGlyphStructureSize+0x10>
 8003154:	2802      	cmp	r0, #2
 8003156:	d001      	beq.n	800315c <u8g_font_GetFontGlyphStructureSize+0x10>
  {
    case 0: return 6;
    case 1: return 3;
 8003158:	2003      	movs	r0, #3
    case 2: return 6;
  }
  return 3;
}
 800315a:	bd08      	pop	{r3, pc}
    case 0: return 6;
 800315c:	2006      	movs	r0, #6
 800315e:	e7fc      	b.n	800315a <u8g_font_GetFontGlyphStructureSize+0xe>

08003160 <u8g_font_GetGlyphDataStart>:
}


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
 8003160:	b510      	push	{r4, lr}
 8003162:	460c      	mov	r4, r1
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 8003164:	f7ff fff2 	bl	800314c <u8g_font_GetFontGlyphStructureSize>
}
 8003168:	4420      	add	r0, r4
 800316a:	bd10      	pop	{r4, pc}

0800316c <u8g_CopyGlyphDataToCache>:

/*========================================================================*/
/* glyph handling */

static void u8g_CopyGlyphDataToCache(u8g_t *u8g, u8g_glyph_t g)
{
 800316c:	b538      	push	{r3, r4, r5, lr}
 800316e:	4604      	mov	r4, r0
 8003170:	460d      	mov	r5, r1
  uint8_t tmp;
  switch( u8g_font_GetFormat(u8g->font) )
 8003172:	6880      	ldr	r0, [r0, #8]
 8003174:	f7ff ffe5 	bl	8003142 <u8g_font_GetFormat>
 8003178:	b198      	cbz	r0, 80031a2 <u8g_CopyGlyphDataToCache+0x36>
 800317a:	2802      	cmp	r0, #2
 800317c:	d011      	beq.n	80031a2 <u8g_CopyGlyphDataToCache+0x36>
  2             data size                                           unsigned -(BBX width + 7)/8 * BBX height  --> lower 4 Bit
  2             DWIDTH                                          signed --> upper  4 Bit
  byte 0 == 255 indicates empty glyph
      */
    
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 0 );
 800317e:	782b      	ldrb	r3, [r5, #0]
      u8g->glyph_y =  tmp & 15;
 8003180:	f003 020f 	and.w	r2, r3, #15
      u8g->glyph_y-=2;
 8003184:	3a02      	subs	r2, #2
 8003186:	77a2      	strb	r2, [r4, #30]
      tmp >>= 4;
 8003188:	091b      	lsrs	r3, r3, #4
      u8g->glyph_x =  tmp;
 800318a:	7763      	strb	r3, [r4, #29]
    
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 1 );
 800318c:	786b      	ldrb	r3, [r5, #1]
      u8g->glyph_height =  tmp & 15;
 800318e:	f003 020f 	and.w	r2, r3, #15
 8003192:	f884 2020 	strb.w	r2, [r4, #32]
      tmp >>= 4;
 8003196:	091b      	lsrs	r3, r3, #4
      u8g->glyph_width =  tmp;
 8003198:	77e3      	strb	r3, [r4, #31]
      
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 2 );
 800319a:	78ab      	ldrb	r3, [r5, #2]
      tmp >>= 4;
 800319c:	091b      	lsrs	r3, r3, #4
      u8g->glyph_dx = tmp;
 800319e:	7723      	strb	r3, [r4, #28]
    
      
      break;
  }
}
 80031a0:	bd38      	pop	{r3, r4, r5, pc}
      u8g->glyph_width =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 0 );
 80031a2:	782b      	ldrb	r3, [r5, #0]
 80031a4:	77e3      	strb	r3, [r4, #31]
      u8g->glyph_height =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 1 );
 80031a6:	786b      	ldrb	r3, [r5, #1]
 80031a8:	f884 3020 	strb.w	r3, [r4, #32]
      u8g->glyph_dx =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 3 );
 80031ac:	f995 3003 	ldrsb.w	r3, [r5, #3]
 80031b0:	7723      	strb	r3, [r4, #28]
      u8g->glyph_x =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 4 );
 80031b2:	f995 3004 	ldrsb.w	r3, [r5, #4]
 80031b6:	7763      	strb	r3, [r4, #29]
      u8g->glyph_y =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 5 );
 80031b8:	f995 3005 	ldrsb.w	r3, [r5, #5]
 80031bc:	77a3      	strb	r3, [r4, #30]
      break;
 80031be:	e7ef      	b.n	80031a0 <u8g_CopyGlyphDataToCache+0x34>

080031c0 <u8g_FillEmptyGlyphCache>:

//void u8g_FillEmptyGlyphCache(u8g_t *u8g) U8G_NOINLINE;
static void u8g_FillEmptyGlyphCache(u8g_t *u8g)
{
  u8g->glyph_dx = 0;
 80031c0:	2300      	movs	r3, #0
 80031c2:	7703      	strb	r3, [r0, #28]
  u8g->glyph_width = 0;
 80031c4:	77c3      	strb	r3, [r0, #31]
  u8g->glyph_height = 0;
 80031c6:	f880 3020 	strb.w	r3, [r0, #32]
  u8g->glyph_x = 0;
 80031ca:	7743      	strb	r3, [r0, #29]
  u8g->glyph_y = 0;
 80031cc:	7783      	strb	r3, [r0, #30]
}
 80031ce:	4770      	bx	lr

080031d0 <u8g_font_calc_vref_font>:
/* callback procedures to correct the y position */

u8g_uint_t u8g_font_calc_vref_font(u8g_t *u8g)
{
  return 0;
}
 80031d0:	2000      	movs	r0, #0
 80031d2:	4770      	bx	lr

080031d4 <u8g_font_GetEncoding65Pos>:
{
 80031d4:	b508      	push	{r3, lr}
    return u8g_font_get_word(font, 6);
 80031d6:	2106      	movs	r1, #6
 80031d8:	f7ff ffac 	bl	8003134 <u8g_font_get_word>
}
 80031dc:	bd08      	pop	{r3, pc}

080031de <u8g_font_GetEncoding97Pos>:
{
 80031de:	b508      	push	{r3, lr}
    return u8g_font_get_word(font, 8);
 80031e0:	2108      	movs	r1, #8
 80031e2:	f7ff ffa7 	bl	8003134 <u8g_font_get_word>
}
 80031e6:	bd08      	pop	{r3, pc}

080031e8 <u8g_font_GetFontStartEncoding>:
{
 80031e8:	b508      	push	{r3, lr}
  return u8g_font_get_byte(font, 10);
 80031ea:	210a      	movs	r1, #10
 80031ec:	f7ff ffa0 	bl	8003130 <u8g_font_get_byte>
}
 80031f0:	bd08      	pop	{r3, pc}

080031f2 <u8g_font_GetFontEndEncoding>:
{
 80031f2:	b508      	push	{r3, lr}
  return u8g_font_get_byte(font, 11);
 80031f4:	210b      	movs	r1, #11
 80031f6:	f7ff ff9b 	bl	8003130 <u8g_font_get_byte>
}
 80031fa:	bd08      	pop	{r3, pc}

080031fc <u8g_GetGlyph>:
{
 80031fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003200:	4682      	mov	sl, r0
 8003202:	460f      	mov	r7, r1
  uint8_t *p = (uint8_t *)(u8g->font);
 8003204:	6885      	ldr	r5, [r0, #8]
  uint8_t font_format = u8g_font_GetFormat(u8g->font);
 8003206:	4628      	mov	r0, r5
 8003208:	f7ff ff9b 	bl	8003142 <u8g_font_GetFormat>
 800320c:	4604      	mov	r4, r0
  uint8_t data_structure_size = u8g_font_GetFontGlyphStructureSize(u8g->font);
 800320e:	4628      	mov	r0, r5
 8003210:	f7ff ff9c 	bl	800314c <u8g_font_GetFontGlyphStructureSize>
 8003214:	4681      	mov	r9, r0
  if ( font_format == 1 )
 8003216:	2c01      	cmp	r4, #1
 8003218:	d012      	beq.n	8003240 <u8g_GetGlyph+0x44>
  uint8_t mask = 255;
 800321a:	f04f 08ff 	mov.w	r8, #255	; 0xff
  start = u8g_font_GetFontStartEncoding(u8g->font);
 800321e:	4628      	mov	r0, r5
 8003220:	f7ff ffe2 	bl	80031e8 <u8g_font_GetFontStartEncoding>
 8003224:	4604      	mov	r4, r0
  end = u8g_font_GetFontEndEncoding(u8g->font);
 8003226:	4628      	mov	r0, r5
 8003228:	f7ff ffe3 	bl	80031f2 <u8g_font_GetFontEndEncoding>
 800322c:	4606      	mov	r6, r0
  pos = u8g_font_GetEncoding97Pos(u8g->font);
 800322e:	4628      	mov	r0, r5
 8003230:	f7ff ffd5 	bl	80031de <u8g_font_GetEncoding97Pos>
  if ( requested_encoding >= 97 && pos > 0 )
 8003234:	2f60      	cmp	r7, #96	; 0x60
 8003236:	d906      	bls.n	8003246 <u8g_GetGlyph+0x4a>
 8003238:	b128      	cbz	r0, 8003246 <u8g_GetGlyph+0x4a>
    p+= pos;
 800323a:	4405      	add	r5, r0
    start = 97;
 800323c:	2461      	movs	r4, #97	; 0x61
 800323e:	e00c      	b.n	800325a <u8g_GetGlyph+0x5e>
    mask = 15;
 8003240:	f04f 080f 	mov.w	r8, #15
 8003244:	e7eb      	b.n	800321e <u8g_GetGlyph+0x22>
    pos = u8g_font_GetEncoding65Pos(u8g->font);
 8003246:	4628      	mov	r0, r5
 8003248:	f7ff ffc4 	bl	80031d4 <u8g_font_GetEncoding65Pos>
    if ( requested_encoding >= 65 && pos > 0 )
 800324c:	2f40      	cmp	r7, #64	; 0x40
 800324e:	d903      	bls.n	8003258 <u8g_GetGlyph+0x5c>
 8003250:	b110      	cbz	r0, 8003258 <u8g_GetGlyph+0x5c>
      p+= pos;
 8003252:	4405      	add	r5, r0
      start = 65;
 8003254:	2441      	movs	r4, #65	; 0x41
 8003256:	e000      	b.n	800325a <u8g_GetGlyph+0x5e>
      p += U8G_FONT_DATA_STRUCT_SIZE;       /* skip font general information */  
 8003258:	3511      	adds	r5, #17
  if ( requested_encoding > end )
 800325a:	42be      	cmp	r6, r7
 800325c:	d308      	bcc.n	8003270 <u8g_GetGlyph+0x74>
  if ( i <= end )
 800325e:	42b4      	cmp	r4, r6
 8003260:	d910      	bls.n	8003284 <u8g_GetGlyph+0x88>
  u8g_FillEmptyGlyphCache(u8g);
 8003262:	4650      	mov	r0, sl
 8003264:	f7ff ffac 	bl	80031c0 <u8g_FillEmptyGlyphCache>
  return NULL;
 8003268:	2500      	movs	r5, #0
}
 800326a:	4628      	mov	r0, r5
 800326c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    u8g_FillEmptyGlyphCache(u8g);
 8003270:	4650      	mov	r0, sl
 8003272:	f7ff ffa5 	bl	80031c0 <u8g_FillEmptyGlyphCache>
    return NULL;                      /* not found */
 8003276:	2500      	movs	r5, #0
 8003278:	e7f7      	b.n	800326a <u8g_GetGlyph+0x6e>
        p += 1;
 800327a:	3501      	adds	r5, #1
      if ( i == end )
 800327c:	42b4      	cmp	r4, r6
 800327e:	d0f0      	beq.n	8003262 <u8g_GetGlyph+0x66>
      i++;
 8003280:	3401      	adds	r4, #1
 8003282:	b2e4      	uxtb	r4, r4
      if ( u8g_pgm_read((u8g_pgm_uint8_t *)(p)) == 255 )
 8003284:	782b      	ldrb	r3, [r5, #0]
 8003286:	2bff      	cmp	r3, #255	; 0xff
 8003288:	d0f7      	beq.n	800327a <u8g_GetGlyph+0x7e>
        if ( i == requested_encoding )
 800328a:	42bc      	cmp	r4, r7
 800328c:	d005      	beq.n	800329a <u8g_GetGlyph+0x9e>
        p += u8g_pgm_read( ((u8g_pgm_uint8_t *)(p)) + 2 ) & mask;
 800328e:	78ab      	ldrb	r3, [r5, #2]
 8003290:	ea03 0308 	and.w	r3, r3, r8
        p += data_structure_size;
 8003294:	444b      	add	r3, r9
 8003296:	441d      	add	r5, r3
 8003298:	e7f0      	b.n	800327c <u8g_GetGlyph+0x80>
          u8g_CopyGlyphDataToCache(u8g, p);
 800329a:	4629      	mov	r1, r5
 800329c:	4650      	mov	r0, sl
 800329e:	f7ff ff65 	bl	800316c <u8g_CopyGlyphDataToCache>
          return p;
 80032a2:	e7e2      	b.n	800326a <u8g_GetGlyph+0x6e>

080032a4 <u8g_draw_glyph>:
{
 80032a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032a8:	b085      	sub	sp, #20
 80032aa:	4680      	mov	r8, r0
 80032ac:	460d      	mov	r5, r1
 80032ae:	4614      	mov	r4, r2
    u8g_glyph_t g = u8g_GetGlyph(u8g, encoding);
 80032b0:	4619      	mov	r1, r3
 80032b2:	f7ff ffa3 	bl	80031fc <u8g_GetGlyph>
    if ( g == NULL  )
 80032b6:	2800      	cmp	r0, #0
 80032b8:	d048      	beq.n	800334c <u8g_draw_glyph+0xa8>
 80032ba:	4601      	mov	r1, r0
    data = u8g_font_GetGlyphDataStart(u8g->font, g);
 80032bc:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80032c0:	f7ff ff4e 	bl	8003160 <u8g_font_GetGlyphDataStart>
 80032c4:	4607      	mov	r7, r0
  w = u8g->glyph_width;
 80032c6:	f898 901f 	ldrb.w	r9, [r8, #31]
  h = u8g->glyph_height;
 80032ca:	f898 b020 	ldrb.w	fp, [r8, #32]
  x += u8g->glyph_x;
 80032ce:	f898 101d 	ldrb.w	r1, [r8, #29]
 80032d2:	4429      	add	r1, r5
 80032d4:	b2c9      	uxtb	r1, r1
 80032d6:	9103      	str	r1, [sp, #12]
  y -= u8g->glyph_y;
 80032d8:	f898 601e 	ldrb.w	r6, [r8, #30]
 80032dc:	1ba6      	subs	r6, r4, r6
 80032de:	b2f6      	uxtb	r6, r6
  y--;
 80032e0:	3e01      	subs	r6, #1
 80032e2:	b2f6      	uxtb	r6, r6
  if ( u8g_IsBBXIntersection(u8g, x, y-h+1, w, h) == 0 )
 80032e4:	eba6 060b 	sub.w	r6, r6, fp
 80032e8:	b2f6      	uxtb	r6, r6
 80032ea:	3601      	adds	r6, #1
 80032ec:	b2f6      	uxtb	r6, r6
 80032ee:	f8cd b000 	str.w	fp, [sp]
 80032f2:	464b      	mov	r3, r9
 80032f4:	4632      	mov	r2, r6
 80032f6:	4640      	mov	r0, r8
 80032f8:	f7ff fd62 	bl	8002dc0 <u8g_IsBBXIntersection>
 80032fc:	b130      	cbz	r0, 800330c <u8g_draw_glyph+0x68>
  w += 7;
 80032fe:	f109 0907 	add.w	r9, r9, #7
  w /= 8;
 8003302:	f3c9 09c4 	ubfx	r9, r9, #3, #5
  for( j = 0; j < h; j++ )
 8003306:	f04f 0a00 	mov.w	sl, #0
 800330a:	e017      	b.n	800333c <u8g_draw_glyph+0x98>
    return u8g->glyph_dx;
 800330c:	f998 001c 	ldrsb.w	r0, [r8, #28]
 8003310:	e01d      	b.n	800334e <u8g_draw_glyph+0xaa>
      u8g_Draw8Pixel(u8g, ix, iy, 0, u8g_pgm_read(data));
 8003312:	f817 3b01 	ldrb.w	r3, [r7], #1
 8003316:	9300      	str	r3, [sp, #0]
 8003318:	2300      	movs	r3, #0
 800331a:	4632      	mov	r2, r6
 800331c:	4629      	mov	r1, r5
 800331e:	4640      	mov	r0, r8
 8003320:	f000 f904 	bl	800352c <u8g_Draw8Pixel>
      ix+=8;
 8003324:	3508      	adds	r5, #8
 8003326:	b2ed      	uxtb	r5, r5
    for( i = 0; i < w; i++ )
 8003328:	3401      	adds	r4, #1
 800332a:	b2e4      	uxtb	r4, r4
 800332c:	454c      	cmp	r4, r9
 800332e:	d3f0      	bcc.n	8003312 <u8g_draw_glyph+0x6e>
    iy++;
 8003330:	3601      	adds	r6, #1
 8003332:	b2f6      	uxtb	r6, r6
  for( j = 0; j < h; j++ )
 8003334:	f10a 0a01 	add.w	sl, sl, #1
 8003338:	fa5f fa8a 	uxtb.w	sl, sl
 800333c:	45da      	cmp	sl, fp
 800333e:	d202      	bcs.n	8003346 <u8g_draw_glyph+0xa2>
    ix = x;
 8003340:	9d03      	ldr	r5, [sp, #12]
    for( i = 0; i < w; i++ )
 8003342:	2400      	movs	r4, #0
 8003344:	e7f2      	b.n	800332c <u8g_draw_glyph+0x88>
  return u8g->glyph_dx;
 8003346:	f998 001c 	ldrsb.w	r0, [r8, #28]
 800334a:	e000      	b.n	800334e <u8g_draw_glyph+0xaa>
      return 0;
 800334c:	2000      	movs	r0, #0
}
 800334e:	b005      	add	sp, #20
 8003350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003354 <u8g_DrawStr>:
{
 8003354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003358:	4680      	mov	r8, r0
 800335a:	460c      	mov	r4, r1
 800335c:	4617      	mov	r7, r2
 800335e:	461e      	mov	r6, r3
  y += u8g->font_calc_vref(u8g);
 8003360:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003362:	4798      	blx	r3
 8003364:	4407      	add	r7, r0
 8003366:	b2ff      	uxtb	r7, r7
  u8g_uint_t t = 0;
 8003368:	2500      	movs	r5, #0
  while( *s != '\0' )
 800336a:	e00a      	b.n	8003382 <u8g_DrawStr+0x2e>
    d = u8g_draw_glyph(u8g, x, y, *s);
 800336c:	463a      	mov	r2, r7
 800336e:	4621      	mov	r1, r4
 8003370:	4640      	mov	r0, r8
 8003372:	f7ff ff97 	bl	80032a4 <u8g_draw_glyph>
    x += d;
 8003376:	b2c0      	uxtb	r0, r0
 8003378:	4404      	add	r4, r0
 800337a:	b2e4      	uxtb	r4, r4
    t += d;
 800337c:	4405      	add	r5, r0
 800337e:	b2ed      	uxtb	r5, r5
    s++;
 8003380:	3601      	adds	r6, #1
  while( *s != '\0' )
 8003382:	7833      	ldrb	r3, [r6, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1f1      	bne.n	800336c <u8g_DrawStr+0x18>
}
 8003388:	4628      	mov	r0, r5
 800338a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08003390 <u8g_SetFontPosBaseline>:

void u8g_SetFontPosBaseline(u8g_t *u8g)
{
  u8g->font_calc_vref = u8g_font_calc_vref_font;
 8003390:	4b01      	ldr	r3, [pc, #4]	; (8003398 <u8g_SetFontPosBaseline+0x8>)
 8003392:	6243      	str	r3, [r0, #36]	; 0x24
}
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	080031d1 	.word	0x080031d1

0800339c <u8g_call_dev_fn>:

#include <stddef.h>
#include "../Drivers/u8glib/inc/u8g.h"

uint8_t u8g_call_dev_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 800339c:	b510      	push	{r4, lr}
  return dev->dev_fn(u8g, dev, msg, arg); 
 800339e:	680c      	ldr	r4, [r1, #0]
 80033a0:	47a0      	blx	r4
}
 80033a2:	bd10      	pop	{r4, pc}

080033a4 <u8g_InitLL>:

/*====================================================================*/

uint8_t u8g_InitLL(u8g_t *u8g, u8g_dev_t *dev)
{
 80033a4:	b538      	push	{r3, r4, r5, lr}
 80033a6:	4604      	mov	r4, r0
 80033a8:	460d      	mov	r5, r1
  uint8_t r;
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
 80033aa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80033ac:	2002      	movs	r0, #2
 80033ae:	4798      	blx	r3
  r =  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_INIT, NULL);
 80033b0:	2300      	movs	r3, #0
 80033b2:	220a      	movs	r2, #10
 80033b4:	4629      	mov	r1, r5
 80033b6:	4620      	mov	r0, r4
 80033b8:	f7ff fff0 	bl	800339c <u8g_call_dev_fn>
 80033bc:	4605      	mov	r5, r0
  u8g->state_cb(U8G_STATE_MSG_BACKUP_U8G);
 80033be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80033c0:	2003      	movs	r0, #3
 80033c2:	4798      	blx	r3
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
 80033c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80033c6:	2000      	movs	r0, #0
 80033c8:	4798      	blx	r3
  return r;
}
 80033ca:	4628      	mov	r0, r5
 80033cc:	bd38      	pop	{r3, r4, r5, pc}

080033ce <u8g_FirstPageLL>:

void u8g_FirstPageLL(u8g_t *u8g, u8g_dev_t *dev)
{  
 80033ce:	b538      	push	{r3, r4, r5, lr}
 80033d0:	4604      	mov	r4, r0
 80033d2:	460d      	mov	r5, r1
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
 80033d4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80033d6:	2002      	movs	r0, #2
 80033d8:	4798      	blx	r3
  u8g->state_cb(U8G_STATE_MSG_RESTORE_U8G);
 80033da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80033dc:	2001      	movs	r0, #1
 80033de:	4798      	blx	r3
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_PAGE_FIRST, NULL);
 80033e0:	2300      	movs	r3, #0
 80033e2:	2214      	movs	r2, #20
 80033e4:	4629      	mov	r1, r5
 80033e6:	4620      	mov	r0, r4
 80033e8:	f7ff ffd8 	bl	800339c <u8g_call_dev_fn>
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 80033ec:	f104 0338 	add.w	r3, r4, #56	; 0x38
 80033f0:	2217      	movs	r2, #23
 80033f2:	4629      	mov	r1, r5
 80033f4:	4620      	mov	r0, r4
 80033f6:	f7ff ffd1 	bl	800339c <u8g_call_dev_fn>
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
 80033fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80033fc:	2000      	movs	r0, #0
 80033fe:	4798      	blx	r3
}
 8003400:	bd38      	pop	{r3, r4, r5, pc}

08003402 <u8g_NextPageLL>:

uint8_t u8g_NextPageLL(u8g_t *u8g, u8g_dev_t *dev)
{  
 8003402:	b570      	push	{r4, r5, r6, lr}
 8003404:	4604      	mov	r4, r0
 8003406:	460d      	mov	r5, r1
  uint8_t r;
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
 8003408:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800340a:	2002      	movs	r0, #2
 800340c:	4798      	blx	r3
  u8g->state_cb(U8G_STATE_MSG_RESTORE_U8G);
 800340e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003410:	2001      	movs	r0, #1
 8003412:	4798      	blx	r3
  r = u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_PAGE_NEXT, NULL);
 8003414:	2300      	movs	r3, #0
 8003416:	2215      	movs	r2, #21
 8003418:	4629      	mov	r1, r5
 800341a:	4620      	mov	r0, r4
 800341c:	f7ff ffbe 	bl	800339c <u8g_call_dev_fn>
  if ( r != 0 )
 8003420:	4606      	mov	r6, r0
 8003422:	b920      	cbnz	r0, 800342e <u8g_NextPageLL+0x2c>
  {
    u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
  }
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
 8003424:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003426:	2000      	movs	r0, #0
 8003428:	4798      	blx	r3
  return r;
}
 800342a:	4630      	mov	r0, r6
 800342c:	bd70      	pop	{r4, r5, r6, pc}
    u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 800342e:	f104 0338 	add.w	r3, r4, #56	; 0x38
 8003432:	2217      	movs	r2, #23
 8003434:	4629      	mov	r1, r5
 8003436:	4620      	mov	r0, r4
 8003438:	f7ff ffb0 	bl	800339c <u8g_call_dev_fn>
 800343c:	e7f2      	b.n	8003424 <u8g_NextPageLL+0x22>

0800343e <u8g_SetContrastLL>:

uint8_t u8g_SetContrastLL(u8g_t *u8g, u8g_dev_t *dev, uint8_t contrast)
{  
 800343e:	b500      	push	{lr}
 8003440:	b083      	sub	sp, #12
 8003442:	ab02      	add	r3, sp, #8
 8003444:	f803 2d01 	strb.w	r2, [r3, #-1]!
  return u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_CONTRAST, &contrast);
 8003448:	220f      	movs	r2, #15
 800344a:	f7ff ffa7 	bl	800339c <u8g_call_dev_fn>
}
 800344e:	b003      	add	sp, #12
 8003450:	f85d fb04 	ldr.w	pc, [sp], #4

08003454 <u8g_Draw8PixelLL>:
  arg->y = y;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_PIXEL, arg);
}

void u8g_Draw8PixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
 8003454:	b510      	push	{r4, lr}
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
  arg->x = x;
 8003456:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
  arg->y = y;
 800345a:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
  arg->dir = dir;
 800345e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8003462:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  arg->pixel = pixel;
 8003466:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800346a:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_8PIXEL, arg);
 800346e:	f100 032d 	add.w	r3, r0, #45	; 0x2d
 8003472:	223b      	movs	r2, #59	; 0x3b
 8003474:	f7ff ff92 	bl	800339c <u8g_call_dev_fn>
}
 8003478:	bd10      	pop	{r4, pc}

0800347a <u8g_GetWidthLL>:
#endif



u8g_uint_t u8g_GetWidthLL(u8g_t *u8g, u8g_dev_t *dev)
{
 800347a:	b500      	push	{lr}
 800347c:	b083      	sub	sp, #12
  u8g_uint_t r;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_WIDTH, &r);
 800347e:	f10d 0307 	add.w	r3, sp, #7
 8003482:	2246      	movs	r2, #70	; 0x46
 8003484:	f7ff ff8a 	bl	800339c <u8g_call_dev_fn>
  return r;
}
 8003488:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800348c:	b003      	add	sp, #12
 800348e:	f85d fb04 	ldr.w	pc, [sp], #4

08003492 <u8g_GetHeightLL>:

u8g_uint_t u8g_GetHeightLL(u8g_t *u8g, u8g_dev_t *dev)
{       
 8003492:	b500      	push	{lr}
 8003494:	b083      	sub	sp, #12
  u8g_uint_t r;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_HEIGHT, &r);
 8003496:	f10d 0307 	add.w	r3, sp, #7
 800349a:	2247      	movs	r2, #71	; 0x47
 800349c:	f7ff ff7e 	bl	800339c <u8g_call_dev_fn>
  return r;
}
 80034a0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80034a4:	b003      	add	sp, #12
 80034a6:	f85d fb04 	ldr.w	pc, [sp], #4

080034aa <u8g_GetModeLL>:

u8g_uint_t u8g_GetModeLL(u8g_t *u8g, u8g_dev_t *dev)
{       
 80034aa:	b508      	push	{r3, lr}
  return u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_MODE, NULL);
 80034ac:	2300      	movs	r3, #0
 80034ae:	2248      	movs	r2, #72	; 0x48
 80034b0:	f7ff ff74 	bl	800339c <u8g_call_dev_fn>
}
 80034b4:	bd08      	pop	{r3, pc}

080034b6 <u8g_UpdateDimension>:


/*====================================================================*/

void u8g_UpdateDimension(u8g_t *u8g)
{
 80034b6:	b510      	push	{r4, lr}
 80034b8:	4604      	mov	r4, r0
  u8g->width = u8g_GetWidthLL(u8g, u8g->dev);
 80034ba:	6841      	ldr	r1, [r0, #4]
 80034bc:	f7ff ffdd 	bl	800347a <u8g_GetWidthLL>
 80034c0:	7020      	strb	r0, [r4, #0]
  u8g->height = u8g_GetHeightLL(u8g, u8g->dev);
 80034c2:	6861      	ldr	r1, [r4, #4]
 80034c4:	4620      	mov	r0, r4
 80034c6:	f7ff ffe4 	bl	8003492 <u8g_GetHeightLL>
 80034ca:	7060      	strb	r0, [r4, #1]
  u8g->mode = u8g_GetModeLL(u8g, u8g->dev);
 80034cc:	6861      	ldr	r1, [r4, #4]
 80034ce:	4620      	mov	r0, r4
 80034d0:	f7ff ffeb 	bl	80034aa <u8g_GetModeLL>
 80034d4:	74e0      	strb	r0, [r4, #19]
  /* 9 Dec 2012: u8g_scale.c requires update of current page */
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 80034d6:	f104 0338 	add.w	r3, r4, #56	; 0x38
 80034da:	2217      	movs	r2, #23
 80034dc:	6861      	ldr	r1, [r4, #4]
 80034de:	4620      	mov	r0, r4
 80034e0:	f7ff ff5c 	bl	800339c <u8g_call_dev_fn>
}
 80034e4:	bd10      	pop	{r4, pc}

080034e6 <u8g_Begin>:
  u8g->state_cb = u8g_state_dummy_cb;

}

uint8_t u8g_Begin(u8g_t *u8g)
{
 80034e6:	b510      	push	{r4, lr}
 80034e8:	4604      	mov	r4, r0
  /* call and init low level driver and com device */
  if ( u8g_InitLL(u8g, u8g->dev) == 0 )
 80034ea:	6841      	ldr	r1, [r0, #4]
 80034ec:	f7ff ff5a 	bl	80033a4 <u8g_InitLL>
 80034f0:	4603      	mov	r3, r0
 80034f2:	b908      	cbnz	r0, 80034f8 <u8g_Begin+0x12>
    return 0;
  /* fetch width and height from the low level */
  u8g_UpdateDimension(u8g);
  return 1;
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	bd10      	pop	{r4, pc}
  u8g_UpdateDimension(u8g);
 80034f8:	4620      	mov	r0, r4
 80034fa:	f7ff ffdc 	bl	80034b6 <u8g_UpdateDimension>
  return 1;
 80034fe:	2301      	movs	r3, #1
 8003500:	e7f8      	b.n	80034f4 <u8g_Begin+0xe>

08003502 <u8g_FirstPage>:
  return u8g_Begin(u8g);
}
#endif /* defined(U8G_WITH_PINLIST)  */

void u8g_FirstPage(u8g_t *u8g)
{
 8003502:	b508      	push	{r3, lr}
  u8g_FirstPageLL(u8g, u8g->dev);
 8003504:	6841      	ldr	r1, [r0, #4]
 8003506:	f7ff ff62 	bl	80033ce <u8g_FirstPageLL>
}
 800350a:	bd08      	pop	{r3, pc}

0800350c <u8g_NextPage>:

uint8_t u8g_NextPage(u8g_t *u8g)
{
 800350c:	b510      	push	{r4, lr}
 800350e:	4604      	mov	r4, r0
  if  ( u8g->cursor_fn != (u8g_draw_cursor_fn)0 )
 8003510:	6983      	ldr	r3, [r0, #24]
 8003512:	b103      	cbz	r3, 8003516 <u8g_NextPage+0xa>
  {
    u8g->cursor_fn(u8g);
 8003514:	4798      	blx	r3
  }
  return u8g_NextPageLL(u8g, u8g->dev);
 8003516:	6861      	ldr	r1, [r4, #4]
 8003518:	4620      	mov	r0, r4
 800351a:	f7ff ff72 	bl	8003402 <u8g_NextPageLL>
}
 800351e:	bd10      	pop	{r4, pc}

08003520 <u8g_SetContrast>:

uint8_t u8g_SetContrast(u8g_t *u8g, uint8_t contrast)
{
 8003520:	b508      	push	{r3, lr}
  return u8g_SetContrastLL(u8g, u8g->dev, contrast);
 8003522:	460a      	mov	r2, r1
 8003524:	6841      	ldr	r1, [r0, #4]
 8003526:	f7ff ff8a 	bl	800343e <u8g_SetContrastLL>
}
 800352a:	bd08      	pop	{r3, pc}

0800352c <u8g_Draw8Pixel>:
{
  u8g_DrawPixelLL(u8g, u8g->dev, x, y);
}

void u8g_Draw8Pixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
 800352c:	b530      	push	{r4, r5, lr}
 800352e:	b083      	sub	sp, #12
  u8g_Draw8PixelLL(u8g, u8g->dev, x, y, dir, pixel);
 8003530:	6844      	ldr	r4, [r0, #4]
 8003532:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8003536:	9501      	str	r5, [sp, #4]
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	4613      	mov	r3, r2
 800353c:	460a      	mov	r2, r1
 800353e:	4621      	mov	r1, r4
 8003540:	f7ff ff88 	bl	8003454 <u8g_Draw8PixelLL>
}
 8003544:	b003      	add	sp, #12
 8003546:	bd30      	pop	{r4, r5, pc}

08003548 <u8g_SetColorIndex>:
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SET_COLOR_ENTRY, &irgb);
}

void u8g_SetColorIndex(u8g_t *u8g, uint8_t idx)
{
  u8g->arg_pixel.color = idx;
 8003548:	f880 1031 	strb.w	r1, [r0, #49]	; 0x31
  /*u8g->color_index = idx; */ /* must be removed */
}
 800354c:	4770      	bx	lr
	...

08003550 <u8g_init_data>:
{
 8003550:	b570      	push	{r4, r5, r6, lr}
 8003552:	4604      	mov	r4, r0
  u8g->font = NULL;
 8003554:	2500      	movs	r5, #0
 8003556:	6085      	str	r5, [r0, #8]
  u8g->cursor_font = NULL;
 8003558:	60c5      	str	r5, [r0, #12]
  u8g->cursor_bg_color = 0;
 800355a:	7445      	strb	r5, [r0, #17]
  u8g->cursor_fg_color = 1;
 800355c:	2601      	movs	r6, #1
 800355e:	7406      	strb	r6, [r0, #16]
  u8g->cursor_encoding = 34;
 8003560:	2322      	movs	r3, #34	; 0x22
 8003562:	7483      	strb	r3, [r0, #18]
  u8g->cursor_fn = (u8g_draw_cursor_fn)0;
 8003564:	6185      	str	r5, [r0, #24]
  u8g_SetColorIndex(u8g, 1);
 8003566:	4631      	mov	r1, r6
 8003568:	f7ff ffee 	bl	8003548 <u8g_SetColorIndex>
  u8g_SetFontPosBaseline(u8g);
 800356c:	4620      	mov	r0, r4
 800356e:	f7ff ff0f 	bl	8003390 <u8g_SetFontPosBaseline>
  u8g->font_height_mode = U8G_FONT_HEIGHT_MODE_XTEXT;
 8003572:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
  u8g->font_ref_ascent = 0;
 8003576:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
  u8g->font_ref_descent = 0;
 800357a:	f884 502a 	strb.w	r5, [r4, #42]	; 0x2a
  u8g->font_line_spacing_factor = 64;           /* 64 = 1.0, 77 = 1.2 line spacing factor */
 800357e:	2340      	movs	r3, #64	; 0x40
 8003580:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  u8g->line_spacing = 0;
 8003584:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
  u8g->state_cb = u8g_state_dummy_cb;
 8003588:	4b01      	ldr	r3, [pc, #4]	; (8003590 <u8g_init_data+0x40>)
 800358a:	6363      	str	r3, [r4, #52]	; 0x34
}
 800358c:	bd70      	pop	{r4, r5, r6, pc}
 800358e:	bf00      	nop
 8003590:	08003953 	.word	0x08003953

08003594 <u8g_InitComFn>:
{
 8003594:	b570      	push	{r4, r5, r6, lr}
 8003596:	4604      	mov	r4, r0
 8003598:	460d      	mov	r5, r1
 800359a:	4616      	mov	r6, r2
  u8g_init_data(u8g);
 800359c:	f7ff ffd8 	bl	8003550 <u8g_init_data>
  u8g->dev = dev;
 80035a0:	6065      	str	r5, [r4, #4]
  u8g->dev->com_fn = com_fn;
 80035a2:	60ae      	str	r6, [r5, #8]
  return u8g_Begin(u8g);
 80035a4:	4620      	mov	r0, r4
 80035a6:	f7ff ff9e 	bl	80034e6 <u8g_Begin>
}
 80035aa:	bd70      	pop	{r4, r5, r6, pc}

080035ac <u8g_page_First>:
  u8g_page_First(p);
}

void u8g_page_First(u8g_page_t *p)
{
  p->page_y0 = 0;
 80035ac:	2200      	movs	r2, #0
 80035ae:	7082      	strb	r2, [r0, #2]
  p->page_y1 = p->page_height;
 80035b0:	7803      	ldrb	r3, [r0, #0]
  p->page_y1--;
 80035b2:	3b01      	subs	r3, #1
 80035b4:	70c3      	strb	r3, [r0, #3]
  p->page = 0;
 80035b6:	7102      	strb	r2, [r0, #4]
}
 80035b8:	4770      	bx	lr

080035ba <u8g_page_Next>:

uint8_t u8g_page_Next(u8g_page_t * p)
{
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
 80035ba:	7802      	ldrb	r2, [r0, #0]
 80035bc:	7883      	ldrb	r3, [r0, #2]
 80035be:	4413      	add	r3, r2
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	7083      	strb	r3, [r0, #2]
  if ( p->page_y0 >= p->total_height )
 80035c4:	7841      	ldrb	r1, [r0, #1]
 80035c6:	428b      	cmp	r3, r1
 80035c8:	d20c      	bcs.n	80035e4 <u8g_page_Next+0x2a>
    return 0;
  p->page++;
 80035ca:	7903      	ldrb	r3, [r0, #4]
 80035cc:	3301      	adds	r3, #1
 80035ce:	7103      	strb	r3, [r0, #4]
  y1 = p->page_y1;
 80035d0:	78c3      	ldrb	r3, [r0, #3]
  y1 += p->page_height;
 80035d2:	441a      	add	r2, r3
 80035d4:	b2d2      	uxtb	r2, r2
  if ( y1 >= p->total_height )
 80035d6:	4291      	cmp	r1, r2
 80035d8:	d801      	bhi.n	80035de <u8g_page_Next+0x24>
  {
    y1 = p->total_height;
    y1--;
 80035da:	1e4a      	subs	r2, r1, #1
 80035dc:	b2d2      	uxtb	r2, r2
  }
  p->page_y1 = y1;
 80035de:	70c2      	strb	r2, [r0, #3]
  
  return 1;
 80035e0:	2001      	movs	r0, #1
 80035e2:	4770      	bx	lr
    return 0;
 80035e4:	2000      	movs	r0, #0
}
 80035e6:	4770      	bx	lr

080035e8 <u8g_pb_Clear>:

#include "../Drivers/u8glib/inc/u8g.h"

void u8g_pb_Clear(u8g_pb_t *b)
{
  uint8_t *ptr = (uint8_t *)b->buf;
 80035e8:	6883      	ldr	r3, [r0, #8]
  uint8_t *end_ptr = ptr;
  end_ptr += b->width;
 80035ea:	7940      	ldrb	r0, [r0, #5]
 80035ec:	4418      	add	r0, r3
  do
  {
    *ptr++ = 0;
 80035ee:	1c5a      	adds	r2, r3, #1
 80035f0:	2100      	movs	r1, #0
 80035f2:	7019      	strb	r1, [r3, #0]
 80035f4:	4613      	mov	r3, r2
  } while( ptr != end_ptr );
 80035f6:	4290      	cmp	r0, r2
 80035f8:	d1f9      	bne.n	80035ee <u8g_pb_Clear+0x6>
}
 80035fa:	4770      	bx	lr

080035fc <u8g_pb_IsYIntersection>:
  return 0;
}
*/

uint8_t u8g_pb_IsYIntersection(u8g_pb_t *pb, u8g_uint_t v0, u8g_uint_t v1)
{
 80035fc:	b410      	push	{r4}
  uint8_t c1, c2, c3, tmp;
  c1 = v0 <= pb->p.page_y1;
 80035fe:	78c3      	ldrb	r3, [r0, #3]
 8003600:	428b      	cmp	r3, r1
 8003602:	bf34      	ite	cc
 8003604:	2300      	movcc	r3, #0
 8003606:	2301      	movcs	r3, #1
  c2 = v1 >= pb->p.page_y0;
 8003608:	7884      	ldrb	r4, [r0, #2]
  c3 = v0 > v1;
 800360a:	4291      	cmp	r1, r2
 800360c:	bf94      	ite	ls
 800360e:	2100      	movls	r1, #0
 8003610:	2101      	movhi	r1, #1
  tmp = c1;
  c1 &= c2;
  c2 &= c3;
  c3 &= tmp;
  c1 |= c2;
  c1 |= c3;
 8003612:	ea43 0001 	orr.w	r0, r3, r1
 8003616:	4294      	cmp	r4, r2
 8003618:	bf8c      	ite	hi
 800361a:	2000      	movhi	r0, #0
 800361c:	f000 0001 	andls.w	r0, r0, #1
 8003620:	400b      	ands	r3, r1
  return c1 & 1;
}
 8003622:	4318      	orrs	r0, r3
 8003624:	bc10      	pop	{r4}
 8003626:	4770      	bx	lr

08003628 <u8g_pb_GetPageBox>:
  return u8g_pb_IsXIntersection(pb, bbx->x, tmp);
}

void u8g_pb_GetPageBox(u8g_pb_t *pb, u8g_box_t *box)
{
  box->x0 = 0;
 8003628:	2300      	movs	r3, #0
 800362a:	700b      	strb	r3, [r1, #0]
  box->y0 = pb->p.page_y0;
 800362c:	7883      	ldrb	r3, [r0, #2]
 800362e:	704b      	strb	r3, [r1, #1]
  box->x1 = pb->width;
 8003630:	7943      	ldrb	r3, [r0, #5]
  box->x1--;
 8003632:	3b01      	subs	r3, #1
 8003634:	708b      	strb	r3, [r1, #2]
  box->y1 = pb->p.page_y1;
 8003636:	78c3      	ldrb	r3, [r0, #3]
 8003638:	70cb      	strb	r3, [r1, #3]
}
 800363a:	4770      	bx	lr

0800363c <u8g_pb_Is8PixelVisible>:


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
 800363c:	b508      	push	{r3, lr}
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
 800363e:	784b      	ldrb	r3, [r1, #1]
  v1 = v0;
  switch( arg_pixel->dir )
 8003640:	78ca      	ldrb	r2, [r1, #3]
 8003642:	2a01      	cmp	r2, #1
 8003644:	d003      	beq.n	800364e <u8g_pb_Is8PixelVisible+0x12>
 8003646:	2a03      	cmp	r2, #3
 8003648:	d008      	beq.n	800365c <u8g_pb_Is8PixelVisible+0x20>
  v1 = v0;
 800364a:	461a      	mov	r2, r3
 800364c:	e002      	b.n	8003654 <u8g_pb_Is8PixelVisible+0x18>
  {
    case 0:
      break;
    case 1:  
      v1 += 8;          /* this is independent from the page height */
 800364e:	f103 0208 	add.w	r2, r3, #8
 8003652:	b2d2      	uxtb	r2, r2
      break;
    case 3: 
      v0 -= 8;
      break;
  }
  return u8g_pb_IsYIntersection(b, v0, v1);
 8003654:	4619      	mov	r1, r3
 8003656:	f7ff ffd1 	bl	80035fc <u8g_pb_IsYIntersection>
}
 800365a:	bd08      	pop	{r3, pc}
      v0 -= 8;
 800365c:	f1a3 0108 	sub.w	r1, r3, #8
  v1 = v0;
 8003660:	461a      	mov	r2, r3
      v0 -= 8;
 8003662:	b2cb      	uxtb	r3, r1
      break;
 8003664:	e7f6      	b.n	8003654 <u8g_pb_Is8PixelVisible+0x18>

08003666 <u8g_pb_WriteBuffer>:



uint8_t u8g_pb_WriteBuffer(u8g_pb_t *b, u8g_t *u8g, u8g_dev_t *dev)
{
 8003666:	b510      	push	{r4, lr}
 8003668:	460c      	mov	r4, r1
 800366a:	4611      	mov	r1, r2
  return u8g_WriteSequence(u8g, dev, b->width, b->buf);  
 800366c:	6883      	ldr	r3, [r0, #8]
 800366e:	7942      	ldrb	r2, [r0, #5]
 8003670:	4620      	mov	r0, r4
 8003672:	f7ff fc05 	bl	8002e80 <u8g_WriteSequence>
}
 8003676:	bd10      	pop	{r4, pc}

08003678 <u8g_pb16v1_Clear>:
void u8g_pb16v1_Set8PixelStd(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel) U8G_NOINLINE;


void u8g_pb16v1_Clear(u8g_pb_t *b)
{
  uint8_t *ptr = (uint8_t *)b->buf;
 8003678:	6883      	ldr	r3, [r0, #8]
  uint8_t *end_ptr = ptr;
  end_ptr += b->width*2;
 800367a:	7940      	ldrb	r0, [r0, #5]
 800367c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  do
  {
    *ptr++ = 0;
 8003680:	1c5a      	adds	r2, r3, #1
 8003682:	2100      	movs	r1, #0
 8003684:	7019      	strb	r1, [r3, #0]
 8003686:	4613      	mov	r3, r2
  } while( ptr != end_ptr );
 8003688:	4290      	cmp	r0, r2
 800368a:	d1f9      	bne.n	8003680 <u8g_pb16v1_Clear+0x8>
}
 800368c:	4770      	bx	lr

0800368e <u8g_pb16v1_set_pixel>:
  b->width = width;
  u8g_pb16v1_Clear(b);
}

void u8g_pb16v1_set_pixel(u8g_pb_t *b, u8g_uint_t x, u8g_uint_t y, uint8_t color_index)
{
 800368e:	b430      	push	{r4, r5}
  register uint8_t mask;
  uint8_t *ptr = b->buf;
 8003690:	6885      	ldr	r5, [r0, #8]
  
  y -= b->p.page_y0;
 8003692:	7884      	ldrb	r4, [r0, #2]
 8003694:	1b12      	subs	r2, r2, r4
 8003696:	b2d2      	uxtb	r2, r2
  if ( y >= 8 )
 8003698:	2a07      	cmp	r2, #7
 800369a:	d903      	bls.n	80036a4 <u8g_pb16v1_set_pixel+0x16>
  {
    ptr += b->width;
 800369c:	7940      	ldrb	r0, [r0, #5]
 800369e:	4405      	add	r5, r0
    y &= 0x07;
 80036a0:	f002 0207 	and.w	r2, r2, #7
  }
  mask = 1;
  mask <<= y;
 80036a4:	2001      	movs	r0, #1
 80036a6:	fa00 f202 	lsl.w	r2, r0, r2
 80036aa:	b2d2      	uxtb	r2, r2
  ptr += x;
  if ( color_index )
 80036ac:	b92b      	cbnz	r3, 80036ba <u8g_pb16v1_set_pixel+0x2c>
    *ptr |= mask;
  }
  else
  {
    mask ^=0xff;
    *ptr &= mask;
 80036ae:	5c6b      	ldrb	r3, [r5, r1]
 80036b0:	ea23 0202 	bic.w	r2, r3, r2
 80036b4:	546a      	strb	r2, [r5, r1]
  }
}
 80036b6:	bc30      	pop	{r4, r5}
 80036b8:	4770      	bx	lr
    *ptr |= mask;
 80036ba:	5c6b      	ldrb	r3, [r5, r1]
 80036bc:	431a      	orrs	r2, r3
 80036be:	546a      	strb	r2, [r5, r1]
 80036c0:	e7f9      	b.n	80036b6 <u8g_pb16v1_set_pixel+0x28>

080036c2 <u8g_pb16v1_SetPixel>:


void u8g_pb16v1_SetPixel(u8g_pb_t *b, const u8g_dev_arg_pixel_t * const arg_pixel)
{
  if ( arg_pixel->y < b->p.page_y0 )
 80036c2:	784a      	ldrb	r2, [r1, #1]
 80036c4:	7883      	ldrb	r3, [r0, #2]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d30d      	bcc.n	80036e6 <u8g_pb16v1_SetPixel+0x24>
    return;
  if ( arg_pixel->y > b->p.page_y1 )
 80036ca:	78c3      	ldrb	r3, [r0, #3]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d80a      	bhi.n	80036e6 <u8g_pb16v1_SetPixel+0x24>
{
 80036d0:	b510      	push	{r4, lr}
    return;
  if ( arg_pixel->x >= b->width )
 80036d2:	780c      	ldrb	r4, [r1, #0]
 80036d4:	7943      	ldrb	r3, [r0, #5]
 80036d6:	429c      	cmp	r4, r3
 80036d8:	d300      	bcc.n	80036dc <u8g_pb16v1_SetPixel+0x1a>
    return;
  u8g_pb16v1_set_pixel(b, arg_pixel->x, arg_pixel->y, arg_pixel->color);
}
 80036da:	bd10      	pop	{r4, pc}
  u8g_pb16v1_set_pixel(b, arg_pixel->x, arg_pixel->y, arg_pixel->color);
 80036dc:	790b      	ldrb	r3, [r1, #4]
 80036de:	4621      	mov	r1, r4
 80036e0:	f7ff ffd5 	bl	800368e <u8g_pb16v1_set_pixel>
 80036e4:	e7f9      	b.n	80036da <u8g_pb16v1_SetPixel+0x18>
 80036e6:	4770      	bx	lr

080036e8 <u8g_pb16v1_Set8PixelOpt2>:
  } while( pixel != 0  );
}


void u8g_pb16v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
 80036e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036ec:	4680      	mov	r8, r0
 80036ee:	460d      	mov	r5, r1
  register uint8_t pixel = arg_pixel->pixel;
 80036f0:	788c      	ldrb	r4, [r1, #2]
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
  
  switch( arg_pixel->dir )
 80036f2:	78cb      	ldrb	r3, [r1, #3]
 80036f4:	2b03      	cmp	r3, #3
 80036f6:	d803      	bhi.n	8003700 <u8g_pb16v1_Set8PixelOpt2+0x18>
 80036f8:	e8df f003 	tbb	[pc, r3]
 80036fc:	0b08050e 	.word	0x0b08050e
  u8g_uint_t dy = 0;
 8003700:	2600      	movs	r6, #0
  u8g_uint_t dx = 0;
 8003702:	4637      	mov	r7, r6
 8003704:	e015      	b.n	8003732 <u8g_pb16v1_Set8PixelOpt2+0x4a>
  {
    case 0: dx++; break;
    case 1: dy++; break;
 8003706:	2601      	movs	r6, #1
  u8g_uint_t dx = 0;
 8003708:	2700      	movs	r7, #0
    case 1: dy++; break;
 800370a:	e012      	b.n	8003732 <u8g_pb16v1_Set8PixelOpt2+0x4a>
  u8g_uint_t dy = 0;
 800370c:	2600      	movs	r6, #0
    case 2: dx--; break;
 800370e:	27ff      	movs	r7, #255	; 0xff
 8003710:	e00f      	b.n	8003732 <u8g_pb16v1_Set8PixelOpt2+0x4a>
    case 3: dy--; break;
 8003712:	26ff      	movs	r6, #255	; 0xff
  u8g_uint_t dx = 0;
 8003714:	2700      	movs	r7, #0
    case 3: dy--; break;
 8003716:	e00c      	b.n	8003732 <u8g_pb16v1_Set8PixelOpt2+0x4a>
  u8g_uint_t dy = 0;
 8003718:	2600      	movs	r6, #0
    case 0: dx++; break;
 800371a:	2701      	movs	r7, #1
 800371c:	e009      	b.n	8003732 <u8g_pb16v1_Set8PixelOpt2+0x4a>
  
  do
  {
    if ( pixel & 128 )
      u8g_pb16v1_SetPixel(b, arg_pixel);
    arg_pixel->x += dx;
 800371e:	782b      	ldrb	r3, [r5, #0]
 8003720:	443b      	add	r3, r7
 8003722:	702b      	strb	r3, [r5, #0]
    arg_pixel->y += dy;
 8003724:	786b      	ldrb	r3, [r5, #1]
 8003726:	4433      	add	r3, r6
 8003728:	706b      	strb	r3, [r5, #1]
    pixel <<= 1;
 800372a:	0064      	lsls	r4, r4, #1
  } while( pixel != 0  );
 800372c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8003730:	d007      	beq.n	8003742 <u8g_pb16v1_Set8PixelOpt2+0x5a>
    if ( pixel & 128 )
 8003732:	f014 0f80 	tst.w	r4, #128	; 0x80
 8003736:	d0f2      	beq.n	800371e <u8g_pb16v1_Set8PixelOpt2+0x36>
      u8g_pb16v1_SetPixel(b, arg_pixel);
 8003738:	4629      	mov	r1, r5
 800373a:	4640      	mov	r0, r8
 800373c:	f7ff ffc1 	bl	80036c2 <u8g_pb16v1_SetPixel>
 8003740:	e7ed      	b.n	800371e <u8g_pb16v1_Set8PixelOpt2+0x36>
  
}
 8003742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003746 <u8g_dev_pb16v1_base_fn>:

uint8_t u8g_dev_pb16v1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 8003746:	b538      	push	{r3, r4, r5, lr}
 8003748:	461d      	mov	r5, r3
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
 800374a:	684c      	ldr	r4, [r1, #4]
  switch(msg)
 800374c:	3a14      	subs	r2, #20
 800374e:	2a33      	cmp	r2, #51	; 0x33
 8003750:	d84e      	bhi.n	80037f0 <u8g_dev_pb16v1_base_fn+0xaa>
 8003752:	e8df f002 	tbb	[pc, r2]
 8003756:	352d      	.short	0x352d
 8003758:	4d4d3f4d 	.word	0x4d4d3f4d
 800375c:	4d4d4d4d 	.word	0x4d4d4d4d
 8003760:	4d4d4d4d 	.word	0x4d4d4d4d
 8003764:	4d4d4d4d 	.word	0x4d4d4d4d
 8003768:	4d4d4d4d 	.word	0x4d4d4d4d
 800376c:	4d4d4d4d 	.word	0x4d4d4d4d
 8003770:	4d4d4d4d 	.word	0x4d4d4d4d
 8003774:	4d4d4d27 	.word	0x4d4d4d27
 8003778:	4d4d4d4d 	.word	0x4d4d4d4d
 800377c:	4d4d1a4d 	.word	0x4d4d1a4d
 8003780:	4d4d4d4d 	.word	0x4d4d4d4d
 8003784:	4d4d4d4d 	.word	0x4d4d4d4d
 8003788:	4945      	.short	0x4945
  {
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
 800378a:	4629      	mov	r1, r5
 800378c:	4620      	mov	r0, r4
 800378e:	f7ff ff55 	bl	800363c <u8g_pb_Is8PixelVisible>
 8003792:	b908      	cbnz	r0, 8003798 <u8g_dev_pb16v1_base_fn+0x52>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
 8003794:	2301      	movs	r3, #1
 8003796:	e02c      	b.n	80037f2 <u8g_dev_pb16v1_base_fn+0xac>
        u8g_pb16v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
 8003798:	4629      	mov	r1, r5
 800379a:	4620      	mov	r0, r4
 800379c:	f7ff ffa4 	bl	80036e8 <u8g_pb16v1_Set8PixelOpt2>
  return 1;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e026      	b.n	80037f2 <u8g_dev_pb16v1_base_fn+0xac>
        u8g_pb16v1_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
 80037a4:	4629      	mov	r1, r5
 80037a6:	4620      	mov	r0, r4
 80037a8:	f7ff ff8b 	bl	80036c2 <u8g_pb16v1_SetPixel>
  return 1;
 80037ac:	2301      	movs	r3, #1
      break;
 80037ae:	e020      	b.n	80037f2 <u8g_dev_pb16v1_base_fn+0xac>
      u8g_pb16v1_Clear(pb);
 80037b0:	4620      	mov	r0, r4
 80037b2:	f7ff ff61 	bl	8003678 <u8g_pb16v1_Clear>
      u8g_page_First(&(pb->p));
 80037b6:	4620      	mov	r0, r4
 80037b8:	f7ff fef8 	bl	80035ac <u8g_page_First>
  return 1;
 80037bc:	2301      	movs	r3, #1
      break;
 80037be:	e018      	b.n	80037f2 <u8g_dev_pb16v1_base_fn+0xac>
      if ( u8g_page_Next(&(pb->p)) == 0 )
 80037c0:	4620      	mov	r0, r4
 80037c2:	f7ff fefa 	bl	80035ba <u8g_page_Next>
 80037c6:	4603      	mov	r3, r0
 80037c8:	b198      	cbz	r0, 80037f2 <u8g_dev_pb16v1_base_fn+0xac>
      u8g_pb16v1_Clear(pb);
 80037ca:	4620      	mov	r0, r4
 80037cc:	f7ff ff54 	bl	8003678 <u8g_pb16v1_Clear>
  return 1;
 80037d0:	2301      	movs	r3, #1
      break;
 80037d2:	e00e      	b.n	80037f2 <u8g_dev_pb16v1_base_fn+0xac>
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
 80037d4:	4629      	mov	r1, r5
 80037d6:	4620      	mov	r0, r4
 80037d8:	f7ff ff26 	bl	8003628 <u8g_pb_GetPageBox>
  return 1;
 80037dc:	2301      	movs	r3, #1
      break;
 80037de:	e008      	b.n	80037f2 <u8g_dev_pb16v1_base_fn+0xac>
      *((u8g_uint_t *)arg) = pb->width;
 80037e0:	7963      	ldrb	r3, [r4, #5]
 80037e2:	702b      	strb	r3, [r5, #0]
  return 1;
 80037e4:	2301      	movs	r3, #1
      break;
 80037e6:	e004      	b.n	80037f2 <u8g_dev_pb16v1_base_fn+0xac>
      *((u8g_uint_t *)arg) = pb->p.total_height;
 80037e8:	7863      	ldrb	r3, [r4, #1]
 80037ea:	702b      	strb	r3, [r5, #0]
  return 1;
 80037ec:	2301      	movs	r3, #1
      break;
 80037ee:	e000      	b.n	80037f2 <u8g_dev_pb16v1_base_fn+0xac>
      return U8G_MODE_BW;
 80037f0:	2301      	movs	r3, #1
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	bd38      	pop	{r3, r4, r5, pc}

080037f6 <u8g_pb8v1_set_pixel>:
  b->width = width;
  u8g_pb_Clear(b);
}

void u8g_pb8v1_set_pixel(u8g_pb_t *b, u8g_uint_t x, u8g_uint_t y, uint8_t color_index)
{
 80037f6:	b410      	push	{r4}
  register uint8_t mask;
  uint8_t *ptr = b->buf;
 80037f8:	6884      	ldr	r4, [r0, #8]
  
  y -= b->p.page_y0;
 80037fa:	7880      	ldrb	r0, [r0, #2]
 80037fc:	1a10      	subs	r0, r2, r0
  mask = 1;
  y &= 0x07;
 80037fe:	f000 0007 	and.w	r0, r0, #7
  mask <<= y;
 8003802:	2201      	movs	r2, #1
 8003804:	4082      	lsls	r2, r0
 8003806:	b2d2      	uxtb	r2, r2
  ptr += x;
  if ( color_index )
 8003808:	b92b      	cbnz	r3, 8003816 <u8g_pb8v1_set_pixel+0x20>
    *ptr |= mask;
  }
  else
  {
    mask ^=0xff;
    *ptr &= mask;
 800380a:	5c63      	ldrb	r3, [r4, r1]
 800380c:	ea23 0202 	bic.w	r2, r3, r2
 8003810:	5462      	strb	r2, [r4, r1]
  }
}
 8003812:	bc10      	pop	{r4}
 8003814:	4770      	bx	lr
    *ptr |= mask;
 8003816:	5c63      	ldrb	r3, [r4, r1]
 8003818:	431a      	orrs	r2, r3
 800381a:	5462      	strb	r2, [r4, r1]
 800381c:	e7f9      	b.n	8003812 <u8g_pb8v1_set_pixel+0x1c>

0800381e <u8g_pb8v1_SetPixel>:


void u8g_pb8v1_SetPixel(u8g_pb_t *b, const u8g_dev_arg_pixel_t * const arg_pixel)
{
  if ( arg_pixel->y < b->p.page_y0 )
 800381e:	784a      	ldrb	r2, [r1, #1]
 8003820:	7883      	ldrb	r3, [r0, #2]
 8003822:	429a      	cmp	r2, r3
 8003824:	d30d      	bcc.n	8003842 <u8g_pb8v1_SetPixel+0x24>
    return;
  if ( arg_pixel->y > b->p.page_y1 )
 8003826:	78c3      	ldrb	r3, [r0, #3]
 8003828:	429a      	cmp	r2, r3
 800382a:	d80a      	bhi.n	8003842 <u8g_pb8v1_SetPixel+0x24>
{
 800382c:	b510      	push	{r4, lr}
    return;
  if ( arg_pixel->x >= b->width )
 800382e:	780c      	ldrb	r4, [r1, #0]
 8003830:	7943      	ldrb	r3, [r0, #5]
 8003832:	429c      	cmp	r4, r3
 8003834:	d300      	bcc.n	8003838 <u8g_pb8v1_SetPixel+0x1a>
    return;
  u8g_pb8v1_set_pixel(b, arg_pixel->x, arg_pixel->y, arg_pixel->color);
}
 8003836:	bd10      	pop	{r4, pc}
  u8g_pb8v1_set_pixel(b, arg_pixel->x, arg_pixel->y, arg_pixel->color);
 8003838:	790b      	ldrb	r3, [r1, #4]
 800383a:	4621      	mov	r1, r4
 800383c:	f7ff ffdb 	bl	80037f6 <u8g_pb8v1_set_pixel>
 8003840:	e7f9      	b.n	8003836 <u8g_pb8v1_SetPixel+0x18>
 8003842:	4770      	bx	lr

08003844 <u8g_pb8v1_Set8PixelOpt2>:
  } while( pixel != 0  );
}


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
 8003844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003848:	4680      	mov	r8, r0
 800384a:	460d      	mov	r5, r1
  register uint8_t pixel = arg_pixel->pixel;
 800384c:	788c      	ldrb	r4, [r1, #2]
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
  
  switch( arg_pixel->dir )
 800384e:	78cb      	ldrb	r3, [r1, #3]
 8003850:	2b03      	cmp	r3, #3
 8003852:	d803      	bhi.n	800385c <u8g_pb8v1_Set8PixelOpt2+0x18>
 8003854:	e8df f003 	tbb	[pc, r3]
 8003858:	0b08050e 	.word	0x0b08050e
  u8g_uint_t dy = 0;
 800385c:	2600      	movs	r6, #0
  u8g_uint_t dx = 0;
 800385e:	4637      	mov	r7, r6
 8003860:	e015      	b.n	800388e <u8g_pb8v1_Set8PixelOpt2+0x4a>
  {
    case 0: dx++; break;
    case 1: dy++; break;
 8003862:	2601      	movs	r6, #1
  u8g_uint_t dx = 0;
 8003864:	2700      	movs	r7, #0
    case 1: dy++; break;
 8003866:	e012      	b.n	800388e <u8g_pb8v1_Set8PixelOpt2+0x4a>
  u8g_uint_t dy = 0;
 8003868:	2600      	movs	r6, #0
    case 2: dx--; break;
 800386a:	27ff      	movs	r7, #255	; 0xff
 800386c:	e00f      	b.n	800388e <u8g_pb8v1_Set8PixelOpt2+0x4a>
    case 3: dy--; break;
 800386e:	26ff      	movs	r6, #255	; 0xff
  u8g_uint_t dx = 0;
 8003870:	2700      	movs	r7, #0
    case 3: dy--; break;
 8003872:	e00c      	b.n	800388e <u8g_pb8v1_Set8PixelOpt2+0x4a>
  u8g_uint_t dy = 0;
 8003874:	2600      	movs	r6, #0
    case 0: dx++; break;
 8003876:	2701      	movs	r7, #1
 8003878:	e009      	b.n	800388e <u8g_pb8v1_Set8PixelOpt2+0x4a>
  
  do
  {
    if ( pixel & 128 )
      u8g_pb8v1_SetPixel(b, arg_pixel);
    arg_pixel->x += dx;
 800387a:	782b      	ldrb	r3, [r5, #0]
 800387c:	443b      	add	r3, r7
 800387e:	702b      	strb	r3, [r5, #0]
    arg_pixel->y += dy;
 8003880:	786b      	ldrb	r3, [r5, #1]
 8003882:	4433      	add	r3, r6
 8003884:	706b      	strb	r3, [r5, #1]
    pixel <<= 1;
 8003886:	0064      	lsls	r4, r4, #1
  } while( pixel != 0  );
 8003888:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800388c:	d007      	beq.n	800389e <u8g_pb8v1_Set8PixelOpt2+0x5a>
    if ( pixel & 128 )
 800388e:	f014 0f80 	tst.w	r4, #128	; 0x80
 8003892:	d0f2      	beq.n	800387a <u8g_pb8v1_Set8PixelOpt2+0x36>
      u8g_pb8v1_SetPixel(b, arg_pixel);
 8003894:	4629      	mov	r1, r5
 8003896:	4640      	mov	r0, r8
 8003898:	f7ff ffc1 	bl	800381e <u8g_pb8v1_SetPixel>
 800389c:	e7ed      	b.n	800387a <u8g_pb8v1_Set8PixelOpt2+0x36>
  
}
 800389e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080038a2 <u8g_dev_pb8v1_base_fn>:

uint8_t u8g_dev_pb8v1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 80038a2:	b538      	push	{r3, r4, r5, lr}
 80038a4:	461d      	mov	r5, r3
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
 80038a6:	684c      	ldr	r4, [r1, #4]
  switch(msg)
 80038a8:	3a14      	subs	r2, #20
 80038aa:	2a33      	cmp	r2, #51	; 0x33
 80038ac:	d84e      	bhi.n	800394c <u8g_dev_pb8v1_base_fn+0xaa>
 80038ae:	e8df f002 	tbb	[pc, r2]
 80038b2:	352d      	.short	0x352d
 80038b4:	4d4d3f4d 	.word	0x4d4d3f4d
 80038b8:	4d4d4d4d 	.word	0x4d4d4d4d
 80038bc:	4d4d4d4d 	.word	0x4d4d4d4d
 80038c0:	4d4d4d4d 	.word	0x4d4d4d4d
 80038c4:	4d4d4d4d 	.word	0x4d4d4d4d
 80038c8:	4d4d4d4d 	.word	0x4d4d4d4d
 80038cc:	4d4d4d4d 	.word	0x4d4d4d4d
 80038d0:	4d4d4d27 	.word	0x4d4d4d27
 80038d4:	4d4d4d4d 	.word	0x4d4d4d4d
 80038d8:	4d4d1a4d 	.word	0x4d4d1a4d
 80038dc:	4d4d4d4d 	.word	0x4d4d4d4d
 80038e0:	4d4d4d4d 	.word	0x4d4d4d4d
 80038e4:	4945      	.short	0x4945
  {
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
 80038e6:	4629      	mov	r1, r5
 80038e8:	4620      	mov	r0, r4
 80038ea:	f7ff fea7 	bl	800363c <u8g_pb_Is8PixelVisible>
 80038ee:	b908      	cbnz	r0, 80038f4 <u8g_dev_pb8v1_base_fn+0x52>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e02c      	b.n	800394e <u8g_dev_pb8v1_base_fn+0xac>
        u8g_pb8v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
 80038f4:	4629      	mov	r1, r5
 80038f6:	4620      	mov	r0, r4
 80038f8:	f7ff ffa4 	bl	8003844 <u8g_pb8v1_Set8PixelOpt2>
  return 1;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e026      	b.n	800394e <u8g_dev_pb8v1_base_fn+0xac>
        u8g_pb8v1_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
 8003900:	4629      	mov	r1, r5
 8003902:	4620      	mov	r0, r4
 8003904:	f7ff ff8b 	bl	800381e <u8g_pb8v1_SetPixel>
  return 1;
 8003908:	2301      	movs	r3, #1
      break;
 800390a:	e020      	b.n	800394e <u8g_dev_pb8v1_base_fn+0xac>
      u8g_pb_Clear(pb);
 800390c:	4620      	mov	r0, r4
 800390e:	f7ff fe6b 	bl	80035e8 <u8g_pb_Clear>
      u8g_page_First(&(pb->p));
 8003912:	4620      	mov	r0, r4
 8003914:	f7ff fe4a 	bl	80035ac <u8g_page_First>
  return 1;
 8003918:	2301      	movs	r3, #1
      break;
 800391a:	e018      	b.n	800394e <u8g_dev_pb8v1_base_fn+0xac>
      if ( u8g_page_Next(&(pb->p)) == 0 )
 800391c:	4620      	mov	r0, r4
 800391e:	f7ff fe4c 	bl	80035ba <u8g_page_Next>
 8003922:	4603      	mov	r3, r0
 8003924:	b198      	cbz	r0, 800394e <u8g_dev_pb8v1_base_fn+0xac>
      u8g_pb_Clear(pb);
 8003926:	4620      	mov	r0, r4
 8003928:	f7ff fe5e 	bl	80035e8 <u8g_pb_Clear>
  return 1;
 800392c:	2301      	movs	r3, #1
      break;
 800392e:	e00e      	b.n	800394e <u8g_dev_pb8v1_base_fn+0xac>
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
 8003930:	4629      	mov	r1, r5
 8003932:	4620      	mov	r0, r4
 8003934:	f7ff fe78 	bl	8003628 <u8g_pb_GetPageBox>
  return 1;
 8003938:	2301      	movs	r3, #1
      break;
 800393a:	e008      	b.n	800394e <u8g_dev_pb8v1_base_fn+0xac>
      *((u8g_uint_t *)arg) = pb->width;
 800393c:	7963      	ldrb	r3, [r4, #5]
 800393e:	702b      	strb	r3, [r5, #0]
  return 1;
 8003940:	2301      	movs	r3, #1
      break;
 8003942:	e004      	b.n	800394e <u8g_dev_pb8v1_base_fn+0xac>
      *((u8g_uint_t *)arg) = pb->p.total_height;
 8003944:	7863      	ldrb	r3, [r4, #1]
 8003946:	702b      	strb	r3, [r5, #0]
  return 1;
 8003948:	2301      	movs	r3, #1
      break;
 800394a:	e000      	b.n	800394e <u8g_dev_pb8v1_base_fn+0xac>
      return U8G_MODE_BW;
 800394c:	2301      	movs	r3, #1
}
 800394e:	4618      	mov	r0, r3
 8003950:	bd38      	pop	{r3, r4, r5, pc}

08003952 <u8g_state_dummy_cb>:
#include "../Drivers/u8glib/inc/u8g.h"

void u8g_state_dummy_cb(uint8_t msg)
{
  /* the dummy procedure does nothing */
}
 8003952:	4770      	bx	lr

08003954 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(uint8_t command)
{
 8003954:	b570      	push	{r4, r5, r6, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	4605      	mov	r5, r0

	uint8_t buf = 0x1F;
 800395a:	ac02      	add	r4, sp, #8
 800395c:	231f      	movs	r3, #31
 800395e:	f804 3d01 	strb.w	r3, [r4, #-1]!
	HAL_SPI_Transmit(&hspi2, &buf, 1, HAL_MAX_DELAY);
 8003962:	4e0f      	ldr	r6, [pc, #60]	; (80039a0 <lcd_write_command+0x4c>)
 8003964:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003968:	2201      	movs	r2, #1
 800396a:	4621      	mov	r1, r4
 800396c:	4630      	mov	r0, r6
 800396e:	f7fe fc7d 	bl	800226c <HAL_SPI_Transmit>

	buf = command & 0x0F;
 8003972:	f005 030f 	and.w	r3, r5, #15
 8003976:	f88d 3007 	strb.w	r3, [sp, #7]
	HAL_SPI_Transmit(&hspi2 , &buf, 1, HAL_MAX_DELAY);
 800397a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800397e:	2201      	movs	r2, #1
 8003980:	4621      	mov	r1, r4
 8003982:	4630      	mov	r0, r6
 8003984:	f7fe fc72 	bl	800226c <HAL_SPI_Transmit>

	buf = (command >> 4) & 0x0F;
 8003988:	092d      	lsrs	r5, r5, #4
 800398a:	f88d 5007 	strb.w	r5, [sp, #7]
	HAL_SPI_Transmit(&hspi2 , &buf , 1, HAL_MAX_DELAY);
 800398e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003992:	2201      	movs	r2, #1
 8003994:	4621      	mov	r1, r4
 8003996:	4630      	mov	r0, r6
 8003998:	f7fe fc68 	bl	800226c <HAL_SPI_Transmit>

}
 800399c:	b002      	add	sp, #8
 800399e:	bd70      	pop	{r4, r5, r6, pc}
 80039a0:	20000530 	.word	0x20000530

080039a4 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(uint8_t data)
{
 80039a4:	b570      	push	{r4, r5, r6, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	4605      	mov	r5, r0
	uint8_t buf = 0x5F;
 80039aa:	ac02      	add	r4, sp, #8
 80039ac:	235f      	movs	r3, #95	; 0x5f
 80039ae:	f804 3d01 	strb.w	r3, [r4, #-1]!
	HAL_SPI_Transmit(&hspi2, &buf, 1,10);
 80039b2:	4e0e      	ldr	r6, [pc, #56]	; (80039ec <lcd_write_data+0x48>)
 80039b4:	230a      	movs	r3, #10
 80039b6:	2201      	movs	r2, #1
 80039b8:	4621      	mov	r1, r4
 80039ba:	4630      	mov	r0, r6
 80039bc:	f7fe fc56 	bl	800226c <HAL_SPI_Transmit>

	buf = data & 0x0F;
 80039c0:	f005 030f 	and.w	r3, r5, #15
 80039c4:	f88d 3007 	strb.w	r3, [sp, #7]
	HAL_SPI_Transmit(&hspi2 , &buf, 1, 10);
 80039c8:	230a      	movs	r3, #10
 80039ca:	2201      	movs	r2, #1
 80039cc:	4621      	mov	r1, r4
 80039ce:	4630      	mov	r0, r6
 80039d0:	f7fe fc4c 	bl	800226c <HAL_SPI_Transmit>

	buf = (data >> 4) & 0x0F;
 80039d4:	092d      	lsrs	r5, r5, #4
 80039d6:	f88d 5007 	strb.w	r5, [sp, #7]
	HAL_SPI_Transmit(&hspi2 , &buf , 1, 10);
 80039da:	230a      	movs	r3, #10
 80039dc:	2201      	movs	r2, #1
 80039de:	4621      	mov	r1, r4
 80039e0:	4630      	mov	r0, r6
 80039e2:	f7fe fc43 	bl	800226c <HAL_SPI_Transmit>
}
 80039e6:	b002      	add	sp, #8
 80039e8:	bd70      	pop	{r4, r5, r6, pc}
 80039ea:	bf00      	nop
 80039ec:	20000530 	.word	0x20000530

080039f0 <Lcd_init>:
void Lcd_init() {
 80039f0:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET); // Podciagniecie RST
 80039f2:	4c40      	ldr	r4, [pc, #256]	; (8003af4 <Lcd_init+0x104>)
 80039f4:	2201      	movs	r2, #1
 80039f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80039fa:	4620      	mov	r0, r4
 80039fc:	f7fd fc72 	bl	80012e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // Podciagniecie DC do zera
 8003a00:	2200      	movs	r2, #0
 8003a02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003a06:	4620      	mov	r0, r4
 8003a08:	f7fd fc6c 	bl	80012e4 <HAL_GPIO_WritePin>
	lcd_write_command(0x80);
 8003a0c:	2080      	movs	r0, #128	; 0x80
 8003a0e:	f7ff ffa1 	bl	8003954 <lcd_write_command>
	lcd_write_command(0x2A); /* **** Set "RE"=1  00101010B */
 8003a12:	202a      	movs	r0, #42	; 0x2a
 8003a14:	f7ff ff9e 	bl	8003954 <lcd_write_command>
	lcd_write_command(0x71);
 8003a18:	2071      	movs	r0, #113	; 0x71
 8003a1a:	f7ff ff9b 	bl	8003954 <lcd_write_command>
	lcd_write_command(0xC0);
 8003a1e:	20c0      	movs	r0, #192	; 0xc0
 8003a20:	f7ff ff98 	bl	8003954 <lcd_write_command>
	lcd_write_command(0x00);
 8003a24:	2000      	movs	r0, #0
 8003a26:	f7ff ff95 	bl	8003954 <lcd_write_command>
	lcd_write_command(0x28);
 8003a2a:	2028      	movs	r0, #40	; 0x28
 8003a2c:	f7ff ff92 	bl	8003954 <lcd_write_command>
	lcd_write_command(0x08); /* **** Set Sleep Mode On     */
 8003a30:	2008      	movs	r0, #8
 8003a32:	f7ff ff8f 	bl	8003954 <lcd_write_command>
	lcd_write_command(0x2A); /* **** Set "RE"=1  00101010B */
 8003a36:	202a      	movs	r0, #42	; 0x2a
 8003a38:	f7ff ff8c 	bl	8003954 <lcd_write_command>
	lcd_write_command(0x79); /* **** Set "SD"=1  01111001B */
 8003a3c:	2079      	movs	r0, #121	; 0x79
 8003a3e:	f7ff ff89 	bl	8003954 <lcd_write_command>
	lcd_write_command(0xD5);
 8003a42:	20d5      	movs	r0, #213	; 0xd5
 8003a44:	f7ff ff86 	bl	8003954 <lcd_write_command>
	lcd_write_command(0x70);
 8003a48:	2070      	movs	r0, #112	; 0x70
 8003a4a:	f7ff ff83 	bl	8003954 <lcd_write_command>
	lcd_write_command(0x78); /* **** Set "SD"=0            */
 8003a4e:	2078      	movs	r0, #120	; 0x78
 8003a50:	f7ff ff80 	bl	8003954 <lcd_write_command>
	lcd_write_command(0x08);
 8003a54:	2008      	movs	r0, #8
 8003a56:	f7ff ff7d 	bl	8003954 <lcd_write_command>
	lcd_write_command(0x06); /* **** Set Com31-->Com0  Seg0-->Seg99 */
 8003a5a:	2006      	movs	r0, #6
 8003a5c:	f7ff ff7a 	bl	8003954 <lcd_write_command>
	lcd_write_command(0x72);
 8003a60:	2072      	movs	r0, #114	; 0x72
 8003a62:	f7ff ff77 	bl	8003954 <lcd_write_command>
	lcd_write_command(0xC0);
 8003a66:	20c0      	movs	r0, #192	; 0xc0
 8003a68:	f7ff ff74 	bl	8003954 <lcd_write_command>
	lcd_write_command(0x01);
 8003a6c:	2001      	movs	r0, #1
 8003a6e:	f7ff ff71 	bl	8003954 <lcd_write_command>
	lcd_write_command(0x2A); /* **** Set "RE"=1  */
 8003a72:	202a      	movs	r0, #42	; 0x2a
 8003a74:	f7ff ff6e 	bl	8003954 <lcd_write_command>
	lcd_write_command(0x79); /* **** Set "SD"=1 */
 8003a78:	2079      	movs	r0, #121	; 0x79
 8003a7a:	f7ff ff6b 	bl	8003954 <lcd_write_command>
	lcd_write_command(0xDC); /* **** Set ROM */
 8003a7e:	20dc      	movs	r0, #220	; 0xdc
 8003a80:	f7ff ff68 	bl	8003954 <lcd_write_command>
	lcd_write_command(0x00); /* **** Set ROM A and 8 CGRAM */
 8003a84:	2000      	movs	r0, #0
 8003a86:	f7ff ff65 	bl	8003954 <lcd_write_command>
	lcd_write_command(0xDA); /* **** Set Seg Pins HW Config */
 8003a8a:	20da      	movs	r0, #218	; 0xda
 8003a8c:	f7ff ff62 	bl	8003954 <lcd_write_command>
	lcd_write_command(0x10);
 8003a90:	2010      	movs	r0, #16
 8003a92:	f7ff ff5f 	bl	8003954 <lcd_write_command>
	lcd_write_command(0x81); /* **** Set Contrast */
 8003a96:	2081      	movs	r0, #129	; 0x81
 8003a98:	f7ff ff5c 	bl	8003954 <lcd_write_command>
	lcd_write_command(0xD9);
 8003a9c:	20d9      	movs	r0, #217	; 0xd9
 8003a9e:	f7ff ff59 	bl	8003954 <lcd_write_command>
	lcd_write_command(0x8F); /* **** Set Contrast */
 8003aa2:	208f      	movs	r0, #143	; 0x8f
 8003aa4:	f7ff ff56 	bl	8003954 <lcd_write_command>
	lcd_write_command(0xF1);
 8003aa8:	20f1      	movs	r0, #241	; 0xf1
 8003aaa:	f7ff ff53 	bl	8003954 <lcd_write_command>
	lcd_write_command(0xDB); /* **** Set VCOM deselect level */
 8003aae:	20db      	movs	r0, #219	; 0xdb
 8003ab0:	f7ff ff50 	bl	8003954 <lcd_write_command>
	lcd_write_command(0x30); /* **** VCC x 0.83              */
 8003ab4:	2030      	movs	r0, #48	; 0x30
 8003ab6:	f7ff ff4d 	bl	8003954 <lcd_write_command>
	lcd_write_command(0xDC); /* *Set gpio -turn EN for 15V generator on. */
 8003aba:	20dc      	movs	r0, #220	; 0xdc
 8003abc:	f7ff ff4a 	bl	8003954 <lcd_write_command>
	lcd_write_command(0x03);
 8003ac0:	2003      	movs	r0, #3
 8003ac2:	f7ff ff47 	bl	8003954 <lcd_write_command>
	lcd_write_command(0x78); /* **** Exiting Set OLED Characterization */
 8003ac6:	2078      	movs	r0, #120	; 0x78
 8003ac8:	f7ff ff44 	bl	8003954 <lcd_write_command>
	lcd_write_command(0x28);
 8003acc:	2028      	movs	r0, #40	; 0x28
 8003ace:	f7ff ff41 	bl	8003954 <lcd_write_command>
	lcd_write_command(0x06); /* **** Set Entry Mode */
 8003ad2:	2006      	movs	r0, #6
 8003ad4:	f7ff ff3e 	bl	8003954 <lcd_write_command>
	lcd_write_command(0x28); /* **** Set "IS"=0 , "RE" =0 /28 */
 8003ad8:	2028      	movs	r0, #40	; 0x28
 8003ada:	f7ff ff3b 	bl	8003954 <lcd_write_command>
	lcd_write_command(0x01);
 8003ade:	2001      	movs	r0, #1
 8003ae0:	f7ff ff38 	bl	8003954 <lcd_write_command>
	lcd_write_command(0x80); /* Set DDRAM Address to 0x80 (line 1 start)*/
 8003ae4:	2080      	movs	r0, #128	; 0x80
 8003ae6:	f7ff ff35 	bl	8003954 <lcd_write_command>
	lcd_write_command(0x0C); /* **** Turn on Display */
 8003aea:	200c      	movs	r0, #12
 8003aec:	f7ff ff32 	bl	8003954 <lcd_write_command>
}
 8003af0:	bd10      	pop	{r4, pc}
 8003af2:	bf00      	nop
 8003af4:	40010c00 	.word	0x40010c00

08003af8 <Lcd_clr>:
{
 8003af8:	b508      	push	{r3, lr}
	lcd_write_command(CLEAR_DISPLAY);
 8003afa:	2001      	movs	r0, #1
 8003afc:	f7ff ff2a 	bl	8003954 <lcd_write_command>
	lcd_write_command(RETURN_HOME);
 8003b00:	2002      	movs	r0, #2
 8003b02:	f7ff ff27 	bl	8003954 <lcd_write_command>
}
 8003b06:	bd08      	pop	{r3, pc}

08003b08 <Lcd_string>:
{
 8003b08:	b538      	push	{r3, r4, r5, lr}
 8003b0a:	4605      	mov	r5, r0
	for(uint8_t i = 0; i < strlen(string); i++)
 8003b0c:	2400      	movs	r4, #0
 8003b0e:	e004      	b.n	8003b1a <Lcd_string+0x12>
		lcd_write_data(string[i]);
 8003b10:	5d28      	ldrb	r0, [r5, r4]
 8003b12:	f7ff ff47 	bl	80039a4 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8003b16:	3401      	adds	r4, #1
 8003b18:	b2e4      	uxtb	r4, r4
 8003b1a:	4628      	mov	r0, r5
 8003b1c:	f7fc fb84 	bl	8000228 <strlen>
 8003b20:	4284      	cmp	r4, r0
 8003b22:	d3f5      	bcc.n	8003b10 <Lcd_string+0x8>
}
 8003b24:	bd38      	pop	{r3, r4, r5, pc}
	...

08003b28 <Lcd_int>:
{
 8003b28:	b500      	push	{lr}
 8003b2a:	b085      	sub	sp, #20
	sprintf(buffer, "%d", number);
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	4905      	ldr	r1, [pc, #20]	; (8003b44 <Lcd_int+0x1c>)
 8003b30:	a801      	add	r0, sp, #4
 8003b32:	f001 ffc1 	bl	8005ab8 <siprintf>
	Lcd_string(buffer);
 8003b36:	a801      	add	r0, sp, #4
 8003b38:	f7ff ffe6 	bl	8003b08 <Lcd_string>
}
 8003b3c:	b005      	add	sp, #20
 8003b3e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b42:	bf00      	nop
 8003b44:	0800a430 	.word	0x0800a430

08003b48 <Lcd_cursor>:
{
 8003b48:	b508      	push	{r3, lr}
	lcd_write_command(SET_DDRAM_ADDR | ((row * 0x40) + col));
 8003b4a:	eb01 1080 	add.w	r0, r1, r0, lsl #6
 8003b4e:	b240      	sxtb	r0, r0
 8003b50:	f060 007f 	orn	r0, r0, #127	; 0x7f
 8003b54:	b2c0      	uxtb	r0, r0
 8003b56:	f7ff fefd 	bl	8003954 <lcd_write_command>
}
 8003b5a:	bd08      	pop	{r3, pc}

08003b5c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8003b5c:	b508      	push	{r3, lr}

  hcan.Instance = CAN1;
 8003b5e:	480d      	ldr	r0, [pc, #52]	; (8003b94 <MX_CAN_Init+0x38>)
 8003b60:	4b0d      	ldr	r3, [pc, #52]	; (8003b98 <MX_CAN_Init+0x3c>)
 8003b62:	6003      	str	r3, [r0, #0]
  hcan.Init.Prescaler = 8;
 8003b64:	2308      	movs	r3, #8
 8003b66:	6043      	str	r3, [r0, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	6083      	str	r3, [r0, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003b6c:	60c3      	str	r3, [r0, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 8003b6e:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8003b72:	6102      	str	r2, [r0, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 8003b74:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003b78:	6142      	str	r2, [r0, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8003b7a:	7603      	strb	r3, [r0, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8003b7c:	7643      	strb	r3, [r0, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8003b7e:	7683      	strb	r3, [r0, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8003b80:	76c3      	strb	r3, [r0, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8003b82:	7703      	strb	r3, [r0, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8003b84:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8003b86:	f7fd f869 	bl	8000c5c <HAL_CAN_Init>
 8003b8a:	b900      	cbnz	r0, 8003b8e <MX_CAN_Init+0x32>
  {
    Error_Handler();
  }

}
 8003b8c:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003b8e:	f000 ff93 	bl	8004ab8 <Error_Handler>
}
 8003b92:	e7fb      	b.n	8003b8c <MX_CAN_Init+0x30>
 8003b94:	200003fc 	.word	0x200003fc
 8003b98:	40006400 	.word	0x40006400

08003b9c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8003b9c:	b510      	push	{r4, lr}
 8003b9e:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	9302      	str	r3, [sp, #8]
 8003ba4:	9303      	str	r3, [sp, #12]
 8003ba6:	9304      	str	r3, [sp, #16]
 8003ba8:	9305      	str	r3, [sp, #20]
  if(canHandle->Instance==CAN1)
 8003baa:	6802      	ldr	r2, [r0, #0]
 8003bac:	4b27      	ldr	r3, [pc, #156]	; (8003c4c <HAL_CAN_MspInit+0xb0>)
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d001      	beq.n	8003bb6 <HAL_CAN_MspInit+0x1a>



  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8003bb2:	b006      	add	sp, #24
 8003bb4:	bd10      	pop	{r4, pc}
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003bb6:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 8003bba:	69da      	ldr	r2, [r3, #28]
 8003bbc:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003bc0:	61da      	str	r2, [r3, #28]
 8003bc2:	69da      	ldr	r2, [r3, #28]
 8003bc4:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8003bc8:	9200      	str	r2, [sp, #0]
 8003bca:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bcc:	699a      	ldr	r2, [r3, #24]
 8003bce:	f042 0204 	orr.w	r2, r2, #4
 8003bd2:	619a      	str	r2, [r3, #24]
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	f003 0304 	and.w	r3, r3, #4
 8003bda:	9301      	str	r3, [sp, #4]
 8003bdc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003bde:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003be2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003be4:	2301      	movs	r3, #1
 8003be6:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003be8:	4c19      	ldr	r4, [pc, #100]	; (8003c50 <HAL_CAN_MspInit+0xb4>)
 8003bea:	a902      	add	r1, sp, #8
 8003bec:	4620      	mov	r0, r4
 8003bee:	f7fd fa7f 	bl	80010f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003bf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bf6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c00:	a902      	add	r1, sp, #8
 8003c02:	4620      	mov	r0, r4
 8003c04:	f7fd fa74 	bl	80010f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8003c08:	2200      	movs	r2, #0
 8003c0a:	4611      	mov	r1, r2
 8003c0c:	2013      	movs	r0, #19
 8003c0e:	f7fd fa17 	bl	8001040 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8003c12:	2013      	movs	r0, #19
 8003c14:	f7fd fa48 	bl	80010a8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003c18:	2200      	movs	r2, #0
 8003c1a:	4611      	mov	r1, r2
 8003c1c:	2014      	movs	r0, #20
 8003c1e:	f7fd fa0f 	bl	8001040 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8003c22:	2014      	movs	r0, #20
 8003c24:	f7fd fa40 	bl	80010a8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8003c28:	2200      	movs	r2, #0
 8003c2a:	4611      	mov	r1, r2
 8003c2c:	2015      	movs	r0, #21
 8003c2e:	f7fd fa07 	bl	8001040 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8003c32:	2015      	movs	r0, #21
 8003c34:	f7fd fa38 	bl	80010a8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8003c38:	2200      	movs	r2, #0
 8003c3a:	4611      	mov	r1, r2
 8003c3c:	2016      	movs	r0, #22
 8003c3e:	f7fd f9ff 	bl	8001040 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8003c42:	2016      	movs	r0, #22
 8003c44:	f7fd fa30 	bl	80010a8 <HAL_NVIC_EnableIRQ>
}
 8003c48:	e7b3      	b.n	8003bb2 <HAL_CAN_MspInit+0x16>
 8003c4a:	bf00      	nop
 8003c4c:	40006400 	.word	0x40006400
 8003c50:	40010800 	.word	0x40010800

08003c54 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8003c54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003c58:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c5a:	2400      	movs	r4, #0
 8003c5c:	9404      	str	r4, [sp, #16]
 8003c5e:	9405      	str	r4, [sp, #20]
 8003c60:	9406      	str	r4, [sp, #24]
 8003c62:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c64:	4b3a      	ldr	r3, [pc, #232]	; (8003d50 <MX_GPIO_Init+0xfc>)
 8003c66:	699a      	ldr	r2, [r3, #24]
 8003c68:	f042 0210 	orr.w	r2, r2, #16
 8003c6c:	619a      	str	r2, [r3, #24]
 8003c6e:	699a      	ldr	r2, [r3, #24]
 8003c70:	f002 0210 	and.w	r2, r2, #16
 8003c74:	9200      	str	r2, [sp, #0]
 8003c76:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c78:	699a      	ldr	r2, [r3, #24]
 8003c7a:	f042 0220 	orr.w	r2, r2, #32
 8003c7e:	619a      	str	r2, [r3, #24]
 8003c80:	699a      	ldr	r2, [r3, #24]
 8003c82:	f002 0220 	and.w	r2, r2, #32
 8003c86:	9201      	str	r2, [sp, #4]
 8003c88:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c8a:	699a      	ldr	r2, [r3, #24]
 8003c8c:	f042 0204 	orr.w	r2, r2, #4
 8003c90:	619a      	str	r2, [r3, #24]
 8003c92:	699a      	ldr	r2, [r3, #24]
 8003c94:	f002 0204 	and.w	r2, r2, #4
 8003c98:	9202      	str	r2, [sp, #8]
 8003c9a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c9c:	699a      	ldr	r2, [r3, #24]
 8003c9e:	f042 0208 	orr.w	r2, r2, #8
 8003ca2:	619a      	str	r2, [r3, #24]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	f003 0308 	and.w	r3, r3, #8
 8003caa:	9303      	str	r3, [sp, #12]
 8003cac:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8003cae:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8003d5c <MX_GPIO_Init+0x108>
 8003cb2:	4622      	mov	r2, r4
 8003cb4:	f44f 41a6 	mov.w	r1, #21248	; 0x5300
 8003cb8:	4640      	mov	r0, r8
 8003cba:	f7fd fb13 	bl	80012e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);
 8003cbe:	4f25      	ldr	r7, [pc, #148]	; (8003d54 <MX_GPIO_Init+0x100>)
 8003cc0:	4622      	mov	r2, r4
 8003cc2:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8003cc6:	4638      	mov	r0, r7
 8003cc8:	f7fd fb0c 	bl	80012e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8003ccc:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8003d60 <MX_GPIO_Init+0x10c>
 8003cd0:	4622      	mov	r2, r4
 8003cd2:	2104      	movs	r1, #4
 8003cd4:	4648      	mov	r0, r9
 8003cd6:	f7fd fb05 	bl	80012e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC4 PC5 PC6
                           PC7 PC8 PC9 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8003cda:	f642 33ff 	movw	r3, #11263	; 0x2bff
 8003cde:	9304      	str	r3, [sp, #16]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ce0:	2503      	movs	r5, #3
 8003ce2:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ce4:	a904      	add	r1, sp, #16
 8003ce6:	4638      	mov	r0, r7
 8003ce8:	f7fd fa02 	bl	80010f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8003cec:	f248 1333 	movw	r3, #33075	; 0x8133
 8003cf0:	9304      	str	r3, [sp, #16]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003cf2:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cf4:	a904      	add	r1, sp, #16
 8003cf6:	4818      	ldr	r0, [pc, #96]	; (8003d58 <MX_GPIO_Init+0x104>)
 8003cf8:	f7fd f9fa 	bl	80010f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4;
 8003cfc:	2316      	movs	r3, #22
 8003cfe:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d00:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d02:	a904      	add	r1, sp, #16
 8003d04:	4640      	mov	r0, r8
 8003d06:	f7fd f9f3 	bl	80010f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB14 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_8|GPIO_PIN_9;
 8003d0a:	f44f 43a6 	mov.w	r3, #21248	; 0x5300
 8003d0e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d10:	2601      	movs	r6, #1
 8003d12:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d14:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d16:	2502      	movs	r5, #2
 8003d18:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d1a:	a904      	add	r1, sp, #16
 8003d1c:	4640      	mov	r0, r8
 8003d1e:	f7fd f9e7 	bl	80010f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8003d22:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003d26:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d28:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d2a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d2c:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d2e:	a904      	add	r1, sp, #16
 8003d30:	4638      	mov	r0, r7
 8003d32:	f7fd f9dd 	bl	80010f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003d36:	2304      	movs	r3, #4
 8003d38:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d3a:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d3c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d3e:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d40:	a904      	add	r1, sp, #16
 8003d42:	4648      	mov	r0, r9
 8003d44:	f7fd f9d4 	bl	80010f0 <HAL_GPIO_Init>

}
 8003d48:	b009      	add	sp, #36	; 0x24
 8003d4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003d4e:	bf00      	nop
 8003d50:	40021000 	.word	0x40021000
 8003d54:	40011000 	.word	0x40011000
 8003d58:	40010800 	.word	0x40010800
 8003d5c:	40010c00 	.word	0x40010c00
 8003d60:	40011400 	.word	0x40011400

08003d64 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003d64:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8003d66:	480b      	ldr	r0, [pc, #44]	; (8003d94 <MX_I2C1_Init+0x30>)
 8003d68:	4b0b      	ldr	r3, [pc, #44]	; (8003d98 <MX_I2C1_Init+0x34>)
 8003d6a:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003d6c:	4b0b      	ldr	r3, [pc, #44]	; (8003d9c <MX_I2C1_Init+0x38>)
 8003d6e:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003d70:	2300      	movs	r3, #0
 8003d72:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003d74:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003d76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d7a:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003d7c:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003d7e:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003d80:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003d82:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003d84:	f7fd fc64 	bl	8001650 <HAL_I2C_Init>
 8003d88:	b900      	cbnz	r0, 8003d8c <MX_I2C1_Init+0x28>
  {
    Error_Handler();
  }

}
 8003d8a:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003d8c:	f000 fe94 	bl	8004ab8 <Error_Handler>
}
 8003d90:	e7fb      	b.n	8003d8a <MX_I2C1_Init+0x26>
 8003d92:	bf00      	nop
 8003d94:	20000424 	.word	0x20000424
 8003d98:	40005400 	.word	0x40005400
 8003d9c:	00061a80 	.word	0x00061a80

08003da0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003da0:	b510      	push	{r4, lr}
 8003da2:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003da4:	2300      	movs	r3, #0
 8003da6:	9302      	str	r3, [sp, #8]
 8003da8:	9303      	str	r3, [sp, #12]
 8003daa:	9304      	str	r3, [sp, #16]
 8003dac:	9305      	str	r3, [sp, #20]
  if(i2cHandle->Instance==I2C1)
 8003dae:	6802      	ldr	r2, [r0, #0]
 8003db0:	4b11      	ldr	r3, [pc, #68]	; (8003df8 <HAL_I2C_MspInit+0x58>)
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d001      	beq.n	8003dba <HAL_I2C_MspInit+0x1a>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003db6:	b006      	add	sp, #24
 8003db8:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dba:	4c10      	ldr	r4, [pc, #64]	; (8003dfc <HAL_I2C_MspInit+0x5c>)
 8003dbc:	69a3      	ldr	r3, [r4, #24]
 8003dbe:	f043 0308 	orr.w	r3, r3, #8
 8003dc2:	61a3      	str	r3, [r4, #24]
 8003dc4:	69a3      	ldr	r3, [r4, #24]
 8003dc6:	f003 0308 	and.w	r3, r3, #8
 8003dca:	9300      	str	r3, [sp, #0]
 8003dcc:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003dce:	23c0      	movs	r3, #192	; 0xc0
 8003dd0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003dd2:	2312      	movs	r3, #18
 8003dd4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dda:	a902      	add	r1, sp, #8
 8003ddc:	4808      	ldr	r0, [pc, #32]	; (8003e00 <HAL_I2C_MspInit+0x60>)
 8003dde:	f7fd f987 	bl	80010f0 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003de2:	69e3      	ldr	r3, [r4, #28]
 8003de4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003de8:	61e3      	str	r3, [r4, #28]
 8003dea:	69e3      	ldr	r3, [r4, #28]
 8003dec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003df0:	9301      	str	r3, [sp, #4]
 8003df2:	9b01      	ldr	r3, [sp, #4]
}
 8003df4:	e7df      	b.n	8003db6 <HAL_I2C_MspInit+0x16>
 8003df6:	bf00      	nop
 8003df8:	40005400 	.word	0x40005400
 8003dfc:	40021000 	.word	0x40021000
 8003e00:	40010c00 	.word	0x40010c00

08003e04 <display_battery>:
#include "../Drivers/u8glib/inc/u8g.h"
#include "../Drivers/u8glib/inc/u8g_arm.h"
#include "../Drivers/u8glib/pictures.h"

void display_battery(double value) //USE OLED #1 (LEFT) to display battery level
{
 8003e04:	b570      	push	{r4, r5, r6, lr}
 8003e06:	b088      	sub	sp, #32
 8003e08:	4604      	mov	r4, r0
 8003e0a:	460d      	mov	r5, r1
	char output[10] = "";
 8003e0c:	2600      	movs	r6, #0
 8003e0e:	9605      	str	r6, [sp, #20]
 8003e10:	9606      	str	r6, [sp, #24]
 8003e12:	f8ad 601c 	strh.w	r6, [sp, #28]
	snprintf(output, 10, "%4.1f", value); //Convert to string and format
 8003e16:	e9cd 4500 	strd	r4, r5, [sp]
 8003e1a:	4a17      	ldr	r2, [pc, #92]	; (8003e78 <display_battery+0x74>)
 8003e1c:	210a      	movs	r1, #10
 8003e1e:	a805      	add	r0, sp, #20
 8003e20:	f001 fe16 	bl	8005a50 <sniprintf>

	HAL_I2C_Mem_Write(&hi2c1, 0xE0, 4, 1, 0, 0, 10); //USTAW ADRES
 8003e24:	230a      	movs	r3, #10
 8003e26:	9302      	str	r3, [sp, #8]
 8003e28:	9601      	str	r6, [sp, #4]
 8003e2a:	9600      	str	r6, [sp, #0]
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	2204      	movs	r2, #4
 8003e30:	21e0      	movs	r1, #224	; 0xe0
 8003e32:	4812      	ldr	r0, [pc, #72]	; (8003e7c <display_battery+0x78>)
 8003e34:	f7fd fd96 	bl	8001964 <HAL_I2C_Mem_Write>
	//u8g_small.font = u8g_font_fub30r;

	u8g_FirstPage(&u8g_small);
 8003e38:	4811      	ldr	r0, [pc, #68]	; (8003e80 <display_battery+0x7c>)
 8003e3a:	f7ff fb62 	bl	8003502 <u8g_FirstPage>
 8003e3e:	e009      	b.n	8003e54 <display_battery+0x50>
		{
			u8g_DrawStr(&u8g_small, 31, 32, output);
		}
		else
		{
			u8g_DrawStr(&u8g_small, 20, 32, output);
 8003e40:	ab05      	add	r3, sp, #20
 8003e42:	2220      	movs	r2, #32
 8003e44:	2114      	movs	r1, #20
 8003e46:	480e      	ldr	r0, [pc, #56]	; (8003e80 <display_battery+0x7c>)
 8003e48:	f7ff fa84 	bl	8003354 <u8g_DrawStr>
		}

	} while ( u8g_NextPage(&u8g_small) );
 8003e4c:	480c      	ldr	r0, [pc, #48]	; (8003e80 <display_battery+0x7c>)
 8003e4e:	f7ff fb5d 	bl	800350c <u8g_NextPage>
 8003e52:	b170      	cbz	r0, 8003e72 <display_battery+0x6e>
		if(value <=9)
 8003e54:	2200      	movs	r2, #0
 8003e56:	4b0b      	ldr	r3, [pc, #44]	; (8003e84 <display_battery+0x80>)
 8003e58:	4620      	mov	r0, r4
 8003e5a:	4629      	mov	r1, r5
 8003e5c:	f7fc fe24 	bl	8000aa8 <__aeabi_dcmple>
 8003e60:	2800      	cmp	r0, #0
 8003e62:	d0ed      	beq.n	8003e40 <display_battery+0x3c>
			u8g_DrawStr(&u8g_small, 31, 32, output);
 8003e64:	ab05      	add	r3, sp, #20
 8003e66:	2220      	movs	r2, #32
 8003e68:	211f      	movs	r1, #31
 8003e6a:	4805      	ldr	r0, [pc, #20]	; (8003e80 <display_battery+0x7c>)
 8003e6c:	f7ff fa72 	bl	8003354 <u8g_DrawStr>
 8003e70:	e7ec      	b.n	8003e4c <display_battery+0x48>

}
 8003e72:	b008      	add	sp, #32
 8003e74:	bd70      	pop	{r4, r5, r6, pc}
 8003e76:	bf00      	nop
 8003e78:	0800a834 	.word	0x0800a834
 8003e7c:	20000424 	.word	0x20000424
 8003e80:	200004f4 	.word	0x200004f4
 8003e84:	40220000 	.word	0x40220000

08003e88 <display_gear>:

void display_gear(int state) //USE OLED #2 (CENTER) to display gear setting (R N D)
{
 8003e88:	b510      	push	{r4, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	4604      	mov	r4, r0
	HAL_I2C_Mem_Write(&hi2c1, 0xE0, 10, 10, 0, 0, 10); //USTAW ADRES
 8003e8e:	220a      	movs	r2, #10
 8003e90:	9202      	str	r2, [sp, #8]
 8003e92:	2300      	movs	r3, #0
 8003e94:	9301      	str	r3, [sp, #4]
 8003e96:	9300      	str	r3, [sp, #0]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	21e0      	movs	r1, #224	; 0xe0
 8003e9c:	4822      	ldr	r0, [pc, #136]	; (8003f28 <display_gear+0xa0>)
 8003e9e:	f7fd fd61 	bl	8001964 <HAL_I2C_Mem_Write>
	switch (state)
 8003ea2:	2c01      	cmp	r4, #1
 8003ea4:	d018      	beq.n	8003ed8 <display_gear+0x50>
 8003ea6:	2c02      	cmp	r4, #2
 8003ea8:	d02a      	beq.n	8003f00 <display_gear+0x78>
 8003eaa:	b10c      	cbz	r4, 8003eb0 <display_gear+0x28>
	    		u8g_DrawBitmap(&u8g_small, 0, 0, 16, 64, reverse);
	    	} while ( u8g_NextPage(&u8g_small) );

	        break;
	}
}
 8003eac:	b004      	add	sp, #16
 8003eae:	bd10      	pop	{r4, pc}
	    	u8g_FirstPage(&u8g_small);
 8003eb0:	481e      	ldr	r0, [pc, #120]	; (8003f2c <display_gear+0xa4>)
 8003eb2:	f7ff fb26 	bl	8003502 <u8g_FirstPage>
	    		u8g_DrawBitmap(&u8g_small, 0, 0, 16, 64, neutral);
 8003eb6:	4c1d      	ldr	r4, [pc, #116]	; (8003f2c <display_gear+0xa4>)
 8003eb8:	4b1d      	ldr	r3, [pc, #116]	; (8003f30 <display_gear+0xa8>)
 8003eba:	9301      	str	r3, [sp, #4]
 8003ebc:	2340      	movs	r3, #64	; 0x40
 8003ebe:	9300      	str	r3, [sp, #0]
 8003ec0:	2310      	movs	r3, #16
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	4611      	mov	r1, r2
 8003ec6:	4620      	mov	r0, r4
 8003ec8:	f7fe ff57 	bl	8002d7a <u8g_DrawBitmap>
	    	} while ( u8g_NextPage(&u8g_small) );
 8003ecc:	4620      	mov	r0, r4
 8003ece:	f7ff fb1d 	bl	800350c <u8g_NextPage>
 8003ed2:	2800      	cmp	r0, #0
 8003ed4:	d1ef      	bne.n	8003eb6 <display_gear+0x2e>
 8003ed6:	e7e9      	b.n	8003eac <display_gear+0x24>
	    	u8g_FirstPage(&u8g_small);
 8003ed8:	4814      	ldr	r0, [pc, #80]	; (8003f2c <display_gear+0xa4>)
 8003eda:	f7ff fb12 	bl	8003502 <u8g_FirstPage>
	    		u8g_DrawBitmap(&u8g_small, 0, 0, 16, 64, drive);
 8003ede:	4c13      	ldr	r4, [pc, #76]	; (8003f2c <display_gear+0xa4>)
 8003ee0:	4b14      	ldr	r3, [pc, #80]	; (8003f34 <display_gear+0xac>)
 8003ee2:	9301      	str	r3, [sp, #4]
 8003ee4:	2340      	movs	r3, #64	; 0x40
 8003ee6:	9300      	str	r3, [sp, #0]
 8003ee8:	2310      	movs	r3, #16
 8003eea:	2200      	movs	r2, #0
 8003eec:	4611      	mov	r1, r2
 8003eee:	4620      	mov	r0, r4
 8003ef0:	f7fe ff43 	bl	8002d7a <u8g_DrawBitmap>
	    	} while ( u8g_NextPage(&u8g_small) );
 8003ef4:	4620      	mov	r0, r4
 8003ef6:	f7ff fb09 	bl	800350c <u8g_NextPage>
 8003efa:	2800      	cmp	r0, #0
 8003efc:	d1ef      	bne.n	8003ede <display_gear+0x56>
 8003efe:	e7d5      	b.n	8003eac <display_gear+0x24>
	    	u8g_FirstPage(&u8g_small);
 8003f00:	480a      	ldr	r0, [pc, #40]	; (8003f2c <display_gear+0xa4>)
 8003f02:	f7ff fafe 	bl	8003502 <u8g_FirstPage>
	    		u8g_DrawBitmap(&u8g_small, 0, 0, 16, 64, reverse);
 8003f06:	4c09      	ldr	r4, [pc, #36]	; (8003f2c <display_gear+0xa4>)
 8003f08:	4b0b      	ldr	r3, [pc, #44]	; (8003f38 <display_gear+0xb0>)
 8003f0a:	9301      	str	r3, [sp, #4]
 8003f0c:	2340      	movs	r3, #64	; 0x40
 8003f0e:	9300      	str	r3, [sp, #0]
 8003f10:	2310      	movs	r3, #16
 8003f12:	2200      	movs	r2, #0
 8003f14:	4611      	mov	r1, r2
 8003f16:	4620      	mov	r0, r4
 8003f18:	f7fe ff2f 	bl	8002d7a <u8g_DrawBitmap>
	    	} while ( u8g_NextPage(&u8g_small) );
 8003f1c:	4620      	mov	r0, r4
 8003f1e:	f7ff faf5 	bl	800350c <u8g_NextPage>
 8003f22:	2800      	cmp	r0, #0
 8003f24:	d1ef      	bne.n	8003f06 <display_gear+0x7e>
 8003f26:	e7c1      	b.n	8003eac <display_gear+0x24>
 8003f28:	20000424 	.word	0x20000424
 8003f2c:	200004f4 	.word	0x200004f4
 8003f30:	0800ab18 	.word	0x0800ab18
 8003f34:	0800a854 	.word	0x0800a854
 8003f38:	0800b118 	.word	0x0800b118

08003f3c <display_power_disable>:

void display_power_disable(void) {
 8003f3c:	b510      	push	{r4, lr}
 8003f3e:	b084      	sub	sp, #16
	HAL_I2C_Mem_Write(&hi2c1, 0xE0, 1, 1, 0, 0, 10); //USTAW ADRES
 8003f40:	230a      	movs	r3, #10
 8003f42:	9302      	str	r3, [sp, #8]
 8003f44:	2300      	movs	r3, #0
 8003f46:	9301      	str	r3, [sp, #4]
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	21e0      	movs	r1, #224	; 0xe0
 8003f50:	480b      	ldr	r0, [pc, #44]	; (8003f80 <display_power_disable+0x44>)
 8003f52:	f7fd fd07 	bl	8001964 <HAL_I2C_Mem_Write>
	u8g_FirstPage(&u8g_small);
 8003f56:	480b      	ldr	r0, [pc, #44]	; (8003f84 <display_power_disable+0x48>)
 8003f58:	f7ff fad3 	bl	8003502 <u8g_FirstPage>
	do {
		u8g_DrawBitmap(&u8g_small, 0, 0, 16, 64, blank_small);
 8003f5c:	4c09      	ldr	r4, [pc, #36]	; (8003f84 <display_power_disable+0x48>)
 8003f5e:	4b0a      	ldr	r3, [pc, #40]	; (8003f88 <display_power_disable+0x4c>)
 8003f60:	9301      	str	r3, [sp, #4]
 8003f62:	2340      	movs	r3, #64	; 0x40
 8003f64:	9300      	str	r3, [sp, #0]
 8003f66:	2310      	movs	r3, #16
 8003f68:	2200      	movs	r2, #0
 8003f6a:	4611      	mov	r1, r2
 8003f6c:	4620      	mov	r0, r4
 8003f6e:	f7fe ff04 	bl	8002d7a <u8g_DrawBitmap>
	} while (u8g_NextPage(&u8g_small));
 8003f72:	4620      	mov	r0, r4
 8003f74:	f7ff faca 	bl	800350c <u8g_NextPage>
 8003f78:	2800      	cmp	r0, #0
 8003f7a:	d1ef      	bne.n	8003f5c <display_power_disable+0x20>
}
 8003f7c:	b004      	add	sp, #16
 8003f7e:	bd10      	pop	{r4, pc}
 8003f80:	20000424 	.word	0x20000424
 8003f84:	200004f4 	.word	0x200004f4
 8003f88:	0800a434 	.word	0x0800a434

08003f8c <display_battery_disable>:

void display_battery_disable(void) {
 8003f8c:	b510      	push	{r4, lr}
 8003f8e:	b084      	sub	sp, #16
	HAL_I2C_Mem_Write(&hi2c1, 0xE0, 4, 1, 0, 0, 10); //USTAW ADRES
 8003f90:	230a      	movs	r3, #10
 8003f92:	9302      	str	r3, [sp, #8]
 8003f94:	2300      	movs	r3, #0
 8003f96:	9301      	str	r3, [sp, #4]
 8003f98:	9300      	str	r3, [sp, #0]
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	2204      	movs	r2, #4
 8003f9e:	21e0      	movs	r1, #224	; 0xe0
 8003fa0:	480b      	ldr	r0, [pc, #44]	; (8003fd0 <display_battery_disable+0x44>)
 8003fa2:	f7fd fcdf 	bl	8001964 <HAL_I2C_Mem_Write>
	u8g_FirstPage(&u8g_small);
 8003fa6:	480b      	ldr	r0, [pc, #44]	; (8003fd4 <display_battery_disable+0x48>)
 8003fa8:	f7ff faab 	bl	8003502 <u8g_FirstPage>
	do {
		u8g_DrawBitmap(&u8g_small, 0, 0, 16, 64, blank_small);
 8003fac:	4c09      	ldr	r4, [pc, #36]	; (8003fd4 <display_battery_disable+0x48>)
 8003fae:	4b0a      	ldr	r3, [pc, #40]	; (8003fd8 <display_battery_disable+0x4c>)
 8003fb0:	9301      	str	r3, [sp, #4]
 8003fb2:	2340      	movs	r3, #64	; 0x40
 8003fb4:	9300      	str	r3, [sp, #0]
 8003fb6:	2310      	movs	r3, #16
 8003fb8:	2200      	movs	r2, #0
 8003fba:	4611      	mov	r1, r2
 8003fbc:	4620      	mov	r0, r4
 8003fbe:	f7fe fedc 	bl	8002d7a <u8g_DrawBitmap>
	} while (u8g_NextPage(&u8g_small));
 8003fc2:	4620      	mov	r0, r4
 8003fc4:	f7ff faa2 	bl	800350c <u8g_NextPage>
 8003fc8:	2800      	cmp	r0, #0
 8003fca:	d1ef      	bne.n	8003fac <display_battery_disable+0x20>

}
 8003fcc:	b004      	add	sp, #16
 8003fce:	bd10      	pop	{r4, pc}
 8003fd0:	20000424 	.word	0x20000424
 8003fd4:	200004f4 	.word	0x200004f4
 8003fd8:	0800a434 	.word	0x0800a434

08003fdc <display_gear_disable>:

void display_gear_disable(void) {
 8003fdc:	b510      	push	{r4, lr}
 8003fde:	b084      	sub	sp, #16
	HAL_I2C_Mem_Write(&hi2c1, 0xE0, 10, 10, 0, 0, 10); //USTAW ADRES
 8003fe0:	220a      	movs	r2, #10
 8003fe2:	9202      	str	r2, [sp, #8]
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	9301      	str	r3, [sp, #4]
 8003fe8:	9300      	str	r3, [sp, #0]
 8003fea:	4613      	mov	r3, r2
 8003fec:	21e0      	movs	r1, #224	; 0xe0
 8003fee:	480c      	ldr	r0, [pc, #48]	; (8004020 <display_gear_disable+0x44>)
 8003ff0:	f7fd fcb8 	bl	8001964 <HAL_I2C_Mem_Write>
	u8g_FirstPage(&u8g_small);
 8003ff4:	480b      	ldr	r0, [pc, #44]	; (8004024 <display_gear_disable+0x48>)
 8003ff6:	f7ff fa84 	bl	8003502 <u8g_FirstPage>
	do {
		u8g_DrawBitmap(&u8g_small, 0, 0, 16, 64, blank_small);
 8003ffa:	4c0a      	ldr	r4, [pc, #40]	; (8004024 <display_gear_disable+0x48>)
 8003ffc:	4b0a      	ldr	r3, [pc, #40]	; (8004028 <display_gear_disable+0x4c>)
 8003ffe:	9301      	str	r3, [sp, #4]
 8004000:	2340      	movs	r3, #64	; 0x40
 8004002:	9300      	str	r3, [sp, #0]
 8004004:	2310      	movs	r3, #16
 8004006:	2200      	movs	r2, #0
 8004008:	4611      	mov	r1, r2
 800400a:	4620      	mov	r0, r4
 800400c:	f7fe feb5 	bl	8002d7a <u8g_DrawBitmap>
	} while (u8g_NextPage(&u8g_small));
 8004010:	4620      	mov	r0, r4
 8004012:	f7ff fa7b 	bl	800350c <u8g_NextPage>
 8004016:	2800      	cmp	r0, #0
 8004018:	d1ef      	bne.n	8003ffa <display_gear_disable+0x1e>

}
 800401a:	b004      	add	sp, #16
 800401c:	bd10      	pop	{r4, pc}
 800401e:	bf00      	nop
 8004020:	20000424 	.word	0x20000424
 8004024:	200004f4 	.word	0x200004f4
 8004028:	0800a434 	.word	0x0800a434

0800402c <display_power>:



void display_power(double value,uint8_t charging) //USE OLED #3 (RIGHT) to display current power consumption
{
 800402c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800402e:	b089      	sub	sp, #36	; 0x24
 8004030:	4604      	mov	r4, r0
 8004032:	460d      	mov	r5, r1
 8004034:	4616      	mov	r6, r2

	char output[10] = "";
 8004036:	2700      	movs	r7, #0
 8004038:	9705      	str	r7, [sp, #20]
 800403a:	9706      	str	r7, [sp, #24]
 800403c:	f8ad 701c 	strh.w	r7, [sp, #28]
	snprintf(output, 10, "%4.1f", value); //Convert to string and format
 8004040:	e9cd 4500 	strd	r4, r5, [sp]
 8004044:	4a1d      	ldr	r2, [pc, #116]	; (80040bc <display_power+0x90>)
 8004046:	210a      	movs	r1, #10
 8004048:	a805      	add	r0, sp, #20
 800404a:	f001 fd01 	bl	8005a50 <sniprintf>

	HAL_I2C_Mem_Write(&hi2c1, 0xE0, 1, 1, 0, 0, 10); //USTAW ADRES
 800404e:	230a      	movs	r3, #10
 8004050:	9302      	str	r3, [sp, #8]
 8004052:	9701      	str	r7, [sp, #4]
 8004054:	9700      	str	r7, [sp, #0]
 8004056:	2301      	movs	r3, #1
 8004058:	461a      	mov	r2, r3
 800405a:	21e0      	movs	r1, #224	; 0xe0
 800405c:	4818      	ldr	r0, [pc, #96]	; (80040c0 <display_power+0x94>)
 800405e:	f7fd fc81 	bl	8001964 <HAL_I2C_Mem_Write>
	//u8g_DrawBitmap(&u8g_small, 0, 0, 16, 64, blank_small);



	u8g_FirstPage(&u8g_small);
 8004062:	4818      	ldr	r0, [pc, #96]	; (80040c4 <display_power+0x98>)
 8004064:	f7ff fa4d 	bl	8003502 <u8g_FirstPage>
 8004068:	e014      	b.n	8004094 <display_power+0x68>
	do
	{
		if(charging == 1)
		{
			u8g_DrawBitmap(&u8g_small, 0, 0, 16, 64, charge);
 800406a:	4b17      	ldr	r3, [pc, #92]	; (80040c8 <display_power+0x9c>)
 800406c:	9301      	str	r3, [sp, #4]
 800406e:	2340      	movs	r3, #64	; 0x40
 8004070:	9300      	str	r3, [sp, #0]
 8004072:	2310      	movs	r3, #16
 8004074:	2200      	movs	r2, #0
 8004076:	4611      	mov	r1, r2
 8004078:	4812      	ldr	r0, [pc, #72]	; (80040c4 <display_power+0x98>)
 800407a:	f7fe fe7e 	bl	8002d7a <u8g_DrawBitmap>
 800407e:	e00b      	b.n	8004098 <display_power+0x6c>
		{
			u8g_DrawStr(&u8g_small, 31, 32, output);
		}
		else
		{
			u8g_DrawStr(&u8g_small, 20, 32, output);
 8004080:	ab05      	add	r3, sp, #20
 8004082:	2220      	movs	r2, #32
 8004084:	2114      	movs	r1, #20
 8004086:	480f      	ldr	r0, [pc, #60]	; (80040c4 <display_power+0x98>)
 8004088:	f7ff f964 	bl	8003354 <u8g_DrawStr>
		}
	} while ( u8g_NextPage(&u8g_small) );
 800408c:	480d      	ldr	r0, [pc, #52]	; (80040c4 <display_power+0x98>)
 800408e:	f7ff fa3d 	bl	800350c <u8g_NextPage>
 8004092:	b180      	cbz	r0, 80040b6 <display_power+0x8a>
		if(charging == 1)
 8004094:	2e01      	cmp	r6, #1
 8004096:	d0e8      	beq.n	800406a <display_power+0x3e>
		if(value <=9)
 8004098:	2200      	movs	r2, #0
 800409a:	4b0c      	ldr	r3, [pc, #48]	; (80040cc <display_power+0xa0>)
 800409c:	4620      	mov	r0, r4
 800409e:	4629      	mov	r1, r5
 80040a0:	f7fc fd02 	bl	8000aa8 <__aeabi_dcmple>
 80040a4:	2800      	cmp	r0, #0
 80040a6:	d0eb      	beq.n	8004080 <display_power+0x54>
			u8g_DrawStr(&u8g_small, 31, 32, output);
 80040a8:	ab05      	add	r3, sp, #20
 80040aa:	2220      	movs	r2, #32
 80040ac:	211f      	movs	r1, #31
 80040ae:	4805      	ldr	r0, [pc, #20]	; (80040c4 <display_power+0x98>)
 80040b0:	f7ff f950 	bl	8003354 <u8g_DrawStr>
 80040b4:	e7ea      	b.n	800408c <display_power+0x60>



}
 80040b6:	b009      	add	sp, #36	; 0x24
 80040b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040ba:	bf00      	nop
 80040bc:	0800a834 	.word	0x0800a834
 80040c0:	20000424 	.word	0x20000424
 80040c4:	200004f4 	.word	0x200004f4
 80040c8:	0800a634 	.word	0x0800a634
 80040cc:	40220000 	.word	0x40220000

080040d0 <display_speed>:

void display_speed(double value, uint8_t cruise)
{
 80040d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040d2:	b089      	sub	sp, #36	; 0x24
 80040d4:	4604      	mov	r4, r0
 80040d6:	460d      	mov	r5, r1
 80040d8:	4616      	mov	r6, r2
		char output[10];
		char output_cruise[10];

		snprintf(output, 10, "%3.0f", value); //Convert to string and format
 80040da:	e9cd 4500 	strd	r4, r5, [sp]
 80040de:	4a38      	ldr	r2, [pc, #224]	; (80041c0 <display_speed+0xf0>)
 80040e0:	210a      	movs	r1, #10
 80040e2:	a805      	add	r0, sp, #20
 80040e4:	f001 fcb4 	bl	8005a50 <sniprintf>
		snprintf(output_cruise, 10, "%d", cruise); //Convert to string and format
 80040e8:	4633      	mov	r3, r6
 80040ea:	4a36      	ldr	r2, [pc, #216]	; (80041c4 <display_speed+0xf4>)
 80040ec:	210a      	movs	r1, #10
 80040ee:	a802      	add	r0, sp, #8
 80040f0:	f001 fcae 	bl	8005a50 <sniprintf>
		u8g_FirstPage(&u8g_big);
 80040f4:	4834      	ldr	r0, [pc, #208]	; (80041c8 <display_speed+0xf8>)
 80040f6:	f7ff fa04 	bl	8003502 <u8g_FirstPage>
 80040fa:	e020      	b.n	800413e <display_speed+0x6e>
		do
		{

			if(value <= 9)
			{
				u8g_big.font = u8g_font_fur49n;
 80040fc:	4832      	ldr	r0, [pc, #200]	; (80041c8 <display_speed+0xf8>)
 80040fe:	4b33      	ldr	r3, [pc, #204]	; (80041cc <display_speed+0xfc>)
 8004100:	6083      	str	r3, [r0, #8]
				u8g_DrawStr(&u8g_big, 72, 50, output);
 8004102:	ab05      	add	r3, sp, #20
 8004104:	2232      	movs	r2, #50	; 0x32
 8004106:	2148      	movs	r1, #72	; 0x48
 8004108:	f7ff f924 	bl	8003354 <u8g_DrawStr>
 800410c:	e01f      	b.n	800414e <display_speed+0x7e>
			{
				u8g_big.font = u8g_font_fur49n;
				u8g_DrawStr(&u8g_big, 34, 50, output);
			}

			if(value > 99)
 800410e:	a32a      	add	r3, pc, #168	; (adr r3, 80041b8 <display_speed+0xe8>)
 8004110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004114:	4620      	mov	r0, r4
 8004116:	4629      	mov	r1, r5
 8004118:	f7fc fcda 	bl	8000ad0 <__aeabi_dcmpgt>
 800411c:	2800      	cmp	r0, #0
 800411e:	d130      	bne.n	8004182 <display_speed+0xb2>



			//u8g_DrawHLine(&u8g_big, 0, 54, 128);

			u8g_big.font = u8g_font_6x10;
 8004120:	4829      	ldr	r0, [pc, #164]	; (80041c8 <display_speed+0xf8>)
 8004122:	4b2b      	ldr	r3, [pc, #172]	; (80041d0 <display_speed+0x100>)
 8004124:	6083      	str	r3, [r0, #8]
			u8g_DrawStr(&u8g_big, 104,63, "km/h");
 8004126:	4b2b      	ldr	r3, [pc, #172]	; (80041d4 <display_speed+0x104>)
 8004128:	223f      	movs	r2, #63	; 0x3f
 800412a:	2168      	movs	r1, #104	; 0x68
 800412c:	f7ff f912 	bl	8003354 <u8g_DrawStr>


			if(cruise > 0)
 8004130:	2e00      	cmp	r6, #0
 8004132:	d12f      	bne.n	8004194 <display_speed+0xc4>





		} while ( u8g_NextPage(&u8g_big) );
 8004134:	4824      	ldr	r0, [pc, #144]	; (80041c8 <display_speed+0xf8>)
 8004136:	f7ff f9e9 	bl	800350c <u8g_NextPage>
 800413a:	2800      	cmp	r0, #0
 800413c:	d038      	beq.n	80041b0 <display_speed+0xe0>
			if(value <= 9)
 800413e:	2200      	movs	r2, #0
 8004140:	4b25      	ldr	r3, [pc, #148]	; (80041d8 <display_speed+0x108>)
 8004142:	4620      	mov	r0, r4
 8004144:	4629      	mov	r1, r5
 8004146:	f7fc fcaf 	bl	8000aa8 <__aeabi_dcmple>
 800414a:	2800      	cmp	r0, #0
 800414c:	d1d6      	bne.n	80040fc <display_speed+0x2c>
			if((value > 9) && (value <= 99))
 800414e:	2200      	movs	r2, #0
 8004150:	4b21      	ldr	r3, [pc, #132]	; (80041d8 <display_speed+0x108>)
 8004152:	4620      	mov	r0, r4
 8004154:	4629      	mov	r1, r5
 8004156:	f7fc fcbb 	bl	8000ad0 <__aeabi_dcmpgt>
 800415a:	2800      	cmp	r0, #0
 800415c:	d0d7      	beq.n	800410e <display_speed+0x3e>
 800415e:	a316      	add	r3, pc, #88	; (adr r3, 80041b8 <display_speed+0xe8>)
 8004160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004164:	4620      	mov	r0, r4
 8004166:	4629      	mov	r1, r5
 8004168:	f7fc fc9e 	bl	8000aa8 <__aeabi_dcmple>
 800416c:	2800      	cmp	r0, #0
 800416e:	d0ce      	beq.n	800410e <display_speed+0x3e>
				u8g_big.font = u8g_font_fur49n;
 8004170:	4815      	ldr	r0, [pc, #84]	; (80041c8 <display_speed+0xf8>)
 8004172:	4b16      	ldr	r3, [pc, #88]	; (80041cc <display_speed+0xfc>)
 8004174:	6083      	str	r3, [r0, #8]
				u8g_DrawStr(&u8g_big, 34, 50, output);
 8004176:	ab05      	add	r3, sp, #20
 8004178:	2232      	movs	r2, #50	; 0x32
 800417a:	2122      	movs	r1, #34	; 0x22
 800417c:	f7ff f8ea 	bl	8003354 <u8g_DrawStr>
 8004180:	e7c5      	b.n	800410e <display_speed+0x3e>
				u8g_big.font = u8g_font_fur49n;
 8004182:	4811      	ldr	r0, [pc, #68]	; (80041c8 <display_speed+0xf8>)
 8004184:	4b11      	ldr	r3, [pc, #68]	; (80041cc <display_speed+0xfc>)
 8004186:	6083      	str	r3, [r0, #8]
				u8g_DrawStr(&u8g_big, 1, 50, output);
 8004188:	ab05      	add	r3, sp, #20
 800418a:	2232      	movs	r2, #50	; 0x32
 800418c:	2101      	movs	r1, #1
 800418e:	f7ff f8e1 	bl	8003354 <u8g_DrawStr>
 8004192:	e7c5      	b.n	8004120 <display_speed+0x50>
				u8g_DrawStr(&u8g_big, 1,63, "set ");
 8004194:	4f0c      	ldr	r7, [pc, #48]	; (80041c8 <display_speed+0xf8>)
 8004196:	4b11      	ldr	r3, [pc, #68]	; (80041dc <display_speed+0x10c>)
 8004198:	223f      	movs	r2, #63	; 0x3f
 800419a:	2101      	movs	r1, #1
 800419c:	4638      	mov	r0, r7
 800419e:	f7ff f8d9 	bl	8003354 <u8g_DrawStr>
				u8g_DrawStr(&u8g_big, 22,63, output_cruise);
 80041a2:	ab02      	add	r3, sp, #8
 80041a4:	223f      	movs	r2, #63	; 0x3f
 80041a6:	2116      	movs	r1, #22
 80041a8:	4638      	mov	r0, r7
 80041aa:	f7ff f8d3 	bl	8003354 <u8g_DrawStr>
 80041ae:	e7c1      	b.n	8004134 <display_speed+0x64>



}
 80041b0:	b009      	add	sp, #36	; 0x24
 80041b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041b4:	f3af 8000 	nop.w
 80041b8:	00000000 	.word	0x00000000
 80041bc:	4058c000 	.word	0x4058c000
 80041c0:	0800a83c 	.word	0x0800a83c
 80041c4:	0800a430 	.word	0x0800a430
 80041c8:	200004b8 	.word	0x200004b8
 80041cc:	080099b4 	.word	0x080099b4
 80041d0:	08007460 	.word	0x08007460
 80041d4:	0800a844 	.word	0x0800a844
 80041d8:	40220000 	.word	0x40220000
 80041dc:	0800a84c 	.word	0x0800a84c

080041e0 <displays_init>:
// sa rozdzielane te sygnaly I2C, dzieki ktorym jednym interfejsem obslugujesz trzy wyswietlacze.
//  Do rozdzielenia sygnalu sluzy uklad TCA9548A. Jest tam kilka kanalow i byc moze parametr trzeci
// z funkcji wlasnie wybiera kanal.
//  Wyglada na to, ze te komendy po prostu aktywuja te wyswietlacze. Ustawienie pinow moze po prostu
// puszczac na nie napiecie.
void displays_init(void) {
 80041e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041e4:	b084      	sub	sp, #16
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET); // MUSI BYC
 80041e6:	2201      	movs	r2, #1
 80041e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80041ec:	4834      	ldr	r0, [pc, #208]	; (80042c0 <displays_init+0xe0>)
 80041ee:	f7fd f879 	bl	80012e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET); // (reset i2c)
 80041f2:	2201      	movs	r2, #1
 80041f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80041f8:	4832      	ldr	r0, [pc, #200]	; (80042c4 <displays_init+0xe4>)
 80041fa:	f7fd f873 	bl	80012e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET); // MUSI BYC mux+
 80041fe:	4c32      	ldr	r4, [pc, #200]	; (80042c8 <displays_init+0xe8>)
 8004200:	2200      	movs	r2, #0
 8004202:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004206:	4620      	mov	r0, r4
 8004208:	f7fd f86c 	bl	80012e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET); // MUSI BYC mux
 800420c:	2200      	movs	r2, #0
 800420e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004212:	4620      	mov	r0, r4
 8004214:	f7fd f866 	bl	80012e4 <HAL_GPIO_WritePin>

	u8g_InitComFn(&u8g_big, &u8g_dev_ssd1309_128x64_hw_spi, u8g_com_hw_spi_fn);
 8004218:	4a2c      	ldr	r2, [pc, #176]	; (80042cc <displays_init+0xec>)
 800421a:	492d      	ldr	r1, [pc, #180]	; (80042d0 <displays_init+0xf0>)
 800421c:	482d      	ldr	r0, [pc, #180]	; (80042d4 <displays_init+0xf4>)
 800421e:	f7ff f9b9 	bl	8003594 <u8g_InitComFn>
	HAL_I2C_Mem_Write(&hi2c1, 0xE0, 1, 1, 0, 0, HAL_MAX_DELAY); //USTAW ADRES
 8004222:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 80042e4 <displays_init+0x104>
 8004226:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800422a:	f8cd a008 	str.w	sl, [sp, #8]
 800422e:	2500      	movs	r5, #0
 8004230:	9501      	str	r5, [sp, #4]
 8004232:	9500      	str	r5, [sp, #0]
 8004234:	2301      	movs	r3, #1
 8004236:	461a      	mov	r2, r3
 8004238:	21e0      	movs	r1, #224	; 0xe0
 800423a:	4648      	mov	r0, r9
 800423c:	f7fd fb92 	bl	8001964 <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 8004240:	2005      	movs	r0, #5
 8004242:	f7fc fcf7 	bl	8000c34 <HAL_Delay>

	u8g_InitComFn(&u8g_small, &u8g_dev_ssd1306_128x32_2x_i2c,
 8004246:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80042e8 <displays_init+0x108>
 800424a:	4f23      	ldr	r7, [pc, #140]	; (80042d8 <displays_init+0xf8>)
 800424c:	4c23      	ldr	r4, [pc, #140]	; (80042dc <displays_init+0xfc>)
 800424e:	4642      	mov	r2, r8
 8004250:	4639      	mov	r1, r7
 8004252:	4620      	mov	r0, r4
 8004254:	f7ff f99e 	bl	8003594 <u8g_InitComFn>
			u8g_com_hw_i2c_fn); //here we init our u8glib driver
	u8g_small.font = u8g_font_fub30r;
 8004258:	4e21      	ldr	r6, [pc, #132]	; (80042e0 <displays_init+0x100>)
 800425a:	60a6      	str	r6, [r4, #8]
	HAL_Delay(5);
 800425c:	2005      	movs	r0, #5
 800425e:	f7fc fce9 	bl	8000c34 <HAL_Delay>
	HAL_I2C_Mem_Write(&hi2c1, 0xE0, 2, 1, 0, 0, HAL_MAX_DELAY); //USTAW ADRES
 8004262:	f8cd a008 	str.w	sl, [sp, #8]
 8004266:	9501      	str	r5, [sp, #4]
 8004268:	9500      	str	r5, [sp, #0]
 800426a:	2301      	movs	r3, #1
 800426c:	2202      	movs	r2, #2
 800426e:	21e0      	movs	r1, #224	; 0xe0
 8004270:	4648      	mov	r0, r9
 8004272:	f7fd fb77 	bl	8001964 <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 8004276:	2005      	movs	r0, #5
 8004278:	f7fc fcdc 	bl	8000c34 <HAL_Delay>

	u8g_InitComFn(&u8g_small, &u8g_dev_ssd1306_128x32_2x_i2c,
 800427c:	4642      	mov	r2, r8
 800427e:	4639      	mov	r1, r7
 8004280:	4620      	mov	r0, r4
 8004282:	f7ff f987 	bl	8003594 <u8g_InitComFn>
			u8g_com_hw_i2c_fn); //here we init our u8glib driver
	u8g_small.font = u8g_font_fub30r;
 8004286:	60a6      	str	r6, [r4, #8]
	HAL_Delay(5);
 8004288:	2005      	movs	r0, #5
 800428a:	f7fc fcd3 	bl	8000c34 <HAL_Delay>
	HAL_I2C_Mem_Write(&hi2c1, 0xE0, 4, 1, 0, 0, HAL_MAX_DELAY); //USTAW ADRES
 800428e:	f8cd a008 	str.w	sl, [sp, #8]
 8004292:	9501      	str	r5, [sp, #4]
 8004294:	9500      	str	r5, [sp, #0]
 8004296:	2301      	movs	r3, #1
 8004298:	2204      	movs	r2, #4
 800429a:	21e0      	movs	r1, #224	; 0xe0
 800429c:	4648      	mov	r0, r9
 800429e:	f7fd fb61 	bl	8001964 <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 80042a2:	2005      	movs	r0, #5
 80042a4:	f7fc fcc6 	bl	8000c34 <HAL_Delay>

	u8g_InitComFn(&u8g_small, &u8g_dev_ssd1306_128x32_2x_i2c,
 80042a8:	4642      	mov	r2, r8
 80042aa:	4639      	mov	r1, r7
 80042ac:	4620      	mov	r0, r4
 80042ae:	f7ff f971 	bl	8003594 <u8g_InitComFn>
			u8g_com_hw_i2c_fn); //here we init our u8glib driver
	u8g_small.font = u8g_font_fub30r;
 80042b2:	60a6      	str	r6, [r4, #8]
	HAL_Delay(100);
 80042b4:	2064      	movs	r0, #100	; 0x64
 80042b6:	f7fc fcbd 	bl	8000c34 <HAL_Delay>
}
 80042ba:	b004      	add	sp, #16
 80042bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042c0:	40010800 	.word	0x40010800
 80042c4:	40011000 	.word	0x40011000
 80042c8:	40010c00 	.word	0x40010c00
 80042cc:	08002c09 	.word	0x08002c09
 80042d0:	20000020 	.word	0x20000020
 80042d4:	200004b8 	.word	0x200004b8
 80042d8:	20000008 	.word	0x20000008
 80042dc:	200004f4 	.word	0x200004f4
 80042e0:	08007bac 	.word	0x08007bac
 80042e4:	20000424 	.word	0x20000424
 80042e8:	08002cb1 	.word	0x08002cb1

080042ec <display_logo>:

void display_logo(void) {
 80042ec:	b510      	push	{r4, lr}
 80042ee:	b082      	sub	sp, #8
	u8g_FirstPage(&u8g_big);
 80042f0:	480a      	ldr	r0, [pc, #40]	; (800431c <display_logo+0x30>)
 80042f2:	f7ff f906 	bl	8003502 <u8g_FirstPage>
	do {
		u8g_DrawBitmap(&u8g_big, 0, 0, 16, 64, psd_logo_big);
 80042f6:	4c09      	ldr	r4, [pc, #36]	; (800431c <display_logo+0x30>)
 80042f8:	4b09      	ldr	r3, [pc, #36]	; (8004320 <display_logo+0x34>)
 80042fa:	9301      	str	r3, [sp, #4]
 80042fc:	2340      	movs	r3, #64	; 0x40
 80042fe:	9300      	str	r3, [sp, #0]
 8004300:	2310      	movs	r3, #16
 8004302:	2200      	movs	r2, #0
 8004304:	4611      	mov	r1, r2
 8004306:	4620      	mov	r0, r4
 8004308:	f7fe fd37 	bl	8002d7a <u8g_DrawBitmap>
	} while (u8g_NextPage(&u8g_big));
 800430c:	4620      	mov	r0, r4
 800430e:	f7ff f8fd 	bl	800350c <u8g_NextPage>
 8004312:	2800      	cmp	r0, #0
 8004314:	d1ef      	bne.n	80042f6 <display_logo+0xa>

}
 8004316:	b002      	add	sp, #8
 8004318:	bd10      	pop	{r4, pc}
 800431a:	bf00      	nop
 800431c:	200004b8 	.word	0x200004b8
 8004320:	0800ad18 	.word	0x0800ad18

08004324 <displays_set_brightness>:

void displays_set_brightness(uint8_t val)
{
 8004324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004328:	b084      	sub	sp, #16
 800432a:	4680      	mov	r8, r0

	u8g_SetContrast(&u8g_big, val);
 800432c:	4601      	mov	r1, r0
 800432e:	4819      	ldr	r0, [pc, #100]	; (8004394 <displays_set_brightness+0x70>)
 8004330:	f7ff f8f6 	bl	8003520 <u8g_SetContrast>

	HAL_I2C_Mem_Write(&hi2c1, 0xE0, 1, 1, 0, 0, HAL_MAX_DELAY); //USTAW ADRES
 8004334:	4f18      	ldr	r7, [pc, #96]	; (8004398 <displays_set_brightness+0x74>)
 8004336:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800433a:	9502      	str	r5, [sp, #8]
 800433c:	2400      	movs	r4, #0
 800433e:	9401      	str	r4, [sp, #4]
 8004340:	9400      	str	r4, [sp, #0]
 8004342:	2301      	movs	r3, #1
 8004344:	461a      	mov	r2, r3
 8004346:	21e0      	movs	r1, #224	; 0xe0
 8004348:	4638      	mov	r0, r7
 800434a:	f7fd fb0b 	bl	8001964 <HAL_I2C_Mem_Write>
	u8g_SetContrast(&u8g_small, val);
 800434e:	4e13      	ldr	r6, [pc, #76]	; (800439c <displays_set_brightness+0x78>)
 8004350:	4641      	mov	r1, r8
 8004352:	4630      	mov	r0, r6
 8004354:	f7ff f8e4 	bl	8003520 <u8g_SetContrast>
	HAL_I2C_Mem_Write(&hi2c1, 0xE0, 2, 1, 0, 0, HAL_MAX_DELAY); //USTAW ADRES
 8004358:	9502      	str	r5, [sp, #8]
 800435a:	9401      	str	r4, [sp, #4]
 800435c:	9400      	str	r4, [sp, #0]
 800435e:	2301      	movs	r3, #1
 8004360:	2202      	movs	r2, #2
 8004362:	21e0      	movs	r1, #224	; 0xe0
 8004364:	4638      	mov	r0, r7
 8004366:	f7fd fafd 	bl	8001964 <HAL_I2C_Mem_Write>
	u8g_SetContrast(&u8g_small, val);
 800436a:	4641      	mov	r1, r8
 800436c:	4630      	mov	r0, r6
 800436e:	f7ff f8d7 	bl	8003520 <u8g_SetContrast>
	HAL_I2C_Mem_Write(&hi2c1, 0xE0, 4, 1, 0, 0, HAL_MAX_DELAY); //USTAW ADRES
 8004372:	9502      	str	r5, [sp, #8]
 8004374:	9401      	str	r4, [sp, #4]
 8004376:	9400      	str	r4, [sp, #0]
 8004378:	2301      	movs	r3, #1
 800437a:	2204      	movs	r2, #4
 800437c:	21e0      	movs	r1, #224	; 0xe0
 800437e:	4638      	mov	r0, r7
 8004380:	f7fd faf0 	bl	8001964 <HAL_I2C_Mem_Write>
	u8g_SetContrast(&u8g_small, val);
 8004384:	4641      	mov	r1, r8
 8004386:	4630      	mov	r0, r6
 8004388:	f7ff f8ca 	bl	8003520 <u8g_SetContrast>

}
 800438c:	b004      	add	sp, #16
 800438e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004392:	bf00      	nop
 8004394:	200004b8 	.word	0x200004b8
 8004398:	20000424 	.word	0x20000424
 800439c:	200004f4 	.word	0x200004f4

080043a0 <ws_senddata>:

#include "../GUI/ws_leds.h"
#include "stm32f1xx_hal.h"
#include <math.h>

void ws_senddata(void) {
 80043a0:	b500      	push	{lr}
 80043a2:	b085      	sub	sp, #20
//	char uart_buffer[9] = {ws_spd,ws_spd_lim,ws_bat,ws_powr,ws_powr_mod,ws_leds1,ws_leds2,ws_led_bright,ws_mod};
	char uart_buffer[9] = { ws_spd, ws_spd_lim, ws_bat, ws_powr, ws_powr_mod,
 80043a4:	4b16      	ldr	r3, [pc, #88]	; (8004400 <ws_senddata+0x60>)
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	f88d 3004 	strb.w	r3, [sp, #4]
 80043ac:	4b15      	ldr	r3, [pc, #84]	; (8004404 <ws_senddata+0x64>)
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	f88d 3005 	strb.w	r3, [sp, #5]
 80043b4:	4b14      	ldr	r3, [pc, #80]	; (8004408 <ws_senddata+0x68>)
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	f88d 3006 	strb.w	r3, [sp, #6]
 80043bc:	4b13      	ldr	r3, [pc, #76]	; (800440c <ws_senddata+0x6c>)
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	f88d 3007 	strb.w	r3, [sp, #7]
 80043c4:	4b12      	ldr	r3, [pc, #72]	; (8004410 <ws_senddata+0x70>)
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	f88d 3008 	strb.w	r3, [sp, #8]
 80043cc:	4b11      	ldr	r3, [pc, #68]	; (8004414 <ws_senddata+0x74>)
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	f88d 3009 	strb.w	r3, [sp, #9]
 80043d4:	4b10      	ldr	r3, [pc, #64]	; (8004418 <ws_senddata+0x78>)
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	f88d 300a 	strb.w	r3, [sp, #10]
 80043dc:	4b0f      	ldr	r3, [pc, #60]	; (800441c <ws_senddata+0x7c>)
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	f88d 300b 	strb.w	r3, [sp, #11]
 80043e4:	4b0e      	ldr	r3, [pc, #56]	; (8004420 <ws_senddata+0x80>)
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	f88d 300c 	strb.w	r3, [sp, #12]
			ws_leds1, ws_leds2, ws_led_bright, ws_mod };
	HAL_UART_Transmit(&huart3, (uint8_t*) uart_buffer, 9, 100);
 80043ec:	2364      	movs	r3, #100	; 0x64
 80043ee:	2209      	movs	r2, #9
 80043f0:	a901      	add	r1, sp, #4
 80043f2:	480c      	ldr	r0, [pc, #48]	; (8004424 <ws_senddata+0x84>)
 80043f4:	f7fe fb82 	bl	8002afc <HAL_UART_Transmit>
}
 80043f8:	b005      	add	sp, #20
 80043fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80043fe:	bf00      	nop
 8004400:	200003e7 	.word	0x200003e7
 8004404:	200003e8 	.word	0x200003e8
 8004408:	200003e0 	.word	0x200003e0
 800440c:	200003e5 	.word	0x200003e5
 8004410:	200003e6 	.word	0x200003e6
 8004414:	200003e2 	.word	0x200003e2
 8004418:	200003e3 	.word	0x200003e3
 800441c:	200003e1 	.word	0x200003e1
 8004420:	200003e4 	.word	0x200003e4
 8004424:	200005e0 	.word	0x200005e0

08004428 <ws_set_leds>:

void ws_set_leds(uint8_t byte1,uint8_t byte2)
{
	ws_leds1 = byte1;
 8004428:	4b02      	ldr	r3, [pc, #8]	; (8004434 <ws_set_leds+0xc>)
 800442a:	7018      	strb	r0, [r3, #0]
	ws_leds2 = byte2;
 800442c:	4b02      	ldr	r3, [pc, #8]	; (8004438 <ws_set_leds+0x10>)
 800442e:	7019      	strb	r1, [r3, #0]
}
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	200003e2 	.word	0x200003e2
 8004438:	200003e3 	.word	0x200003e3

0800443c <ws_set_speed>:

void ws_set_speed(uint8_t x)
{
 800443c:	b508      	push	{r3, lr}
	uint8_t buf = floor(x/2.5);
 800443e:	f7fc f84d 	bl	80004dc <__aeabi_i2d>
 8004442:	2200      	movs	r2, #0
 8004444:	4b06      	ldr	r3, [pc, #24]	; (8004460 <ws_set_speed+0x24>)
 8004446:	f7fc f9dd 	bl	8000804 <__aeabi_ddiv>
 800444a:	f002 ff25 	bl	8007298 <floor>
 800444e:	f7fc fb87 	bl	8000b60 <__aeabi_d2uiz>
 8004452:	b2c0      	uxtb	r0, r0
	if(buf > 56)
 8004454:	2838      	cmp	r0, #56	; 0x38
 8004456:	d900      	bls.n	800445a <ws_set_speed+0x1e>
	{
		buf = 56;
 8004458:	2038      	movs	r0, #56	; 0x38
	}
	ws_spd = buf;
 800445a:	4b02      	ldr	r3, [pc, #8]	; (8004464 <ws_set_speed+0x28>)
 800445c:	7018      	strb	r0, [r3, #0]

}
 800445e:	bd08      	pop	{r3, pc}
 8004460:	40040000 	.word	0x40040000
 8004464:	200003e7 	.word	0x200003e7

08004468 <ws_set_power>:
void ws_set_power(double x, uint8_t charging)
{
 8004468:	b5d0      	push	{r4, r6, r7, lr}
 800446a:	4606      	mov	r6, r0
 800446c:	460f      	mov	r7, r1

	if(charging == 0)
 800446e:	4614      	mov	r4, r2
 8004470:	b982      	cbnz	r2, 8004494 <ws_set_power+0x2c>
	{
		uint8_t buf = floor(x/0.75);
 8004472:	2200      	movs	r2, #0
 8004474:	4b11      	ldr	r3, [pc, #68]	; (80044bc <ws_set_power+0x54>)
 8004476:	f7fc f9c5 	bl	8000804 <__aeabi_ddiv>
 800447a:	f002 ff0d 	bl	8007298 <floor>
 800447e:	f7fc fb6f 	bl	8000b60 <__aeabi_d2uiz>
 8004482:	b2c0      	uxtb	r0, r0
		if(buf > 16)
 8004484:	2810      	cmp	r0, #16
 8004486:	d900      	bls.n	800448a <ws_set_power+0x22>
		{
			buf = 16;
 8004488:	2010      	movs	r0, #16
		}
		ws_powr = buf;
 800448a:	4b0d      	ldr	r3, [pc, #52]	; (80044c0 <ws_set_power+0x58>)
 800448c:	7018      	strb	r0, [r3, #0]

		ws_powr_mod = 0;
 800448e:	4b0d      	ldr	r3, [pc, #52]	; (80044c4 <ws_set_power+0x5c>)
 8004490:	2200      	movs	r2, #0
 8004492:	701a      	strb	r2, [r3, #0]
	}
	if(charging == 1)
 8004494:	2c01      	cmp	r4, #1
 8004496:	d000      	beq.n	800449a <ws_set_power+0x32>
		ws_powr = buf;

		ws_powr_mod = 1;
	}

}
 8004498:	bdd0      	pop	{r4, r6, r7, pc}
		uint8_t buf = floor(x);
 800449a:	4630      	mov	r0, r6
 800449c:	4639      	mov	r1, r7
 800449e:	f002 fefb 	bl	8007298 <floor>
 80044a2:	f7fc fb5d 	bl	8000b60 <__aeabi_d2uiz>
 80044a6:	b2c0      	uxtb	r0, r0
		if(buf > 3)
 80044a8:	2803      	cmp	r0, #3
 80044aa:	d900      	bls.n	80044ae <ws_set_power+0x46>
			buf = 3;
 80044ac:	2003      	movs	r0, #3
		ws_powr = buf;
 80044ae:	4b04      	ldr	r3, [pc, #16]	; (80044c0 <ws_set_power+0x58>)
 80044b0:	7018      	strb	r0, [r3, #0]
		ws_powr_mod = 1;
 80044b2:	4b04      	ldr	r3, [pc, #16]	; (80044c4 <ws_set_power+0x5c>)
 80044b4:	2201      	movs	r2, #1
 80044b6:	701a      	strb	r2, [r3, #0]
}
 80044b8:	e7ee      	b.n	8004498 <ws_set_power+0x30>
 80044ba:	bf00      	nop
 80044bc:	3fe80000 	.word	0x3fe80000
 80044c0:	200003e5 	.word	0x200003e5
 80044c4:	200003e6 	.word	0x200003e6

080044c8 <ws_set_battery>:
void ws_set_battery(double x)
{
 80044c8:	b570      	push	{r4, r5, r6, lr}
 80044ca:	4604      	mov	r4, r0
 80044cc:	460d      	mov	r5, r1
	if(x == 0)
	{
		buf = 0;
	}

	if((x <= 6.66)&&(x > 0))
 80044ce:	a326      	add	r3, pc, #152	; (adr r3, 8004568 <ws_set_battery+0xa0>)
 80044d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d4:	f7fc fae8 	bl	8000aa8 <__aeabi_dcmple>
 80044d8:	b150      	cbz	r0, 80044f0 <ws_set_battery+0x28>
 80044da:	2200      	movs	r2, #0
 80044dc:	2300      	movs	r3, #0
 80044de:	4620      	mov	r0, r4
 80044e0:	4629      	mov	r1, r5
 80044e2:	f7fc faf5 	bl	8000ad0 <__aeabi_dcmpgt>
 80044e6:	b108      	cbz	r0, 80044ec <ws_set_battery+0x24>
	{
		buf = 1;
 80044e8:	2601      	movs	r6, #1
 80044ea:	e002      	b.n	80044f2 <ws_set_battery+0x2a>
	if((x <= 6.66)&&(x > 0))
 80044ec:	2600      	movs	r6, #0
 80044ee:	e000      	b.n	80044f2 <ws_set_battery+0x2a>
 80044f0:	2600      	movs	r6, #0
	}

	if((x > 6.66)&&(x <= 13.33))
 80044f2:	a31d      	add	r3, pc, #116	; (adr r3, 8004568 <ws_set_battery+0xa0>)
 80044f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f8:	4620      	mov	r0, r4
 80044fa:	4629      	mov	r1, r5
 80044fc:	f7fc fae8 	bl	8000ad0 <__aeabi_dcmpgt>
 8004500:	b140      	cbz	r0, 8004514 <ws_set_battery+0x4c>
 8004502:	a31b      	add	r3, pc, #108	; (adr r3, 8004570 <ws_set_battery+0xa8>)
 8004504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004508:	4620      	mov	r0, r4
 800450a:	4629      	mov	r1, r5
 800450c:	f7fc facc 	bl	8000aa8 <__aeabi_dcmple>
 8004510:	b100      	cbz	r0, 8004514 <ws_set_battery+0x4c>
	{
		buf = 2;
 8004512:	2602      	movs	r6, #2
	}

	if((x > 13.33)&&(x <= 20))
 8004514:	a316      	add	r3, pc, #88	; (adr r3, 8004570 <ws_set_battery+0xa8>)
 8004516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451a:	4620      	mov	r0, r4
 800451c:	4629      	mov	r1, r5
 800451e:	f7fc fad7 	bl	8000ad0 <__aeabi_dcmpgt>
 8004522:	b138      	cbz	r0, 8004534 <ws_set_battery+0x6c>
 8004524:	2200      	movs	r2, #0
 8004526:	4b14      	ldr	r3, [pc, #80]	; (8004578 <ws_set_battery+0xb0>)
 8004528:	4620      	mov	r0, r4
 800452a:	4629      	mov	r1, r5
 800452c:	f7fc fabc 	bl	8000aa8 <__aeabi_dcmple>
 8004530:	b100      	cbz	r0, 8004534 <ws_set_battery+0x6c>
	{
		buf = 3;
 8004532:	2603      	movs	r6, #3
	}

	if(x > 20)
 8004534:	2200      	movs	r2, #0
 8004536:	4b10      	ldr	r3, [pc, #64]	; (8004578 <ws_set_battery+0xb0>)
 8004538:	4620      	mov	r0, r4
 800453a:	4629      	mov	r1, r5
 800453c:	f7fc fac8 	bl	8000ad0 <__aeabi_dcmpgt>
 8004540:	b150      	cbz	r0, 8004558 <ws_set_battery+0x90>
	{
		buf = floor(x/5.25);
 8004542:	2200      	movs	r2, #0
 8004544:	4b0d      	ldr	r3, [pc, #52]	; (800457c <ws_set_battery+0xb4>)
 8004546:	4620      	mov	r0, r4
 8004548:	4629      	mov	r1, r5
 800454a:	f7fc f95b 	bl	8000804 <__aeabi_ddiv>
 800454e:	f002 fea3 	bl	8007298 <floor>
 8004552:	f7fc fb05 	bl	8000b60 <__aeabi_d2uiz>
 8004556:	b2c6      	uxtb	r6, r0
	}


	if(buf > 19)
 8004558:	2e13      	cmp	r6, #19
 800455a:	d900      	bls.n	800455e <ws_set_battery+0x96>
	{
		buf = 19;
 800455c:	2613      	movs	r6, #19
	}
	ws_bat = buf;
 800455e:	4b08      	ldr	r3, [pc, #32]	; (8004580 <ws_set_battery+0xb8>)
 8004560:	701e      	strb	r6, [r3, #0]
}
 8004562:	bd70      	pop	{r4, r5, r6, pc}
 8004564:	f3af 8000 	nop.w
 8004568:	0a3d70a4 	.word	0x0a3d70a4
 800456c:	401aa3d7 	.word	0x401aa3d7
 8004570:	c28f5c29 	.word	0xc28f5c29
 8004574:	402aa8f5 	.word	0x402aa8f5
 8004578:	40340000 	.word	0x40340000
 800457c:	40150000 	.word	0x40150000
 8004580:	200003e0 	.word	0x200003e0

08004584 <ws_set_brightness>:

void ws_set_brightness(uint8_t y)
{
	ws_led_bright = y;
 8004584:	4b01      	ldr	r3, [pc, #4]	; (800458c <ws_set_brightness+0x8>)
 8004586:	7018      	strb	r0, [r3, #0]

}
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	200003e1 	.word	0x200003e1

08004590 <set_backlight>:
#include "../PWM/pwm.h"
#include "stm32f1xx_hal.h"

void set_backlight(int bl)
{
	  TIM3->CCR1 = bl;
 8004590:	4b02      	ldr	r3, [pc, #8]	; (800459c <set_backlight+0xc>)
 8004592:	6358      	str	r0, [r3, #52]	; 0x34
	  TIM3->CCR2 = bl;
 8004594:	6398      	str	r0, [r3, #56]	; 0x38
	  TIM3->CCR3 = bl;
 8004596:	63d8      	str	r0, [r3, #60]	; 0x3c
}
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	40000400 	.word	0x40000400

080045a0 <pwm_init>:

// PWM odpowiada za ustalenie jasnosci backlightu. Do generowania sygnalu potrzebny jest timer.
void pwm_init() {
 80045a0:	b510      	push	{r4, lr}
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // Uruchamia generowanie PWM przez timer 4 na kanale 1
 80045a2:	4c07      	ldr	r4, [pc, #28]	; (80045c0 <pwm_init+0x20>)
 80045a4:	2100      	movs	r1, #0
 80045a6:	4620      	mov	r0, r4
 80045a8:	f7fe f99e 	bl	80028e8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // Uruchamia generowanie PWM przez timer 4 na kanale 2
 80045ac:	2104      	movs	r1, #4
 80045ae:	4620      	mov	r0, r4
 80045b0:	f7fe f99a 	bl	80028e8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // Uruchamia generowanie PWM przez timer 4 na kanale 3
 80045b4:	2108      	movs	r1, #8
 80045b6:	4620      	mov	r0, r4
 80045b8:	f7fe f996 	bl	80028e8 <HAL_TIM_PWM_Start>
}
 80045bc:	bd10      	pop	{r4, pc}
 80045be:	bf00      	nop
 80045c0:	20000478 	.word	0x20000478

080045c4 <gui_init>:
#include "string.h"


// Wedlug danych wysylanych po UART w funkcjach ws_* wszystkie ledy od predkosci
// i backlightu powinny byc wylaczone.
void gui_init() {
 80045c4:	b508      	push	{r3, lr}
	displays_init();
 80045c6:	f7ff fe0b 	bl	80041e0 <displays_init>
	Lcd_init();
 80045ca:	f7ff fa11 	bl	80039f0 <Lcd_init>
	pwm_init();
 80045ce:	f7ff ffe7 	bl	80045a0 <pwm_init>
	ws_set_brightness(gui_brightness);
 80045d2:	4b05      	ldr	r3, [pc, #20]	; (80045e8 <gui_init+0x24>)
 80045d4:	7818      	ldrb	r0, [r3, #0]
 80045d6:	f7ff ffd5 	bl	8004584 <ws_set_brightness>
	ws_senddata();
 80045da:	f7ff fee1 	bl	80043a0 <ws_senddata>
	set_backlight(0);
 80045de:	2000      	movs	r0, #0
 80045e0:	f7ff ffd6 	bl	8004590 <set_backlight>

}
 80045e4:	bd08      	pop	{r3, pc}
 80045e6:	bf00      	nop
 80045e8:	20000040 	.word	0x20000040
 80045ec:	00000000 	.word	0x00000000

080045f0 <gui_screen_intro>:
		}
	}

}

void gui_screen_intro() {
 80045f0:	b5d0      	push	{r4, r6, r7, lr}
	display_logo();
 80045f2:	f7ff fe7b 	bl	80042ec <display_logo>
	display_power_disable();
 80045f6:	f7ff fca1 	bl	8003f3c <display_power_disable>
	display_battery_disable();
 80045fa:	f7ff fcc7 	bl	8003f8c <display_battery_disable>
	display_gear_disable();
 80045fe:	f7ff fced 	bl	8003fdc <display_gear_disable>

	ws_set_leds(0xFF, 0xFF);
 8004602:	21ff      	movs	r1, #255	; 0xff
 8004604:	4608      	mov	r0, r1
 8004606:	f7ff ff0f 	bl	8004428 <ws_set_leds>
	ws_senddata();
 800460a:	f7ff fec9 	bl	80043a0 <ws_senddata>

	Lcd_clr();
 800460e:	f7ff fa73 	bl	8003af8 <Lcd_clr>
	asm("nop");
 8004612:	bf00      	nop
	Lcd_string("   PUT Solar");
 8004614:	4824      	ldr	r0, [pc, #144]	; (80046a8 <gui_screen_intro+0xb8>)
 8004616:	f7ff fa77 	bl	8003b08 <Lcd_string>
	Lcd_cursor(1, 0);
 800461a:	2100      	movs	r1, #0
 800461c:	2001      	movs	r0, #1
 800461e:	f7ff fa93 	bl	8003b48 <Lcd_cursor>
	Lcd_string("    Dynamics");
 8004622:	4822      	ldr	r0, [pc, #136]	; (80046ac <gui_screen_intro+0xbc>)
 8004624:	f7ff fa70 	bl	8003b08 <Lcd_string>

	HAL_Delay(200);
 8004628:	20c8      	movs	r0, #200	; 0xc8
 800462a:	f7fc fb03 	bl	8000c34 <HAL_Delay>

	for (int j = 1; j <= (gui_brightness * 0.7); j++) {
 800462e:	2401      	movs	r4, #1
 8004630:	e006      	b.n	8004640 <gui_screen_intro+0x50>
		set_backlight(j);
 8004632:	4620      	mov	r0, r4
 8004634:	f7ff ffac 	bl	8004590 <set_backlight>
		HAL_Delay(10);
 8004638:	200a      	movs	r0, #10
 800463a:	f7fc fafb 	bl	8000c34 <HAL_Delay>
	for (int j = 1; j <= (gui_brightness * 0.7); j++) {
 800463e:	3401      	adds	r4, #1
 8004640:	4620      	mov	r0, r4
 8004642:	f7fb ff4b 	bl	80004dc <__aeabi_i2d>
 8004646:	4606      	mov	r6, r0
 8004648:	460f      	mov	r7, r1
 800464a:	4b19      	ldr	r3, [pc, #100]	; (80046b0 <gui_screen_intro+0xc0>)
 800464c:	7818      	ldrb	r0, [r3, #0]
 800464e:	f7fb ff45 	bl	80004dc <__aeabi_i2d>
 8004652:	a313      	add	r3, pc, #76	; (adr r3, 80046a0 <gui_screen_intro+0xb0>)
 8004654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004658:	f7fb ffaa 	bl	80005b0 <__aeabi_dmul>
 800465c:	4602      	mov	r2, r0
 800465e:	460b      	mov	r3, r1
 8004660:	4630      	mov	r0, r6
 8004662:	4639      	mov	r1, r7
 8004664:	f7fc fa20 	bl	8000aa8 <__aeabi_dcmple>
 8004668:	2800      	cmp	r0, #0
 800466a:	d1e2      	bne.n	8004632 <gui_screen_intro+0x42>
	}

	ws_set_leds(0, 0);
 800466c:	2100      	movs	r1, #0
 800466e:	4608      	mov	r0, r1
 8004670:	f7ff feda 	bl	8004428 <ws_set_leds>
	ws_senddata();
 8004674:	f7ff fe94 	bl	80043a0 <ws_senddata>

	set_backlight(gui_brightness * 0.7);
 8004678:	4b0d      	ldr	r3, [pc, #52]	; (80046b0 <gui_screen_intro+0xc0>)
 800467a:	7818      	ldrb	r0, [r3, #0]
 800467c:	f7fb ff2e 	bl	80004dc <__aeabi_i2d>
 8004680:	a307      	add	r3, pc, #28	; (adr r3, 80046a0 <gui_screen_intro+0xb0>)
 8004682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004686:	f7fb ff93 	bl	80005b0 <__aeabi_dmul>
 800468a:	f7fc fa41 	bl	8000b10 <__aeabi_d2iz>
 800468e:	f7ff ff7f 	bl	8004590 <set_backlight>

	HAL_Delay(100);
 8004692:	2064      	movs	r0, #100	; 0x64
 8004694:	f7fc face 	bl	8000c34 <HAL_Delay>
}
 8004698:	bdd0      	pop	{r4, r6, r7, pc}
 800469a:	bf00      	nop
 800469c:	f3af 8000 	nop.w
 80046a0:	66666666 	.word	0x66666666
 80046a4:	3fe66666 	.word	0x3fe66666
 80046a8:	0800aad8 	.word	0x0800aad8
 80046ac:	0800aae8 	.word	0x0800aae8
 80046b0:	20000040 	.word	0x20000040

080046b4 <gui_display_statement>:



void gui_display_statement(uint8_t number)
{
 80046b4:	b508      	push	{r3, lr}

	switch(number)
 80046b6:	3801      	subs	r0, #1
 80046b8:	2806      	cmp	r0, #6
 80046ba:	d812      	bhi.n	80046e2 <gui_display_statement+0x2e>
 80046bc:	e8df f000 	tbb	[pc, r0]
 80046c0:	2e201204 	.word	0x2e201204
 80046c4:	4a3c      	.short	0x4a3c
 80046c6:	58          	.byte	0x58
 80046c7:	00          	.byte	0x00
	{

			case 1:

				Lcd_clr();
 80046c8:	f7ff fa16 	bl	8003af8 <Lcd_clr>
				asm("nop");
 80046cc:	bf00      	nop
				Lcd_string("  Low Battery");
 80046ce:	482f      	ldr	r0, [pc, #188]	; (800478c <gui_display_statement+0xd8>)
 80046d0:	f7ff fa1a 	bl	8003b08 <Lcd_string>
				Lcd_cursor(1,0);
 80046d4:	2100      	movs	r1, #0
 80046d6:	2001      	movs	r0, #1
 80046d8:	f7ff fa36 	bl	8003b48 <Lcd_cursor>
				Lcd_string("");
 80046dc:	482c      	ldr	r0, [pc, #176]	; (8004790 <gui_display_statement+0xdc>)
 80046de:	f7ff fa13 	bl	8003b08 <Lcd_string>
	    break;
	}



}
 80046e2:	bd08      	pop	{r3, pc}
				Lcd_clr();
 80046e4:	f7ff fa08 	bl	8003af8 <Lcd_clr>
				asm("nop");
 80046e8:	bf00      	nop
				Lcd_string(" Cruise control");
 80046ea:	482a      	ldr	r0, [pc, #168]	; (8004794 <gui_display_statement+0xe0>)
 80046ec:	f7ff fa0c 	bl	8003b08 <Lcd_string>
				Lcd_cursor(1,0);
 80046f0:	2100      	movs	r1, #0
 80046f2:	2001      	movs	r0, #1
 80046f4:	f7ff fa28 	bl	8003b48 <Lcd_cursor>
				Lcd_string("       ENABLED");
 80046f8:	4827      	ldr	r0, [pc, #156]	; (8004798 <gui_display_statement+0xe4>)
 80046fa:	f7ff fa05 	bl	8003b08 <Lcd_string>
				break;
 80046fe:	e7f0      	b.n	80046e2 <gui_display_statement+0x2e>
				Lcd_clr();
 8004700:	f7ff f9fa 	bl	8003af8 <Lcd_clr>
				asm("nop");
 8004704:	bf00      	nop
				Lcd_string(" Cruise control");
 8004706:	4823      	ldr	r0, [pc, #140]	; (8004794 <gui_display_statement+0xe0>)
 8004708:	f7ff f9fe 	bl	8003b08 <Lcd_string>
				Lcd_cursor(1,0);
 800470c:	2100      	movs	r1, #0
 800470e:	2001      	movs	r0, #1
 8004710:	f7ff fa1a 	bl	8003b48 <Lcd_cursor>
				Lcd_string("    DISABLED");
 8004714:	4821      	ldr	r0, [pc, #132]	; (800479c <gui_display_statement+0xe8>)
 8004716:	f7ff f9f7 	bl	8003b08 <Lcd_string>
				break;
 800471a:	e7e2      	b.n	80046e2 <gui_display_statement+0x2e>
				Lcd_clr();
 800471c:	f7ff f9ec 	bl	8003af8 <Lcd_clr>
				asm("nop");
 8004720:	bf00      	nop
				Lcd_string("     Charging");
 8004722:	481f      	ldr	r0, [pc, #124]	; (80047a0 <gui_display_statement+0xec>)
 8004724:	f7ff f9f0 	bl	8003b08 <Lcd_string>
				Lcd_cursor(1,0);
 8004728:	2100      	movs	r1, #0
 800472a:	2001      	movs	r0, #1
 800472c:	f7ff fa0c 	bl	8003b48 <Lcd_cursor>
				Lcd_string("");
 8004730:	4817      	ldr	r0, [pc, #92]	; (8004790 <gui_display_statement+0xdc>)
 8004732:	f7ff f9e9 	bl	8003b08 <Lcd_string>
				break;
 8004736:	e7d4      	b.n	80046e2 <gui_display_statement+0x2e>
				Lcd_clr();
 8004738:	f7ff f9de 	bl	8003af8 <Lcd_clr>
				asm("nop");
 800473c:	bf00      	nop
				Lcd_string("     Motor");
 800473e:	4819      	ldr	r0, [pc, #100]	; (80047a4 <gui_display_statement+0xf0>)
 8004740:	f7ff f9e2 	bl	8003b08 <Lcd_string>
				Lcd_cursor(1,0);
 8004744:	2100      	movs	r1, #0
 8004746:	2001      	movs	r0, #1
 8004748:	f7ff f9fe 	bl	8003b48 <Lcd_cursor>
				Lcd_string("    Failure");
 800474c:	4816      	ldr	r0, [pc, #88]	; (80047a8 <gui_display_statement+0xf4>)
 800474e:	f7ff f9db 	bl	8003b08 <Lcd_string>
				break;
 8004752:	e7c6      	b.n	80046e2 <gui_display_statement+0x2e>
				Lcd_clr();
 8004754:	f7ff f9d0 	bl	8003af8 <Lcd_clr>
				asm("nop");
 8004758:	bf00      	nop
				Lcd_string("    Battery");
 800475a:	4814      	ldr	r0, [pc, #80]	; (80047ac <gui_display_statement+0xf8>)
 800475c:	f7ff f9d4 	bl	8003b08 <Lcd_string>
				Lcd_cursor(1,0);
 8004760:	2100      	movs	r1, #0
 8004762:	2001      	movs	r0, #1
 8004764:	f7ff f9f0 	bl	8003b48 <Lcd_cursor>
				Lcd_string("    Failure");
 8004768:	480f      	ldr	r0, [pc, #60]	; (80047a8 <gui_display_statement+0xf4>)
 800476a:	f7ff f9cd 	bl	8003b08 <Lcd_string>
				break;
 800476e:	e7b8      	b.n	80046e2 <gui_display_statement+0x2e>
				Lcd_clr();
 8004770:	f7ff f9c2 	bl	8003af8 <Lcd_clr>
				asm("nop");
 8004774:	bf00      	nop
				Lcd_string("  Unidentified");
 8004776:	480e      	ldr	r0, [pc, #56]	; (80047b0 <gui_display_statement+0xfc>)
 8004778:	f7ff f9c6 	bl	8003b08 <Lcd_string>
				Lcd_cursor(1,0);
 800477c:	2100      	movs	r1, #0
 800477e:	2001      	movs	r0, #1
 8004780:	f7ff f9e2 	bl	8003b48 <Lcd_cursor>
				Lcd_string("    Failure");
 8004784:	4808      	ldr	r0, [pc, #32]	; (80047a8 <gui_display_statement+0xf4>)
 8004786:	f7ff f9bf 	bl	8003b08 <Lcd_string>
}
 800478a:	e7aa      	b.n	80046e2 <gui_display_statement+0x2e>
 800478c:	0800aa54 	.word	0x0800aa54
 8004790:	0800ab10 	.word	0x0800ab10
 8004794:	0800aa64 	.word	0x0800aa64
 8004798:	0800aa74 	.word	0x0800aa74
 800479c:	0800aa84 	.word	0x0800aa84
 80047a0:	0800aa94 	.word	0x0800aa94
 80047a4:	0800aaa4 	.word	0x0800aaa4
 80047a8:	0800aab0 	.word	0x0800aab0
 80047ac:	0800aabc 	.word	0x0800aabc
 80047b0:	0800aac8 	.word	0x0800aac8
 80047b4:	00000000 	.word	0x00000000

080047b8 <gui_screen_main>:
void gui_screen_main() {
 80047b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047ba:	b083      	sub	sp, #12
	TEST_counter++;
 80047bc:	4aa2      	ldr	r2, [pc, #648]	; (8004a48 <gui_screen_main+0x290>)
 80047be:	8813      	ldrh	r3, [r2, #0]
 80047c0:	3301      	adds	r3, #1
 80047c2:	8013      	strh	r3, [r2, #0]
	TEST_counter2++;
 80047c4:	4aa1      	ldr	r2, [pc, #644]	; (8004a4c <gui_screen_main+0x294>)
 80047c6:	8813      	ldrh	r3, [r2, #0]
 80047c8:	3301      	adds	r3, #1
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	8013      	strh	r3, [r2, #0]
	if (TEST_counter2 > 3) {
 80047ce:	2b03      	cmp	r3, #3
 80047d0:	d90b      	bls.n	80047ea <gui_screen_main+0x32>
		TEST_counter2 = 0;
 80047d2:	4613      	mov	r3, r2
 80047d4:	2200      	movs	r2, #0
 80047d6:	801a      	strh	r2, [r3, #0]
		gui_battery = gui_battery - 0.5;
 80047d8:	4c9d      	ldr	r4, [pc, #628]	; (8004a50 <gui_screen_main+0x298>)
 80047da:	2200      	movs	r2, #0
 80047dc:	4b9d      	ldr	r3, [pc, #628]	; (8004a54 <gui_screen_main+0x29c>)
 80047de:	e9d4 0100 	ldrd	r0, r1, [r4]
 80047e2:	f7fb fd2d 	bl	8000240 <__aeabi_dsub>
 80047e6:	e9c4 0100 	strd	r0, r1, [r4]
	if (gui_battery < 1) {
 80047ea:	2200      	movs	r2, #0
 80047ec:	4b9a      	ldr	r3, [pc, #616]	; (8004a58 <gui_screen_main+0x2a0>)
 80047ee:	4998      	ldr	r1, [pc, #608]	; (8004a50 <gui_screen_main+0x298>)
 80047f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80047f4:	f7fc f94e 	bl	8000a94 <__aeabi_dcmplt>
 80047f8:	2800      	cmp	r0, #0
 80047fa:	f040 80ad 	bne.w	8004958 <gui_screen_main+0x1a0>
	TEST_counter3++;
 80047fe:	4a97      	ldr	r2, [pc, #604]	; (8004a5c <gui_screen_main+0x2a4>)
 8004800:	8813      	ldrh	r3, [r2, #0]
 8004802:	3301      	adds	r3, #1
 8004804:	b29b      	uxth	r3, r3
 8004806:	8013      	strh	r3, [r2, #0]
	if (TEST_counter3 > 2) {
 8004808:	2b02      	cmp	r3, #2
 800480a:	d90b      	bls.n	8004824 <gui_screen_main+0x6c>
		TEST_counter3 = 0;
 800480c:	4613      	mov	r3, r2
 800480e:	2200      	movs	r2, #0
 8004810:	801a      	strh	r2, [r3, #0]
		if (TEST_flag == 0) {
 8004812:	4b93      	ldr	r3, [pc, #588]	; (8004a60 <gui_screen_main+0x2a8>)
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	f040 80a7 	bne.w	800496a <gui_screen_main+0x1b2>
			gui_speed++;
 800481c:	4a91      	ldr	r2, [pc, #580]	; (8004a64 <gui_screen_main+0x2ac>)
 800481e:	7813      	ldrb	r3, [r2, #0]
 8004820:	3301      	adds	r3, #1
 8004822:	7013      	strb	r3, [r2, #0]
	if (gui_speed > 140) {
 8004824:	4b8f      	ldr	r3, [pc, #572]	; (8004a64 <gui_screen_main+0x2ac>)
 8004826:	781c      	ldrb	r4, [r3, #0]
 8004828:	2c8c      	cmp	r4, #140	; 0x8c
 800482a:	d902      	bls.n	8004832 <gui_screen_main+0x7a>
		TEST_flag = 1;
 800482c:	4b8c      	ldr	r3, [pc, #560]	; (8004a60 <gui_screen_main+0x2a8>)
 800482e:	2201      	movs	r2, #1
 8004830:	701a      	strb	r2, [r3, #0]
	if (gui_speed < 1) {
 8004832:	b914      	cbnz	r4, 800483a <gui_screen_main+0x82>
		TEST_flag = 0;
 8004834:	4b8a      	ldr	r3, [pc, #552]	; (8004a60 <gui_screen_main+0x2a8>)
 8004836:	2200      	movs	r2, #0
 8004838:	701a      	strb	r2, [r3, #0]
	gui_charging = 0;
 800483a:	4b8b      	ldr	r3, [pc, #556]	; (8004a68 <gui_screen_main+0x2b0>)
 800483c:	2200      	movs	r2, #0
 800483e:	701a      	strb	r2, [r3, #0]
	if (TEST_flag == 0 && gui_power != 12) {
 8004840:	4b87      	ldr	r3, [pc, #540]	; (8004a60 <gui_screen_main+0x2a8>)
 8004842:	781d      	ldrb	r5, [r3, #0]
 8004844:	bb55      	cbnz	r5, 800489c <gui_screen_main+0xe4>
 8004846:	4b89      	ldr	r3, [pc, #548]	; (8004a6c <gui_screen_main+0x2b4>)
 8004848:	e9d3 6700 	ldrd	r6, r7, [r3]
 800484c:	2200      	movs	r2, #0
 800484e:	4b88      	ldr	r3, [pc, #544]	; (8004a70 <gui_screen_main+0x2b8>)
 8004850:	4630      	mov	r0, r6
 8004852:	4639      	mov	r1, r7
 8004854:	f7fc f914 	bl	8000a80 <__aeabi_dcmpeq>
 8004858:	bb00      	cbnz	r0, 800489c <gui_screen_main+0xe4>
		TEST_counter2++;
 800485a:	4a7c      	ldr	r2, [pc, #496]	; (8004a4c <gui_screen_main+0x294>)
 800485c:	8813      	ldrh	r3, [r2, #0]
 800485e:	3301      	adds	r3, #1
 8004860:	b29b      	uxth	r3, r3
 8004862:	8013      	strh	r3, [r2, #0]
		if (TEST_counter2 > 3) {
 8004864:	2b03      	cmp	r3, #3
 8004866:	d90c      	bls.n	8004882 <gui_screen_main+0xca>
			TEST_counter2 = 0;
 8004868:	4613      	mov	r3, r2
 800486a:	2200      	movs	r2, #0
 800486c:	801a      	strh	r2, [r3, #0]
			gui_power = gui_power + 0.2;
 800486e:	a372      	add	r3, pc, #456	; (adr r3, 8004a38 <gui_screen_main+0x280>)
 8004870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004874:	4630      	mov	r0, r6
 8004876:	4639      	mov	r1, r7
 8004878:	f7fb fce4 	bl	8000244 <__adddf3>
 800487c:	4b7b      	ldr	r3, [pc, #492]	; (8004a6c <gui_screen_main+0x2b4>)
 800487e:	e9c3 0100 	strd	r0, r1, [r3]
		if (gui_power > 12) {
 8004882:	2200      	movs	r2, #0
 8004884:	4b7a      	ldr	r3, [pc, #488]	; (8004a70 <gui_screen_main+0x2b8>)
 8004886:	4979      	ldr	r1, [pc, #484]	; (8004a6c <gui_screen_main+0x2b4>)
 8004888:	e9d1 0100 	ldrd	r0, r1, [r1]
 800488c:	f7fc f920 	bl	8000ad0 <__aeabi_dcmpgt>
 8004890:	b120      	cbz	r0, 800489c <gui_screen_main+0xe4>
			gui_power = 12;
 8004892:	4b76      	ldr	r3, [pc, #472]	; (8004a6c <gui_screen_main+0x2b4>)
 8004894:	2000      	movs	r0, #0
 8004896:	4976      	ldr	r1, [pc, #472]	; (8004a70 <gui_screen_main+0x2b8>)
 8004898:	e9c3 0100 	strd	r0, r1, [r3]
	if (TEST_flag == 1) {
 800489c:	2d01      	cmp	r5, #1
 800489e:	d069      	beq.n	8004974 <gui_screen_main+0x1bc>
	TEST_counter4++;
 80048a0:	4a74      	ldr	r2, [pc, #464]	; (8004a74 <gui_screen_main+0x2bc>)
 80048a2:	8813      	ldrh	r3, [r2, #0]
 80048a4:	3301      	adds	r3, #1
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	8013      	strh	r3, [r2, #0]
	if (TEST_counter4 > 20) {
 80048aa:	2b14      	cmp	r3, #20
 80048ac:	d90f      	bls.n	80048ce <gui_screen_main+0x116>
		TEST_counter4 = 0;
 80048ae:	4613      	mov	r3, r2
 80048b0:	2200      	movs	r2, #0
 80048b2:	801a      	strh	r2, [r3, #0]
		if (TEST_poprz_stan == 0) {
 80048b4:	4b70      	ldr	r3, [pc, #448]	; (8004a78 <gui_screen_main+0x2c0>)
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d17b      	bne.n	80049b4 <gui_screen_main+0x1fc>
			gui_leds_byte1 = 0b11000101;
 80048bc:	4b6f      	ldr	r3, [pc, #444]	; (8004a7c <gui_screen_main+0x2c4>)
 80048be:	22c5      	movs	r2, #197	; 0xc5
 80048c0:	701a      	strb	r2, [r3, #0]
			gui_leds_byte2 = 0b00100001;
 80048c2:	4b6f      	ldr	r3, [pc, #444]	; (8004a80 <gui_screen_main+0x2c8>)
 80048c4:	2221      	movs	r2, #33	; 0x21
 80048c6:	701a      	strb	r2, [r3, #0]
			TEST_poprz_stan = 1;
 80048c8:	4b6b      	ldr	r3, [pc, #428]	; (8004a78 <gui_screen_main+0x2c0>)
 80048ca:	2201      	movs	r2, #1
 80048cc:	701a      	strb	r2, [r3, #0]
	gui_picture_iteration++;
 80048ce:	4a6d      	ldr	r2, [pc, #436]	; (8004a84 <gui_screen_main+0x2cc>)
 80048d0:	7813      	ldrb	r3, [r2, #0]
 80048d2:	3301      	adds	r3, #1
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	7013      	strb	r3, [r2, #0]
	if (gui_picture_iteration > 7) {
 80048d8:	2b07      	cmp	r3, #7
 80048da:	d902      	bls.n	80048e2 <gui_screen_main+0x12a>
		gui_picture_iteration = 0;
 80048dc:	4613      	mov	r3, r2
 80048de:	2200      	movs	r2, #0
 80048e0:	701a      	strb	r2, [r3, #0]
	display_speed(gui_speed, gui_cruise_speed_set);
 80048e2:	4b69      	ldr	r3, [pc, #420]	; (8004a88 <gui_screen_main+0x2d0>)
 80048e4:	781d      	ldrb	r5, [r3, #0]
 80048e6:	4620      	mov	r0, r4
 80048e8:	f7fb fde8 	bl	80004bc <__aeabi_ui2d>
 80048ec:	462a      	mov	r2, r5
 80048ee:	f7ff fbef 	bl	80040d0 <display_speed>
	ws_set_leds(gui_leds_byte1, gui_leds_byte2);
 80048f2:	4b63      	ldr	r3, [pc, #396]	; (8004a80 <gui_screen_main+0x2c8>)
 80048f4:	7819      	ldrb	r1, [r3, #0]
 80048f6:	4b61      	ldr	r3, [pc, #388]	; (8004a7c <gui_screen_main+0x2c4>)
 80048f8:	7818      	ldrb	r0, [r3, #0]
 80048fa:	f7ff fd95 	bl	8004428 <ws_set_leds>
	ws_set_speed(gui_speed);
 80048fe:	4b59      	ldr	r3, [pc, #356]	; (8004a64 <gui_screen_main+0x2ac>)
 8004900:	7818      	ldrb	r0, [r3, #0]
 8004902:	f7ff fd9b 	bl	800443c <ws_set_speed>
	ws_set_power(gui_power, gui_charging);
 8004906:	4b58      	ldr	r3, [pc, #352]	; (8004a68 <gui_screen_main+0x2b0>)
 8004908:	781a      	ldrb	r2, [r3, #0]
 800490a:	4b58      	ldr	r3, [pc, #352]	; (8004a6c <gui_screen_main+0x2b4>)
 800490c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004910:	f7ff fdaa 	bl	8004468 <ws_set_power>
	ws_set_battery(gui_battery);
 8004914:	4b4e      	ldr	r3, [pc, #312]	; (8004a50 <gui_screen_main+0x298>)
 8004916:	e9d3 0100 	ldrd	r0, r1, [r3]
 800491a:	f7ff fdd5 	bl	80044c8 <ws_set_battery>
	ws_senddata();
 800491e:	f7ff fd3f 	bl	80043a0 <ws_senddata>
	if ((gui_picture_iteration == 0) || (gui_picture_iteration == 2)
 8004922:	4b58      	ldr	r3, [pc, #352]	; (8004a84 <gui_screen_main+0x2cc>)
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	b12b      	cbz	r3, 8004934 <gui_screen_main+0x17c>
 8004928:	2b02      	cmp	r3, #2
 800492a:	d003      	beq.n	8004934 <gui_screen_main+0x17c>
			|| (gui_picture_iteration == 4) || (gui_picture_iteration == 6)) {
 800492c:	2b04      	cmp	r3, #4
 800492e:	d001      	beq.n	8004934 <gui_screen_main+0x17c>
 8004930:	2b06      	cmp	r3, #6
 8004932:	d10b      	bne.n	800494c <gui_screen_main+0x194>
		display_power(gui_power, gui_charging);
 8004934:	4b4c      	ldr	r3, [pc, #304]	; (8004a68 <gui_screen_main+0x2b0>)
 8004936:	781a      	ldrb	r2, [r3, #0]
 8004938:	4b4c      	ldr	r3, [pc, #304]	; (8004a6c <gui_screen_main+0x2b4>)
 800493a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800493e:	f7ff fb75 	bl	800402c <display_power>
		display_battery(gui_battery);
 8004942:	4b43      	ldr	r3, [pc, #268]	; (8004a50 <gui_screen_main+0x298>)
 8004944:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004948:	f7ff fa5c 	bl	8003e04 <display_battery>
	if (gui_picture_iteration == 7) {
 800494c:	4b4d      	ldr	r3, [pc, #308]	; (8004a84 <gui_screen_main+0x2cc>)
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	2b07      	cmp	r3, #7
 8004952:	d039      	beq.n	80049c8 <gui_screen_main+0x210>
}
 8004954:	b003      	add	sp, #12
 8004956:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gui_battery = 100;
 8004958:	4b3d      	ldr	r3, [pc, #244]	; (8004a50 <gui_screen_main+0x298>)
 800495a:	2000      	movs	r0, #0
 800495c:	494b      	ldr	r1, [pc, #300]	; (8004a8c <gui_screen_main+0x2d4>)
 800495e:	e9c3 0100 	strd	r0, r1, [r3]
		TEST_flag = 0;
 8004962:	4b3f      	ldr	r3, [pc, #252]	; (8004a60 <gui_screen_main+0x2a8>)
 8004964:	2200      	movs	r2, #0
 8004966:	701a      	strb	r2, [r3, #0]
 8004968:	e749      	b.n	80047fe <gui_screen_main+0x46>
			gui_speed--;
 800496a:	4a3e      	ldr	r2, [pc, #248]	; (8004a64 <gui_screen_main+0x2ac>)
 800496c:	7813      	ldrb	r3, [r2, #0]
 800496e:	3b01      	subs	r3, #1
 8004970:	7013      	strb	r3, [r2, #0]
 8004972:	e757      	b.n	8004824 <gui_screen_main+0x6c>
		TEST_counter2++;
 8004974:	4a35      	ldr	r2, [pc, #212]	; (8004a4c <gui_screen_main+0x294>)
 8004976:	8813      	ldrh	r3, [r2, #0]
 8004978:	3301      	adds	r3, #1
 800497a:	b29b      	uxth	r3, r3
 800497c:	8013      	strh	r3, [r2, #0]
		if (TEST_counter2 > 3) {
 800497e:	2b03      	cmp	r3, #3
 8004980:	d98e      	bls.n	80048a0 <gui_screen_main+0xe8>
			TEST_counter2 = 0;
 8004982:	4613      	mov	r3, r2
 8004984:	2200      	movs	r2, #0
 8004986:	801a      	strh	r2, [r3, #0]
			gui_power = gui_power - 0.3;
 8004988:	4d38      	ldr	r5, [pc, #224]	; (8004a6c <gui_screen_main+0x2b4>)
 800498a:	a32d      	add	r3, pc, #180	; (adr r3, 8004a40 <gui_screen_main+0x288>)
 800498c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004990:	e9d5 0100 	ldrd	r0, r1, [r5]
 8004994:	f7fb fc54 	bl	8000240 <__aeabi_dsub>
 8004998:	e9c5 0100 	strd	r0, r1, [r5]
			if (gui_power < 0) {
 800499c:	2200      	movs	r2, #0
 800499e:	2300      	movs	r3, #0
 80049a0:	f7fc f878 	bl	8000a94 <__aeabi_dcmplt>
 80049a4:	2800      	cmp	r0, #0
 80049a6:	f43f af7b 	beq.w	80048a0 <gui_screen_main+0xe8>
				gui_power = 0;
 80049aa:	2000      	movs	r0, #0
 80049ac:	2100      	movs	r1, #0
 80049ae:	e9c5 0100 	strd	r0, r1, [r5]
 80049b2:	e775      	b.n	80048a0 <gui_screen_main+0xe8>
			gui_leds_byte1 = 0b01000101;
 80049b4:	4b31      	ldr	r3, [pc, #196]	; (8004a7c <gui_screen_main+0x2c4>)
 80049b6:	2245      	movs	r2, #69	; 0x45
 80049b8:	701a      	strb	r2, [r3, #0]
			gui_leds_byte2 = 0b01100000;
 80049ba:	4b31      	ldr	r3, [pc, #196]	; (8004a80 <gui_screen_main+0x2c8>)
 80049bc:	2260      	movs	r2, #96	; 0x60
 80049be:	701a      	strb	r2, [r3, #0]
			TEST_poprz_stan = 0;
 80049c0:	4b2d      	ldr	r3, [pc, #180]	; (8004a78 <gui_screen_main+0x2c0>)
 80049c2:	2200      	movs	r2, #0
 80049c4:	701a      	strb	r2, [r3, #0]
 80049c6:	e782      	b.n	80048ce <gui_screen_main+0x116>
		display_gear(gui_gear);
 80049c8:	4b31      	ldr	r3, [pc, #196]	; (8004a90 <gui_screen_main+0x2d8>)
 80049ca:	7818      	ldrb	r0, [r3, #0]
 80049cc:	f7ff fa5c 	bl	8003e88 <display_gear>
		displays_set_brightness(255);
 80049d0:	20ff      	movs	r0, #255	; 0xff
 80049d2:	f7ff fca7 	bl	8004324 <displays_set_brightness>
		ws_set_leds(0xFF, 0xFF);
 80049d6:	21ff      	movs	r1, #255	; 0xff
 80049d8:	4608      	mov	r0, r1
 80049da:	f7ff fd25 	bl	8004428 <ws_set_leds>
		if (gui_statement != 0) {
 80049de:	4b2d      	ldr	r3, [pc, #180]	; (8004a94 <gui_screen_main+0x2dc>)
 80049e0:	7818      	ldrb	r0, [r3, #0]
 80049e2:	bb28      	cbnz	r0, 8004a30 <gui_screen_main+0x278>
			Lcd_clr();
 80049e4:	f7ff f888 	bl	8003af8 <Lcd_clr>
			asm("nop");
 80049e8:	bf00      	nop
			Lcd_string("     ");
 80049ea:	482b      	ldr	r0, [pc, #172]	; (8004a98 <gui_screen_main+0x2e0>)
 80049ec:	f7ff f88c 	bl	8003b08 <Lcd_string>
			Lcd_int(gui_h);
 80049f0:	4b2a      	ldr	r3, [pc, #168]	; (8004a9c <gui_screen_main+0x2e4>)
 80049f2:	7818      	ldrb	r0, [r3, #0]
 80049f4:	f7ff f898 	bl	8003b28 <Lcd_int>
			Lcd_string(":");
 80049f8:	4829      	ldr	r0, [pc, #164]	; (8004aa0 <gui_screen_main+0x2e8>)
 80049fa:	f7ff f885 	bl	8003b08 <Lcd_string>
			Lcd_int(gui_m);
 80049fe:	4b29      	ldr	r3, [pc, #164]	; (8004aa4 <gui_screen_main+0x2ec>)
 8004a00:	7818      	ldrb	r0, [r3, #0]
 8004a02:	f7ff f891 	bl	8003b28 <Lcd_int>
			snprintf(output, 10, "%.6d", gui_trip); //Convert to string and format
 8004a06:	4b28      	ldr	r3, [pc, #160]	; (8004aa8 <gui_screen_main+0x2f0>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a28      	ldr	r2, [pc, #160]	; (8004aac <gui_screen_main+0x2f4>)
 8004a0c:	210a      	movs	r1, #10
 8004a0e:	4668      	mov	r0, sp
 8004a10:	f001 f81e 	bl	8005a50 <sniprintf>
			Lcd_cursor(1, 0);
 8004a14:	2100      	movs	r1, #0
 8004a16:	2001      	movs	r0, #1
 8004a18:	f7ff f896 	bl	8003b48 <Lcd_cursor>
			Lcd_string("    ");
 8004a1c:	4824      	ldr	r0, [pc, #144]	; (8004ab0 <gui_screen_main+0x2f8>)
 8004a1e:	f7ff f873 	bl	8003b08 <Lcd_string>
			Lcd_string(output);
 8004a22:	4668      	mov	r0, sp
 8004a24:	f7ff f870 	bl	8003b08 <Lcd_string>
			Lcd_string(" km");
 8004a28:	4822      	ldr	r0, [pc, #136]	; (8004ab4 <gui_screen_main+0x2fc>)
 8004a2a:	f7ff f86d 	bl	8003b08 <Lcd_string>
}
 8004a2e:	e791      	b.n	8004954 <gui_screen_main+0x19c>
			gui_display_statement(gui_statement);
 8004a30:	f7ff fe40 	bl	80046b4 <gui_display_statement>
 8004a34:	e78e      	b.n	8004954 <gui_screen_main+0x19c>
 8004a36:	bf00      	nop
 8004a38:	9999999a 	.word	0x9999999a
 8004a3c:	3fc99999 	.word	0x3fc99999
 8004a40:	33333333 	.word	0x33333333
 8004a44:	3fd33333 	.word	0x3fd33333
 8004a48:	200003bc 	.word	0x200003bc
 8004a4c:	200003be 	.word	0x200003be
 8004a50:	20000038 	.word	0x20000038
 8004a54:	3fe00000 	.word	0x3fe00000
 8004a58:	3ff00000 	.word	0x3ff00000
 8004a5c:	200003c0 	.word	0x200003c0
 8004a60:	200003c4 	.word	0x200003c4
 8004a64:	200003d8 	.word	0x200003d8
 8004a68:	200003c6 	.word	0x200003c6
 8004a6c:	200003d0 	.word	0x200003d0
 8004a70:	40280000 	.word	0x40280000
 8004a74:	200003c2 	.word	0x200003c2
 8004a78:	200003c5 	.word	0x200003c5
 8004a7c:	200003c8 	.word	0x200003c8
 8004a80:	200003c9 	.word	0x200003c9
 8004a84:	200003ca 	.word	0x200003ca
 8004a88:	200003c7 	.word	0x200003c7
 8004a8c:	40590000 	.word	0x40590000
 8004a90:	20000041 	.word	0x20000041
 8004a94:	200003d9 	.word	0x200003d9
 8004a98:	0800aaf8 	.word	0x0800aaf8
 8004a9c:	20000042 	.word	0x20000042
 8004aa0:	0800ab00 	.word	0x0800ab00
 8004aa4:	20000043 	.word	0x20000043
 8004aa8:	200003dc 	.word	0x200003dc
 8004aac:	0800ab04 	.word	0x0800ab04
 8004ab0:	0800ab0c 	.word	0x0800ab0c
 8004ab4:	0800ab14 	.word	0x0800ab14

08004ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004ab8:	e7fe      	b.n	8004ab8 <Error_Handler>

08004aba <SystemClock_Config>:
{
 8004aba:	b500      	push	{lr}
 8004abc:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004abe:	2300      	movs	r3, #0
 8004ac0:	9309      	str	r3, [sp, #36]	; 0x24
 8004ac2:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ac4:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004ac6:	9301      	str	r3, [sp, #4]
 8004ac8:	9302      	str	r3, [sp, #8]
 8004aca:	9303      	str	r3, [sp, #12]
 8004acc:	9304      	str	r3, [sp, #16]
 8004ace:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004ad4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ad8:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8004ada:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8004ade:	9108      	str	r1, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004ae0:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004ae2:	2202      	movs	r2, #2
 8004ae4:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004ae6:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8004ae8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8004aec:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004aee:	a806      	add	r0, sp, #24
 8004af0:	f7fd f802 	bl	8001af8 <HAL_RCC_OscConfig>
 8004af4:	b980      	cbnz	r0, 8004b18 <SystemClock_Config+0x5e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004af6:	230f      	movs	r3, #15
 8004af8:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004afa:	2102      	movs	r1, #2
 8004afc:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004afe:	2300      	movs	r3, #0
 8004b00:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004b02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004b06:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004b08:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004b0a:	a801      	add	r0, sp, #4
 8004b0c:	f7fd fa3a 	bl	8001f84 <HAL_RCC_ClockConfig>
 8004b10:	b920      	cbnz	r0, 8004b1c <SystemClock_Config+0x62>
}
 8004b12:	b011      	add	sp, #68	; 0x44
 8004b14:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8004b18:	f7ff ffce 	bl	8004ab8 <Error_Handler>
    Error_Handler();
 8004b1c:	f7ff ffcc 	bl	8004ab8 <Error_Handler>

08004b20 <main>:
{
 8004b20:	b508      	push	{r3, lr}
  HAL_Init();
 8004b22:	f7fc f863 	bl	8000bec <HAL_Init>
  SystemClock_Config();
 8004b26:	f7ff ffc8 	bl	8004aba <SystemClock_Config>
  MX_GPIO_Init();
 8004b2a:	f7ff f893 	bl	8003c54 <MX_GPIO_Init>
  MX_CAN_Init();
 8004b2e:	f7ff f815 	bl	8003b5c <MX_CAN_Init>
  MX_I2C1_Init();
 8004b32:	f7ff f917 	bl	8003d64 <MX_I2C1_Init>
  MX_SPI2_Init();
 8004b36:	f000 f811 	bl	8004b5c <MX_SPI2_Init>
  MX_SPI3_Init();
 8004b3a:	f000 f831 	bl	8004ba0 <MX_SPI3_Init>
  MX_TIM3_Init();
 8004b3e:	f000 f989 	bl	8004e54 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8004b42:	f000 f9f3 	bl	8004f2c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8004b46:	f000 fa0b 	bl	8004f60 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8004b4a:	f000 fa23 	bl	8004f94 <MX_USART3_UART_Init>
	gui_init();
 8004b4e:	f7ff fd39 	bl	80045c4 <gui_init>
	gui_screen_intro(); //test
 8004b52:	f7ff fd4d 	bl	80045f0 <gui_screen_intro>
	  gui_screen_main();
 8004b56:	f7ff fe2f 	bl	80047b8 <gui_screen_main>
 8004b5a:	e7fc      	b.n	8004b56 <main+0x36>

08004b5c <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8004b5c:	b508      	push	{r3, lr}

  hspi2.Instance = SPI2;
 8004b5e:	480e      	ldr	r0, [pc, #56]	; (8004b98 <MX_SPI2_Init+0x3c>)
 8004b60:	4b0e      	ldr	r3, [pc, #56]	; (8004b9c <MX_SPI2_Init+0x40>)
 8004b62:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004b64:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004b68:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004b6e:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b70:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004b72:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004b74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b78:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004b7a:	2218      	movs	r2, #24
 8004b7c:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8004b7e:	2280      	movs	r2, #128	; 0x80
 8004b80:	6202      	str	r2, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004b82:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b84:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8004b86:	230a      	movs	r3, #10
 8004b88:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004b8a:	f7fd fb31 	bl	80021f0 <HAL_SPI_Init>
 8004b8e:	b900      	cbnz	r0, 8004b92 <MX_SPI2_Init+0x36>
  {
    Error_Handler();
  }

}
 8004b90:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004b92:	f7ff ff91 	bl	8004ab8 <Error_Handler>
}
 8004b96:	e7fb      	b.n	8004b90 <MX_SPI2_Init+0x34>
 8004b98:	20000530 	.word	0x20000530
 8004b9c:	40003800 	.word	0x40003800

08004ba0 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8004ba0:	b508      	push	{r3, lr}

  hspi3.Instance = SPI3;
 8004ba2:	480e      	ldr	r0, [pc, #56]	; (8004bdc <MX_SPI3_Init+0x3c>)
 8004ba4:	4b0e      	ldr	r3, [pc, #56]	; (8004be0 <MX_SPI3_Init+0x40>)
 8004ba6:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004ba8:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004bac:	6043      	str	r3, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004bb2:	60c3      	str	r3, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004bb4:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004bb6:	6143      	str	r3, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004bb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bbc:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8004bbe:	2208      	movs	r2, #8
 8004bc0:	61c2      	str	r2, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004bc2:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004bc4:	6243      	str	r3, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bc6:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8004bc8:	230a      	movs	r3, #10
 8004bca:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004bcc:	f7fd fb10 	bl	80021f0 <HAL_SPI_Init>
 8004bd0:	b900      	cbnz	r0, 8004bd4 <MX_SPI3_Init+0x34>
  {
    Error_Handler();
  }

}
 8004bd2:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004bd4:	f7ff ff70 	bl	8004ab8 <Error_Handler>
}
 8004bd8:	e7fb      	b.n	8004bd2 <MX_SPI3_Init+0x32>
 8004bda:	bf00      	nop
 8004bdc:	20000588 	.word	0x20000588
 8004be0:	40003c00 	.word	0x40003c00

08004be4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004be4:	b500      	push	{lr}
 8004be6:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004be8:	2300      	movs	r3, #0
 8004bea:	9304      	str	r3, [sp, #16]
 8004bec:	9305      	str	r3, [sp, #20]
 8004bee:	9306      	str	r3, [sp, #24]
 8004bf0:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI2)
 8004bf2:	6803      	ldr	r3, [r0, #0]
 8004bf4:	4a22      	ldr	r2, [pc, #136]	; (8004c80 <HAL_SPI_MspInit+0x9c>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d005      	beq.n	8004c06 <HAL_SPI_MspInit+0x22>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI3)
 8004bfa:	4a22      	ldr	r2, [pc, #136]	; (8004c84 <HAL_SPI_MspInit+0xa0>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d021      	beq.n	8004c44 <HAL_SPI_MspInit+0x60>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8004c00:	b009      	add	sp, #36	; 0x24
 8004c02:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004c06:	4b20      	ldr	r3, [pc, #128]	; (8004c88 <HAL_SPI_MspInit+0xa4>)
 8004c08:	69da      	ldr	r2, [r3, #28]
 8004c0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c0e:	61da      	str	r2, [r3, #28]
 8004c10:	69da      	ldr	r2, [r3, #28]
 8004c12:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004c16:	9200      	str	r2, [sp, #0]
 8004c18:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c1a:	699a      	ldr	r2, [r3, #24]
 8004c1c:	f042 0208 	orr.w	r2, r2, #8
 8004c20:	619a      	str	r2, [r3, #24]
 8004c22:	699b      	ldr	r3, [r3, #24]
 8004c24:	f003 0308 	and.w	r3, r3, #8
 8004c28:	9301      	str	r3, [sp, #4]
 8004c2a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8004c2c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8004c30:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c32:	2302      	movs	r3, #2
 8004c34:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004c36:	2303      	movs	r3, #3
 8004c38:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c3a:	a904      	add	r1, sp, #16
 8004c3c:	4813      	ldr	r0, [pc, #76]	; (8004c8c <HAL_SPI_MspInit+0xa8>)
 8004c3e:	f7fc fa57 	bl	80010f0 <HAL_GPIO_Init>
 8004c42:	e7dd      	b.n	8004c00 <HAL_SPI_MspInit+0x1c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004c44:	4b10      	ldr	r3, [pc, #64]	; (8004c88 <HAL_SPI_MspInit+0xa4>)
 8004c46:	69da      	ldr	r2, [r3, #28]
 8004c48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c4c:	61da      	str	r2, [r3, #28]
 8004c4e:	69da      	ldr	r2, [r3, #28]
 8004c50:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8004c54:	9202      	str	r2, [sp, #8]
 8004c56:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c58:	699a      	ldr	r2, [r3, #24]
 8004c5a:	f042 0208 	orr.w	r2, r2, #8
 8004c5e:	619a      	str	r2, [r3, #24]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	f003 0308 	and.w	r3, r3, #8
 8004c66:	9303      	str	r3, [sp, #12]
 8004c68:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8004c6a:	2328      	movs	r3, #40	; 0x28
 8004c6c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c6e:	2302      	movs	r3, #2
 8004c70:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004c72:	2303      	movs	r3, #3
 8004c74:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c76:	a904      	add	r1, sp, #16
 8004c78:	4804      	ldr	r0, [pc, #16]	; (8004c8c <HAL_SPI_MspInit+0xa8>)
 8004c7a:	f7fc fa39 	bl	80010f0 <HAL_GPIO_Init>
}
 8004c7e:	e7bf      	b.n	8004c00 <HAL_SPI_MspInit+0x1c>
 8004c80:	40003800 	.word	0x40003800
 8004c84:	40003c00 	.word	0x40003c00
 8004c88:	40021000 	.word	0x40021000
 8004c8c:	40010c00 	.word	0x40010c00

08004c90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004c90:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004c92:	4b0e      	ldr	r3, [pc, #56]	; (8004ccc <HAL_MspInit+0x3c>)
 8004c94:	699a      	ldr	r2, [r3, #24]
 8004c96:	f042 0201 	orr.w	r2, r2, #1
 8004c9a:	619a      	str	r2, [r3, #24]
 8004c9c:	699a      	ldr	r2, [r3, #24]
 8004c9e:	f002 0201 	and.w	r2, r2, #1
 8004ca2:	9200      	str	r2, [sp, #0]
 8004ca4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ca6:	69da      	ldr	r2, [r3, #28]
 8004ca8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004cac:	61da      	str	r2, [r3, #28]
 8004cae:	69db      	ldr	r3, [r3, #28]
 8004cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cb4:	9301      	str	r3, [sp, #4]
 8004cb6:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004cb8:	4a05      	ldr	r2, [pc, #20]	; (8004cd0 <HAL_MspInit+0x40>)
 8004cba:	6853      	ldr	r3, [r2, #4]
 8004cbc:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004cc0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004cc4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004cc6:	b002      	add	sp, #8
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	40021000 	.word	0x40021000
 8004cd0:	40010000 	.word	0x40010000

08004cd4 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004cd4:	4770      	bx	lr

08004cd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004cd6:	e7fe      	b.n	8004cd6 <HardFault_Handler>

08004cd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004cd8:	e7fe      	b.n	8004cd8 <MemManage_Handler>

08004cda <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004cda:	e7fe      	b.n	8004cda <BusFault_Handler>

08004cdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004cdc:	e7fe      	b.n	8004cdc <UsageFault_Handler>

08004cde <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004cde:	4770      	bx	lr

08004ce0 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004ce0:	4770      	bx	lr

08004ce2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004ce2:	4770      	bx	lr

08004ce4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004ce4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004ce6:	f7fb ff93 	bl	8000c10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004cea:	bd08      	pop	{r3, pc}

08004cec <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8004cec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8004cee:	4802      	ldr	r0, [pc, #8]	; (8004cf8 <USB_HP_CAN1_TX_IRQHandler+0xc>)
 8004cf0:	f7fc f867 	bl	8000dc2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8004cf4:	bd08      	pop	{r3, pc}
 8004cf6:	bf00      	nop
 8004cf8:	200003fc 	.word	0x200003fc

08004cfc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8004cfc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8004cfe:	4802      	ldr	r0, [pc, #8]	; (8004d08 <USB_LP_CAN1_RX0_IRQHandler+0xc>)
 8004d00:	f7fc f85f 	bl	8000dc2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8004d04:	bd08      	pop	{r3, pc}
 8004d06:	bf00      	nop
 8004d08:	200003fc 	.word	0x200003fc

08004d0c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8004d0c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8004d0e:	4802      	ldr	r0, [pc, #8]	; (8004d18 <CAN1_RX1_IRQHandler+0xc>)
 8004d10:	f7fc f857 	bl	8000dc2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8004d14:	bd08      	pop	{r3, pc}
 8004d16:	bf00      	nop
 8004d18:	200003fc 	.word	0x200003fc

08004d1c <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8004d1c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8004d1e:	4802      	ldr	r0, [pc, #8]	; (8004d28 <CAN1_SCE_IRQHandler+0xc>)
 8004d20:	f7fc f84f 	bl	8000dc2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8004d24:	bd08      	pop	{r3, pc}
 8004d26:	bf00      	nop
 8004d28:	200003fc 	.word	0x200003fc

08004d2c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8004d2c:	b508      	push	{r3, lr}
 8004d2e:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004d30:	4a0b      	ldr	r2, [pc, #44]	; (8004d60 <_sbrk+0x34>)
 8004d32:	6812      	ldr	r2, [r2, #0]
 8004d34:	b142      	cbz	r2, 8004d48 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8004d36:	4a0a      	ldr	r2, [pc, #40]	; (8004d60 <_sbrk+0x34>)
 8004d38:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8004d3a:	4403      	add	r3, r0
 8004d3c:	466a      	mov	r2, sp
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d806      	bhi.n	8004d50 <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8004d42:	4a07      	ldr	r2, [pc, #28]	; (8004d60 <_sbrk+0x34>)
 8004d44:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8004d46:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8004d48:	4a05      	ldr	r2, [pc, #20]	; (8004d60 <_sbrk+0x34>)
 8004d4a:	4906      	ldr	r1, [pc, #24]	; (8004d64 <_sbrk+0x38>)
 8004d4c:	6011      	str	r1, [r2, #0]
 8004d4e:	e7f2      	b.n	8004d36 <_sbrk+0xa>
		errno = ENOMEM;
 8004d50:	f000 f9fc 	bl	800514c <__errno>
 8004d54:	230c      	movs	r3, #12
 8004d56:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8004d58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d5c:	e7f3      	b.n	8004d46 <_sbrk+0x1a>
 8004d5e:	bf00      	nop
 8004d60:	200003ec 	.word	0x200003ec
 8004d64:	200006a8 	.word	0x200006a8

08004d68 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004d68:	4b0f      	ldr	r3, [pc, #60]	; (8004da8 <SystemInit+0x40>)
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	f042 0201 	orr.w	r2, r2, #1
 8004d70:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8004d72:	6859      	ldr	r1, [r3, #4]
 8004d74:	4a0d      	ldr	r2, [pc, #52]	; (8004dac <SystemInit+0x44>)
 8004d76:	400a      	ands	r2, r1
 8004d78:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004d80:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004d84:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004d8c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8004d8e:	685a      	ldr	r2, [r3, #4]
 8004d90:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8004d94:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8004d96:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8004d9a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004d9c:	4b04      	ldr	r3, [pc, #16]	; (8004db0 <SystemInit+0x48>)
 8004d9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004da2:	609a      	str	r2, [r3, #8]
#endif 
}
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	40021000 	.word	0x40021000
 8004dac:	f8ff0000 	.word	0xf8ff0000
 8004db0:	e000ed00 	.word	0xe000ed00

08004db4 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM3)
 8004db4:	6802      	ldr	r2, [r0, #0]
 8004db6:	4b09      	ldr	r3, [pc, #36]	; (8004ddc <HAL_TIM_Base_MspInit+0x28>)
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d000      	beq.n	8004dbe <HAL_TIM_Base_MspInit+0xa>
 8004dbc:	4770      	bx	lr
{
 8004dbe:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004dc0:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8004dc4:	69da      	ldr	r2, [r3, #28]
 8004dc6:	f042 0202 	orr.w	r2, r2, #2
 8004dca:	61da      	str	r2, [r3, #28]
 8004dcc:	69db      	ldr	r3, [r3, #28]
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	9301      	str	r3, [sp, #4]
 8004dd4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8004dd6:	b002      	add	sp, #8
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	40000400 	.word	0x40000400

08004de0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004de0:	b510      	push	{r4, lr}
 8004de2:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004de4:	2300      	movs	r3, #0
 8004de6:	9302      	str	r3, [sp, #8]
 8004de8:	9303      	str	r3, [sp, #12]
 8004dea:	9304      	str	r3, [sp, #16]
 8004dec:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM3)
 8004dee:	6802      	ldr	r2, [r0, #0]
 8004df0:	4b15      	ldr	r3, [pc, #84]	; (8004e48 <HAL_TIM_MspPostInit+0x68>)
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d001      	beq.n	8004dfa <HAL_TIM_MspPostInit+0x1a>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004df6:	b006      	add	sp, #24
 8004df8:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004dfa:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8004dfe:	699a      	ldr	r2, [r3, #24]
 8004e00:	f042 0204 	orr.w	r2, r2, #4
 8004e04:	619a      	str	r2, [r3, #24]
 8004e06:	699a      	ldr	r2, [r3, #24]
 8004e08:	f002 0204 	and.w	r2, r2, #4
 8004e0c:	9200      	str	r2, [sp, #0]
 8004e0e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e10:	699a      	ldr	r2, [r3, #24]
 8004e12:	f042 0208 	orr.w	r2, r2, #8
 8004e16:	619a      	str	r2, [r3, #24]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	f003 0308 	and.w	r3, r3, #8
 8004e1e:	9301      	str	r3, [sp, #4]
 8004e20:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004e22:	23c0      	movs	r3, #192	; 0xc0
 8004e24:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e26:	2402      	movs	r4, #2
 8004e28:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e2a:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e2c:	a902      	add	r1, sp, #8
 8004e2e:	4807      	ldr	r0, [pc, #28]	; (8004e4c <HAL_TIM_MspPostInit+0x6c>)
 8004e30:	f7fc f95e 	bl	80010f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004e34:	2301      	movs	r3, #1
 8004e36:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e38:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e3a:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e3c:	a902      	add	r1, sp, #8
 8004e3e:	4804      	ldr	r0, [pc, #16]	; (8004e50 <HAL_TIM_MspPostInit+0x70>)
 8004e40:	f7fc f956 	bl	80010f0 <HAL_GPIO_Init>
}
 8004e44:	e7d7      	b.n	8004df6 <HAL_TIM_MspPostInit+0x16>
 8004e46:	bf00      	nop
 8004e48:	40000400 	.word	0x40000400
 8004e4c:	40010800 	.word	0x40010800
 8004e50:	40010c00 	.word	0x40010c00

08004e54 <MX_TIM3_Init>:
{
 8004e54:	b500      	push	{lr}
 8004e56:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004e58:	2300      	movs	r3, #0
 8004e5a:	930a      	str	r3, [sp, #40]	; 0x28
 8004e5c:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e5e:	930c      	str	r3, [sp, #48]	; 0x30
 8004e60:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e62:	9308      	str	r3, [sp, #32]
 8004e64:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004e66:	9301      	str	r3, [sp, #4]
 8004e68:	9302      	str	r3, [sp, #8]
 8004e6a:	9303      	str	r3, [sp, #12]
 8004e6c:	9304      	str	r3, [sp, #16]
 8004e6e:	9305      	str	r3, [sp, #20]
 8004e70:	9306      	str	r3, [sp, #24]
 8004e72:	9307      	str	r3, [sp, #28]
  htim3.Instance = TIM3;
 8004e74:	482b      	ldr	r0, [pc, #172]	; (8004f24 <MX_TIM3_Init+0xd0>)
 8004e76:	4a2c      	ldr	r2, [pc, #176]	; (8004f28 <MX_TIM3_Init+0xd4>)
 8004e78:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 4999;
 8004e7a:	f241 3287 	movw	r2, #4999	; 0x1387
 8004e7e:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e80:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 99;
 8004e82:	2263      	movs	r2, #99	; 0x63
 8004e84:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e86:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e88:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004e8a:	f7fd fbcd 	bl	8002628 <HAL_TIM_Base_Init>
 8004e8e:	2800      	cmp	r0, #0
 8004e90:	d132      	bne.n	8004ef8 <MX_TIM3_Init+0xa4>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004e92:	a90e      	add	r1, sp, #56	; 0x38
 8004e94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e98:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004e9c:	4821      	ldr	r0, [pc, #132]	; (8004f24 <MX_TIM3_Init+0xd0>)
 8004e9e:	f7fd fca6 	bl	80027ee <HAL_TIM_ConfigClockSource>
 8004ea2:	bb60      	cbnz	r0, 8004efe <MX_TIM3_Init+0xaa>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004ea4:	481f      	ldr	r0, [pc, #124]	; (8004f24 <MX_TIM3_Init+0xd0>)
 8004ea6:	f7fd fbd8 	bl	800265a <HAL_TIM_PWM_Init>
 8004eaa:	bb58      	cbnz	r0, 8004f04 <MX_TIM3_Init+0xb0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004eac:	2300      	movs	r3, #0
 8004eae:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004eb0:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004eb2:	a908      	add	r1, sp, #32
 8004eb4:	481b      	ldr	r0, [pc, #108]	; (8004f24 <MX_TIM3_Init+0xd0>)
 8004eb6:	f7fd fd37 	bl	8002928 <HAL_TIMEx_MasterConfigSynchronization>
 8004eba:	bb30      	cbnz	r0, 8004f0a <MX_TIM3_Init+0xb6>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004ebc:	2360      	movs	r3, #96	; 0x60
 8004ebe:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004ec4:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004ec6:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004ec8:	a901      	add	r1, sp, #4
 8004eca:	4816      	ldr	r0, [pc, #88]	; (8004f24 <MX_TIM3_Init+0xd0>)
 8004ecc:	f7fd fc16 	bl	80026fc <HAL_TIM_PWM_ConfigChannel>
 8004ed0:	b9f0      	cbnz	r0, 8004f10 <MX_TIM3_Init+0xbc>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004ed2:	2204      	movs	r2, #4
 8004ed4:	eb0d 0102 	add.w	r1, sp, r2
 8004ed8:	4812      	ldr	r0, [pc, #72]	; (8004f24 <MX_TIM3_Init+0xd0>)
 8004eda:	f7fd fc0f 	bl	80026fc <HAL_TIM_PWM_ConfigChannel>
 8004ede:	b9d0      	cbnz	r0, 8004f16 <MX_TIM3_Init+0xc2>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004ee0:	2208      	movs	r2, #8
 8004ee2:	a901      	add	r1, sp, #4
 8004ee4:	480f      	ldr	r0, [pc, #60]	; (8004f24 <MX_TIM3_Init+0xd0>)
 8004ee6:	f7fd fc09 	bl	80026fc <HAL_TIM_PWM_ConfigChannel>
 8004eea:	b9b8      	cbnz	r0, 8004f1c <MX_TIM3_Init+0xc8>
  HAL_TIM_MspPostInit(&htim3);
 8004eec:	480d      	ldr	r0, [pc, #52]	; (8004f24 <MX_TIM3_Init+0xd0>)
 8004eee:	f7ff ff77 	bl	8004de0 <HAL_TIM_MspPostInit>
}
 8004ef2:	b00f      	add	sp, #60	; 0x3c
 8004ef4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8004ef8:	f7ff fdde 	bl	8004ab8 <Error_Handler>
 8004efc:	e7c9      	b.n	8004e92 <MX_TIM3_Init+0x3e>
    Error_Handler();
 8004efe:	f7ff fddb 	bl	8004ab8 <Error_Handler>
 8004f02:	e7cf      	b.n	8004ea4 <MX_TIM3_Init+0x50>
    Error_Handler();
 8004f04:	f7ff fdd8 	bl	8004ab8 <Error_Handler>
 8004f08:	e7d0      	b.n	8004eac <MX_TIM3_Init+0x58>
    Error_Handler();
 8004f0a:	f7ff fdd5 	bl	8004ab8 <Error_Handler>
 8004f0e:	e7d5      	b.n	8004ebc <MX_TIM3_Init+0x68>
    Error_Handler();
 8004f10:	f7ff fdd2 	bl	8004ab8 <Error_Handler>
 8004f14:	e7dd      	b.n	8004ed2 <MX_TIM3_Init+0x7e>
    Error_Handler();
 8004f16:	f7ff fdcf 	bl	8004ab8 <Error_Handler>
 8004f1a:	e7e1      	b.n	8004ee0 <MX_TIM3_Init+0x8c>
    Error_Handler();
 8004f1c:	f7ff fdcc 	bl	8004ab8 <Error_Handler>
 8004f20:	e7e4      	b.n	8004eec <MX_TIM3_Init+0x98>
 8004f22:	bf00      	nop
 8004f24:	20000478 	.word	0x20000478
 8004f28:	40000400 	.word	0x40000400

08004f2c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004f2c:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 8004f2e:	480a      	ldr	r0, [pc, #40]	; (8004f58 <MX_USART1_UART_Init+0x2c>)
 8004f30:	4b0a      	ldr	r3, [pc, #40]	; (8004f5c <MX_USART1_UART_Init+0x30>)
 8004f32:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8004f34:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004f38:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004f3e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004f40:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004f42:	220c      	movs	r2, #12
 8004f44:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f46:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f48:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004f4a:	f7fd fda8 	bl	8002a9e <HAL_UART_Init>
 8004f4e:	b900      	cbnz	r0, 8004f52 <MX_USART1_UART_Init+0x26>
  {
    Error_Handler();
  }

}
 8004f50:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004f52:	f7ff fdb1 	bl	8004ab8 <Error_Handler>
}
 8004f56:	e7fb      	b.n	8004f50 <MX_USART1_UART_Init+0x24>
 8004f58:	20000620 	.word	0x20000620
 8004f5c:	40013800 	.word	0x40013800

08004f60 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004f60:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 8004f62:	480a      	ldr	r0, [pc, #40]	; (8004f8c <MX_USART2_UART_Init+0x2c>)
 8004f64:	4b0a      	ldr	r3, [pc, #40]	; (8004f90 <MX_USART2_UART_Init+0x30>)
 8004f66:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 9600;
 8004f68:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8004f6c:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004f72:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004f74:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004f76:	220c      	movs	r2, #12
 8004f78:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f7a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f7c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004f7e:	f7fd fd8e 	bl	8002a9e <HAL_UART_Init>
 8004f82:	b900      	cbnz	r0, 8004f86 <MX_USART2_UART_Init+0x26>
  {
    Error_Handler();
  }

}
 8004f84:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004f86:	f7ff fd97 	bl	8004ab8 <Error_Handler>
}
 8004f8a:	e7fb      	b.n	8004f84 <MX_USART2_UART_Init+0x24>
 8004f8c:	20000660 	.word	0x20000660
 8004f90:	40004400 	.word	0x40004400

08004f94 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004f94:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 8004f96:	480a      	ldr	r0, [pc, #40]	; (8004fc0 <MX_USART3_UART_Init+0x2c>)
 8004f98:	4b0a      	ldr	r3, [pc, #40]	; (8004fc4 <MX_USART3_UART_Init+0x30>)
 8004f9a:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8004f9c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004fa0:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004fa6:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004fa8:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004faa:	220c      	movs	r2, #12
 8004fac:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004fae:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004fb0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004fb2:	f7fd fd74 	bl	8002a9e <HAL_UART_Init>
 8004fb6:	b900      	cbnz	r0, 8004fba <MX_USART3_UART_Init+0x26>
  {
    Error_Handler();
  }

}
 8004fb8:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004fba:	f7ff fd7d 	bl	8004ab8 <Error_Handler>
}
 8004fbe:	e7fb      	b.n	8004fb8 <MX_USART3_UART_Init+0x24>
 8004fc0:	200005e0 	.word	0x200005e0
 8004fc4:	40004800 	.word	0x40004800

08004fc8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004fc8:	b510      	push	{r4, lr}
 8004fca:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fcc:	2300      	movs	r3, #0
 8004fce:	9306      	str	r3, [sp, #24]
 8004fd0:	9307      	str	r3, [sp, #28]
 8004fd2:	9308      	str	r3, [sp, #32]
 8004fd4:	9309      	str	r3, [sp, #36]	; 0x24
  if(uartHandle->Instance==USART1)
 8004fd6:	6803      	ldr	r3, [r0, #0]
 8004fd8:	4a43      	ldr	r2, [pc, #268]	; (80050e8 <HAL_UART_MspInit+0x120>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d007      	beq.n	8004fee <HAL_UART_MspInit+0x26>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8004fde:	4a43      	ldr	r2, [pc, #268]	; (80050ec <HAL_UART_MspInit+0x124>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d02e      	beq.n	8005042 <HAL_UART_MspInit+0x7a>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 8004fe4:	4a42      	ldr	r2, [pc, #264]	; (80050f0 <HAL_UART_MspInit+0x128>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d053      	beq.n	8005092 <HAL_UART_MspInit+0xca>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004fea:	b00a      	add	sp, #40	; 0x28
 8004fec:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8004fee:	4b41      	ldr	r3, [pc, #260]	; (80050f4 <HAL_UART_MspInit+0x12c>)
 8004ff0:	699a      	ldr	r2, [r3, #24]
 8004ff2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ff6:	619a      	str	r2, [r3, #24]
 8004ff8:	699a      	ldr	r2, [r3, #24]
 8004ffa:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004ffe:	9200      	str	r2, [sp, #0]
 8005000:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005002:	699a      	ldr	r2, [r3, #24]
 8005004:	f042 0204 	orr.w	r2, r2, #4
 8005008:	619a      	str	r2, [r3, #24]
 800500a:	699b      	ldr	r3, [r3, #24]
 800500c:	f003 0304 	and.w	r3, r3, #4
 8005010:	9301      	str	r3, [sp, #4]
 8005012:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005014:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005018:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800501a:	2302      	movs	r3, #2
 800501c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800501e:	2303      	movs	r3, #3
 8005020:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005022:	4c35      	ldr	r4, [pc, #212]	; (80050f8 <HAL_UART_MspInit+0x130>)
 8005024:	a906      	add	r1, sp, #24
 8005026:	4620      	mov	r0, r4
 8005028:	f7fc f862 	bl	80010f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800502c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005030:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005032:	2300      	movs	r3, #0
 8005034:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005036:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005038:	a906      	add	r1, sp, #24
 800503a:	4620      	mov	r0, r4
 800503c:	f7fc f858 	bl	80010f0 <HAL_GPIO_Init>
 8005040:	e7d3      	b.n	8004fea <HAL_UART_MspInit+0x22>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005042:	4b2c      	ldr	r3, [pc, #176]	; (80050f4 <HAL_UART_MspInit+0x12c>)
 8005044:	69da      	ldr	r2, [r3, #28]
 8005046:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800504a:	61da      	str	r2, [r3, #28]
 800504c:	69da      	ldr	r2, [r3, #28]
 800504e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8005052:	9202      	str	r2, [sp, #8]
 8005054:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005056:	699a      	ldr	r2, [r3, #24]
 8005058:	f042 0204 	orr.w	r2, r2, #4
 800505c:	619a      	str	r2, [r3, #24]
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	f003 0304 	and.w	r3, r3, #4
 8005064:	9303      	str	r3, [sp, #12]
 8005066:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005068:	2304      	movs	r3, #4
 800506a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800506c:	2302      	movs	r3, #2
 800506e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005070:	2303      	movs	r3, #3
 8005072:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005074:	4c20      	ldr	r4, [pc, #128]	; (80050f8 <HAL_UART_MspInit+0x130>)
 8005076:	a906      	add	r1, sp, #24
 8005078:	4620      	mov	r0, r4
 800507a:	f7fc f839 	bl	80010f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800507e:	2308      	movs	r3, #8
 8005080:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005082:	2300      	movs	r3, #0
 8005084:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005086:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005088:	a906      	add	r1, sp, #24
 800508a:	4620      	mov	r0, r4
 800508c:	f7fc f830 	bl	80010f0 <HAL_GPIO_Init>
 8005090:	e7ab      	b.n	8004fea <HAL_UART_MspInit+0x22>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005092:	4b18      	ldr	r3, [pc, #96]	; (80050f4 <HAL_UART_MspInit+0x12c>)
 8005094:	69da      	ldr	r2, [r3, #28]
 8005096:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800509a:	61da      	str	r2, [r3, #28]
 800509c:	69da      	ldr	r2, [r3, #28]
 800509e:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80050a2:	9204      	str	r2, [sp, #16]
 80050a4:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050a6:	699a      	ldr	r2, [r3, #24]
 80050a8:	f042 0208 	orr.w	r2, r2, #8
 80050ac:	619a      	str	r2, [r3, #24]
 80050ae:	699b      	ldr	r3, [r3, #24]
 80050b0:	f003 0308 	and.w	r3, r3, #8
 80050b4:	9305      	str	r3, [sp, #20]
 80050b6:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80050b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050bc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050be:	2302      	movs	r3, #2
 80050c0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80050c2:	2303      	movs	r3, #3
 80050c4:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050c6:	4c0d      	ldr	r4, [pc, #52]	; (80050fc <HAL_UART_MspInit+0x134>)
 80050c8:	a906      	add	r1, sp, #24
 80050ca:	4620      	mov	r0, r4
 80050cc:	f7fc f810 	bl	80010f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80050d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80050d4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80050d6:	2300      	movs	r3, #0
 80050d8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050da:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050dc:	a906      	add	r1, sp, #24
 80050de:	4620      	mov	r0, r4
 80050e0:	f7fc f806 	bl	80010f0 <HAL_GPIO_Init>
}
 80050e4:	e781      	b.n	8004fea <HAL_UART_MspInit+0x22>
 80050e6:	bf00      	nop
 80050e8:	40013800 	.word	0x40013800
 80050ec:	40004400 	.word	0x40004400
 80050f0:	40004800 	.word	0x40004800
 80050f4:	40021000 	.word	0x40021000
 80050f8:	40010800 	.word	0x40010800
 80050fc:	40010c00 	.word	0x40010c00

08005100 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005100:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005102:	e003      	b.n	800510c <LoopCopyDataInit>

08005104 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005104:	4b0b      	ldr	r3, [pc, #44]	; (8005134 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8005106:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005108:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800510a:	3104      	adds	r1, #4

0800510c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800510c:	480a      	ldr	r0, [pc, #40]	; (8005138 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800510e:	4b0b      	ldr	r3, [pc, #44]	; (800513c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005110:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005112:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005114:	d3f6      	bcc.n	8005104 <CopyDataInit>
  ldr r2, =_sbss
 8005116:	4a0a      	ldr	r2, [pc, #40]	; (8005140 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8005118:	e002      	b.n	8005120 <LoopFillZerobss>

0800511a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800511a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800511c:	f842 3b04 	str.w	r3, [r2], #4

08005120 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005120:	4b08      	ldr	r3, [pc, #32]	; (8005144 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8005122:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005124:	d3f9      	bcc.n	800511a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005126:	f7ff fe1f 	bl	8004d68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800512a:	f000 f815 	bl	8005158 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800512e:	f7ff fcf7 	bl	8004b20 <main>
  bx lr
 8005132:	4770      	bx	lr
  ldr r3, =_sidata
 8005134:	0800b598 	.word	0x0800b598
  ldr r0, =_sdata
 8005138:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800513c:	20000218 	.word	0x20000218
  ldr r2, =_sbss
 8005140:	20000218 	.word	0x20000218
  ldr r3, = _ebss
 8005144:	200006a4 	.word	0x200006a4

08005148 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005148:	e7fe      	b.n	8005148 <ADC1_2_IRQHandler>
	...

0800514c <__errno>:
 800514c:	4b01      	ldr	r3, [pc, #4]	; (8005154 <__errno+0x8>)
 800514e:	6818      	ldr	r0, [r3, #0]
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	20000048 	.word	0x20000048

08005158 <__libc_init_array>:
 8005158:	b570      	push	{r4, r5, r6, lr}
 800515a:	2500      	movs	r5, #0
 800515c:	4e0c      	ldr	r6, [pc, #48]	; (8005190 <__libc_init_array+0x38>)
 800515e:	4c0d      	ldr	r4, [pc, #52]	; (8005194 <__libc_init_array+0x3c>)
 8005160:	1ba4      	subs	r4, r4, r6
 8005162:	10a4      	asrs	r4, r4, #2
 8005164:	42a5      	cmp	r5, r4
 8005166:	d109      	bne.n	800517c <__libc_init_array+0x24>
 8005168:	f002 f91a 	bl	80073a0 <_init>
 800516c:	2500      	movs	r5, #0
 800516e:	4e0a      	ldr	r6, [pc, #40]	; (8005198 <__libc_init_array+0x40>)
 8005170:	4c0a      	ldr	r4, [pc, #40]	; (800519c <__libc_init_array+0x44>)
 8005172:	1ba4      	subs	r4, r4, r6
 8005174:	10a4      	asrs	r4, r4, #2
 8005176:	42a5      	cmp	r5, r4
 8005178:	d105      	bne.n	8005186 <__libc_init_array+0x2e>
 800517a:	bd70      	pop	{r4, r5, r6, pc}
 800517c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005180:	4798      	blx	r3
 8005182:	3501      	adds	r5, #1
 8005184:	e7ee      	b.n	8005164 <__libc_init_array+0xc>
 8005186:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800518a:	4798      	blx	r3
 800518c:	3501      	adds	r5, #1
 800518e:	e7f2      	b.n	8005176 <__libc_init_array+0x1e>
 8005190:	0800b590 	.word	0x0800b590
 8005194:	0800b590 	.word	0x0800b590
 8005198:	0800b590 	.word	0x0800b590
 800519c:	0800b594 	.word	0x0800b594

080051a0 <memset>:
 80051a0:	4603      	mov	r3, r0
 80051a2:	4402      	add	r2, r0
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d100      	bne.n	80051aa <memset+0xa>
 80051a8:	4770      	bx	lr
 80051aa:	f803 1b01 	strb.w	r1, [r3], #1
 80051ae:	e7f9      	b.n	80051a4 <memset+0x4>

080051b0 <__cvt>:
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051b6:	461e      	mov	r6, r3
 80051b8:	bfbb      	ittet	lt
 80051ba:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80051be:	461e      	movlt	r6, r3
 80051c0:	2300      	movge	r3, #0
 80051c2:	232d      	movlt	r3, #45	; 0x2d
 80051c4:	b088      	sub	sp, #32
 80051c6:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80051c8:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80051cc:	f027 0720 	bic.w	r7, r7, #32
 80051d0:	2f46      	cmp	r7, #70	; 0x46
 80051d2:	4614      	mov	r4, r2
 80051d4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80051d6:	700b      	strb	r3, [r1, #0]
 80051d8:	d004      	beq.n	80051e4 <__cvt+0x34>
 80051da:	2f45      	cmp	r7, #69	; 0x45
 80051dc:	d100      	bne.n	80051e0 <__cvt+0x30>
 80051de:	3501      	adds	r5, #1
 80051e0:	2302      	movs	r3, #2
 80051e2:	e000      	b.n	80051e6 <__cvt+0x36>
 80051e4:	2303      	movs	r3, #3
 80051e6:	aa07      	add	r2, sp, #28
 80051e8:	9204      	str	r2, [sp, #16]
 80051ea:	aa06      	add	r2, sp, #24
 80051ec:	e9cd a202 	strd	sl, r2, [sp, #8]
 80051f0:	e9cd 3500 	strd	r3, r5, [sp]
 80051f4:	4622      	mov	r2, r4
 80051f6:	4633      	mov	r3, r6
 80051f8:	f000 fd0e 	bl	8005c18 <_dtoa_r>
 80051fc:	2f47      	cmp	r7, #71	; 0x47
 80051fe:	4680      	mov	r8, r0
 8005200:	d102      	bne.n	8005208 <__cvt+0x58>
 8005202:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005204:	07db      	lsls	r3, r3, #31
 8005206:	d526      	bpl.n	8005256 <__cvt+0xa6>
 8005208:	2f46      	cmp	r7, #70	; 0x46
 800520a:	eb08 0905 	add.w	r9, r8, r5
 800520e:	d111      	bne.n	8005234 <__cvt+0x84>
 8005210:	f898 3000 	ldrb.w	r3, [r8]
 8005214:	2b30      	cmp	r3, #48	; 0x30
 8005216:	d10a      	bne.n	800522e <__cvt+0x7e>
 8005218:	2200      	movs	r2, #0
 800521a:	2300      	movs	r3, #0
 800521c:	4620      	mov	r0, r4
 800521e:	4631      	mov	r1, r6
 8005220:	f7fb fc2e 	bl	8000a80 <__aeabi_dcmpeq>
 8005224:	b918      	cbnz	r0, 800522e <__cvt+0x7e>
 8005226:	f1c5 0501 	rsb	r5, r5, #1
 800522a:	f8ca 5000 	str.w	r5, [sl]
 800522e:	f8da 3000 	ldr.w	r3, [sl]
 8005232:	4499      	add	r9, r3
 8005234:	2200      	movs	r2, #0
 8005236:	2300      	movs	r3, #0
 8005238:	4620      	mov	r0, r4
 800523a:	4631      	mov	r1, r6
 800523c:	f7fb fc20 	bl	8000a80 <__aeabi_dcmpeq>
 8005240:	b938      	cbnz	r0, 8005252 <__cvt+0xa2>
 8005242:	2230      	movs	r2, #48	; 0x30
 8005244:	9b07      	ldr	r3, [sp, #28]
 8005246:	454b      	cmp	r3, r9
 8005248:	d205      	bcs.n	8005256 <__cvt+0xa6>
 800524a:	1c59      	adds	r1, r3, #1
 800524c:	9107      	str	r1, [sp, #28]
 800524e:	701a      	strb	r2, [r3, #0]
 8005250:	e7f8      	b.n	8005244 <__cvt+0x94>
 8005252:	f8cd 901c 	str.w	r9, [sp, #28]
 8005256:	4640      	mov	r0, r8
 8005258:	9b07      	ldr	r3, [sp, #28]
 800525a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800525c:	eba3 0308 	sub.w	r3, r3, r8
 8005260:	6013      	str	r3, [r2, #0]
 8005262:	b008      	add	sp, #32
 8005264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005268 <__exponent>:
 8005268:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800526a:	2900      	cmp	r1, #0
 800526c:	bfb4      	ite	lt
 800526e:	232d      	movlt	r3, #45	; 0x2d
 8005270:	232b      	movge	r3, #43	; 0x2b
 8005272:	4604      	mov	r4, r0
 8005274:	bfb8      	it	lt
 8005276:	4249      	neglt	r1, r1
 8005278:	2909      	cmp	r1, #9
 800527a:	f804 2b02 	strb.w	r2, [r4], #2
 800527e:	7043      	strb	r3, [r0, #1]
 8005280:	dd21      	ble.n	80052c6 <__exponent+0x5e>
 8005282:	f10d 0307 	add.w	r3, sp, #7
 8005286:	461f      	mov	r7, r3
 8005288:	260a      	movs	r6, #10
 800528a:	fb91 f5f6 	sdiv	r5, r1, r6
 800528e:	fb06 1115 	mls	r1, r6, r5, r1
 8005292:	2d09      	cmp	r5, #9
 8005294:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8005298:	f803 1c01 	strb.w	r1, [r3, #-1]
 800529c:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80052a0:	4629      	mov	r1, r5
 80052a2:	dc09      	bgt.n	80052b8 <__exponent+0x50>
 80052a4:	3130      	adds	r1, #48	; 0x30
 80052a6:	3b02      	subs	r3, #2
 80052a8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80052ac:	42bb      	cmp	r3, r7
 80052ae:	4622      	mov	r2, r4
 80052b0:	d304      	bcc.n	80052bc <__exponent+0x54>
 80052b2:	1a10      	subs	r0, r2, r0
 80052b4:	b003      	add	sp, #12
 80052b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052b8:	4613      	mov	r3, r2
 80052ba:	e7e6      	b.n	800528a <__exponent+0x22>
 80052bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052c0:	f804 2b01 	strb.w	r2, [r4], #1
 80052c4:	e7f2      	b.n	80052ac <__exponent+0x44>
 80052c6:	2330      	movs	r3, #48	; 0x30
 80052c8:	4419      	add	r1, r3
 80052ca:	7083      	strb	r3, [r0, #2]
 80052cc:	1d02      	adds	r2, r0, #4
 80052ce:	70c1      	strb	r1, [r0, #3]
 80052d0:	e7ef      	b.n	80052b2 <__exponent+0x4a>
	...

080052d4 <_printf_float>:
 80052d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052d8:	b091      	sub	sp, #68	; 0x44
 80052da:	460c      	mov	r4, r1
 80052dc:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80052de:	4693      	mov	fp, r2
 80052e0:	461e      	mov	r6, r3
 80052e2:	4605      	mov	r5, r0
 80052e4:	f001 fa4c 	bl	8006780 <_localeconv_r>
 80052e8:	6803      	ldr	r3, [r0, #0]
 80052ea:	4618      	mov	r0, r3
 80052ec:	9309      	str	r3, [sp, #36]	; 0x24
 80052ee:	f7fa ff9b 	bl	8000228 <strlen>
 80052f2:	2300      	movs	r3, #0
 80052f4:	930e      	str	r3, [sp, #56]	; 0x38
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	900a      	str	r0, [sp, #40]	; 0x28
 80052fa:	3307      	adds	r3, #7
 80052fc:	f023 0307 	bic.w	r3, r3, #7
 8005300:	f103 0208 	add.w	r2, r3, #8
 8005304:	f894 8018 	ldrb.w	r8, [r4, #24]
 8005308:	f8d4 a000 	ldr.w	sl, [r4]
 800530c:	603a      	str	r2, [r7, #0]
 800530e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005312:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005316:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800531a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800531e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005320:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005324:	4ba6      	ldr	r3, [pc, #664]	; (80055c0 <_printf_float+0x2ec>)
 8005326:	4638      	mov	r0, r7
 8005328:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800532a:	f7fb fbdb 	bl	8000ae4 <__aeabi_dcmpun>
 800532e:	bb68      	cbnz	r0, 800538c <_printf_float+0xb8>
 8005330:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005334:	4ba2      	ldr	r3, [pc, #648]	; (80055c0 <_printf_float+0x2ec>)
 8005336:	4638      	mov	r0, r7
 8005338:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800533a:	f7fb fbb5 	bl	8000aa8 <__aeabi_dcmple>
 800533e:	bb28      	cbnz	r0, 800538c <_printf_float+0xb8>
 8005340:	2200      	movs	r2, #0
 8005342:	2300      	movs	r3, #0
 8005344:	4638      	mov	r0, r7
 8005346:	4649      	mov	r1, r9
 8005348:	f7fb fba4 	bl	8000a94 <__aeabi_dcmplt>
 800534c:	b110      	cbz	r0, 8005354 <_printf_float+0x80>
 800534e:	232d      	movs	r3, #45	; 0x2d
 8005350:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005354:	4f9b      	ldr	r7, [pc, #620]	; (80055c4 <_printf_float+0x2f0>)
 8005356:	4b9c      	ldr	r3, [pc, #624]	; (80055c8 <_printf_float+0x2f4>)
 8005358:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800535c:	bf98      	it	ls
 800535e:	461f      	movls	r7, r3
 8005360:	2303      	movs	r3, #3
 8005362:	f04f 0900 	mov.w	r9, #0
 8005366:	6123      	str	r3, [r4, #16]
 8005368:	f02a 0304 	bic.w	r3, sl, #4
 800536c:	6023      	str	r3, [r4, #0]
 800536e:	9600      	str	r6, [sp, #0]
 8005370:	465b      	mov	r3, fp
 8005372:	aa0f      	add	r2, sp, #60	; 0x3c
 8005374:	4621      	mov	r1, r4
 8005376:	4628      	mov	r0, r5
 8005378:	f000 f9e2 	bl	8005740 <_printf_common>
 800537c:	3001      	adds	r0, #1
 800537e:	f040 8090 	bne.w	80054a2 <_printf_float+0x1ce>
 8005382:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005386:	b011      	add	sp, #68	; 0x44
 8005388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800538c:	463a      	mov	r2, r7
 800538e:	464b      	mov	r3, r9
 8005390:	4638      	mov	r0, r7
 8005392:	4649      	mov	r1, r9
 8005394:	f7fb fba6 	bl	8000ae4 <__aeabi_dcmpun>
 8005398:	b110      	cbz	r0, 80053a0 <_printf_float+0xcc>
 800539a:	4f8c      	ldr	r7, [pc, #560]	; (80055cc <_printf_float+0x2f8>)
 800539c:	4b8c      	ldr	r3, [pc, #560]	; (80055d0 <_printf_float+0x2fc>)
 800539e:	e7db      	b.n	8005358 <_printf_float+0x84>
 80053a0:	6863      	ldr	r3, [r4, #4]
 80053a2:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 80053a6:	1c59      	adds	r1, r3, #1
 80053a8:	a80d      	add	r0, sp, #52	; 0x34
 80053aa:	a90e      	add	r1, sp, #56	; 0x38
 80053ac:	d140      	bne.n	8005430 <_printf_float+0x15c>
 80053ae:	2306      	movs	r3, #6
 80053b0:	6063      	str	r3, [r4, #4]
 80053b2:	f04f 0c00 	mov.w	ip, #0
 80053b6:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 80053ba:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80053be:	6863      	ldr	r3, [r4, #4]
 80053c0:	6022      	str	r2, [r4, #0]
 80053c2:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80053c6:	9300      	str	r3, [sp, #0]
 80053c8:	463a      	mov	r2, r7
 80053ca:	464b      	mov	r3, r9
 80053cc:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80053d0:	4628      	mov	r0, r5
 80053d2:	f7ff feed 	bl	80051b0 <__cvt>
 80053d6:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80053da:	2b47      	cmp	r3, #71	; 0x47
 80053dc:	4607      	mov	r7, r0
 80053de:	d109      	bne.n	80053f4 <_printf_float+0x120>
 80053e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053e2:	1cd8      	adds	r0, r3, #3
 80053e4:	db02      	blt.n	80053ec <_printf_float+0x118>
 80053e6:	6862      	ldr	r2, [r4, #4]
 80053e8:	4293      	cmp	r3, r2
 80053ea:	dd47      	ble.n	800547c <_printf_float+0x1a8>
 80053ec:	f1a8 0802 	sub.w	r8, r8, #2
 80053f0:	fa5f f888 	uxtb.w	r8, r8
 80053f4:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80053f8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80053fa:	d824      	bhi.n	8005446 <_printf_float+0x172>
 80053fc:	3901      	subs	r1, #1
 80053fe:	4642      	mov	r2, r8
 8005400:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005404:	910d      	str	r1, [sp, #52]	; 0x34
 8005406:	f7ff ff2f 	bl	8005268 <__exponent>
 800540a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800540c:	4681      	mov	r9, r0
 800540e:	1813      	adds	r3, r2, r0
 8005410:	2a01      	cmp	r2, #1
 8005412:	6123      	str	r3, [r4, #16]
 8005414:	dc02      	bgt.n	800541c <_printf_float+0x148>
 8005416:	6822      	ldr	r2, [r4, #0]
 8005418:	07d1      	lsls	r1, r2, #31
 800541a:	d501      	bpl.n	8005420 <_printf_float+0x14c>
 800541c:	3301      	adds	r3, #1
 800541e:	6123      	str	r3, [r4, #16]
 8005420:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005424:	2b00      	cmp	r3, #0
 8005426:	d0a2      	beq.n	800536e <_printf_float+0x9a>
 8005428:	232d      	movs	r3, #45	; 0x2d
 800542a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800542e:	e79e      	b.n	800536e <_printf_float+0x9a>
 8005430:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8005434:	f000 816e 	beq.w	8005714 <_printf_float+0x440>
 8005438:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800543c:	d1b9      	bne.n	80053b2 <_printf_float+0xde>
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1b7      	bne.n	80053b2 <_printf_float+0xde>
 8005442:	2301      	movs	r3, #1
 8005444:	e7b4      	b.n	80053b0 <_printf_float+0xdc>
 8005446:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800544a:	d119      	bne.n	8005480 <_printf_float+0x1ac>
 800544c:	2900      	cmp	r1, #0
 800544e:	6863      	ldr	r3, [r4, #4]
 8005450:	dd0c      	ble.n	800546c <_printf_float+0x198>
 8005452:	6121      	str	r1, [r4, #16]
 8005454:	b913      	cbnz	r3, 800545c <_printf_float+0x188>
 8005456:	6822      	ldr	r2, [r4, #0]
 8005458:	07d2      	lsls	r2, r2, #31
 800545a:	d502      	bpl.n	8005462 <_printf_float+0x18e>
 800545c:	3301      	adds	r3, #1
 800545e:	440b      	add	r3, r1
 8005460:	6123      	str	r3, [r4, #16]
 8005462:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005464:	f04f 0900 	mov.w	r9, #0
 8005468:	65a3      	str	r3, [r4, #88]	; 0x58
 800546a:	e7d9      	b.n	8005420 <_printf_float+0x14c>
 800546c:	b913      	cbnz	r3, 8005474 <_printf_float+0x1a0>
 800546e:	6822      	ldr	r2, [r4, #0]
 8005470:	07d0      	lsls	r0, r2, #31
 8005472:	d501      	bpl.n	8005478 <_printf_float+0x1a4>
 8005474:	3302      	adds	r3, #2
 8005476:	e7f3      	b.n	8005460 <_printf_float+0x18c>
 8005478:	2301      	movs	r3, #1
 800547a:	e7f1      	b.n	8005460 <_printf_float+0x18c>
 800547c:	f04f 0867 	mov.w	r8, #103	; 0x67
 8005480:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005484:	4293      	cmp	r3, r2
 8005486:	db05      	blt.n	8005494 <_printf_float+0x1c0>
 8005488:	6822      	ldr	r2, [r4, #0]
 800548a:	6123      	str	r3, [r4, #16]
 800548c:	07d1      	lsls	r1, r2, #31
 800548e:	d5e8      	bpl.n	8005462 <_printf_float+0x18e>
 8005490:	3301      	adds	r3, #1
 8005492:	e7e5      	b.n	8005460 <_printf_float+0x18c>
 8005494:	2b00      	cmp	r3, #0
 8005496:	bfcc      	ite	gt
 8005498:	2301      	movgt	r3, #1
 800549a:	f1c3 0302 	rsble	r3, r3, #2
 800549e:	4413      	add	r3, r2
 80054a0:	e7de      	b.n	8005460 <_printf_float+0x18c>
 80054a2:	6823      	ldr	r3, [r4, #0]
 80054a4:	055a      	lsls	r2, r3, #21
 80054a6:	d407      	bmi.n	80054b8 <_printf_float+0x1e4>
 80054a8:	6923      	ldr	r3, [r4, #16]
 80054aa:	463a      	mov	r2, r7
 80054ac:	4659      	mov	r1, fp
 80054ae:	4628      	mov	r0, r5
 80054b0:	47b0      	blx	r6
 80054b2:	3001      	adds	r0, #1
 80054b4:	d129      	bne.n	800550a <_printf_float+0x236>
 80054b6:	e764      	b.n	8005382 <_printf_float+0xae>
 80054b8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80054bc:	f240 80d7 	bls.w	800566e <_printf_float+0x39a>
 80054c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80054c4:	2200      	movs	r2, #0
 80054c6:	2300      	movs	r3, #0
 80054c8:	f7fb fada 	bl	8000a80 <__aeabi_dcmpeq>
 80054cc:	b388      	cbz	r0, 8005532 <_printf_float+0x25e>
 80054ce:	2301      	movs	r3, #1
 80054d0:	4a40      	ldr	r2, [pc, #256]	; (80055d4 <_printf_float+0x300>)
 80054d2:	4659      	mov	r1, fp
 80054d4:	4628      	mov	r0, r5
 80054d6:	47b0      	blx	r6
 80054d8:	3001      	adds	r0, #1
 80054da:	f43f af52 	beq.w	8005382 <_printf_float+0xae>
 80054de:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80054e2:	429a      	cmp	r2, r3
 80054e4:	db02      	blt.n	80054ec <_printf_float+0x218>
 80054e6:	6823      	ldr	r3, [r4, #0]
 80054e8:	07d8      	lsls	r0, r3, #31
 80054ea:	d50e      	bpl.n	800550a <_printf_float+0x236>
 80054ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80054f0:	4659      	mov	r1, fp
 80054f2:	4628      	mov	r0, r5
 80054f4:	47b0      	blx	r6
 80054f6:	3001      	adds	r0, #1
 80054f8:	f43f af43 	beq.w	8005382 <_printf_float+0xae>
 80054fc:	2700      	movs	r7, #0
 80054fe:	f104 081a 	add.w	r8, r4, #26
 8005502:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005504:	3b01      	subs	r3, #1
 8005506:	42bb      	cmp	r3, r7
 8005508:	dc09      	bgt.n	800551e <_printf_float+0x24a>
 800550a:	6823      	ldr	r3, [r4, #0]
 800550c:	079f      	lsls	r7, r3, #30
 800550e:	f100 80fd 	bmi.w	800570c <_printf_float+0x438>
 8005512:	68e0      	ldr	r0, [r4, #12]
 8005514:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005516:	4298      	cmp	r0, r3
 8005518:	bfb8      	it	lt
 800551a:	4618      	movlt	r0, r3
 800551c:	e733      	b.n	8005386 <_printf_float+0xb2>
 800551e:	2301      	movs	r3, #1
 8005520:	4642      	mov	r2, r8
 8005522:	4659      	mov	r1, fp
 8005524:	4628      	mov	r0, r5
 8005526:	47b0      	blx	r6
 8005528:	3001      	adds	r0, #1
 800552a:	f43f af2a 	beq.w	8005382 <_printf_float+0xae>
 800552e:	3701      	adds	r7, #1
 8005530:	e7e7      	b.n	8005502 <_printf_float+0x22e>
 8005532:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005534:	2b00      	cmp	r3, #0
 8005536:	dc2b      	bgt.n	8005590 <_printf_float+0x2bc>
 8005538:	2301      	movs	r3, #1
 800553a:	4a26      	ldr	r2, [pc, #152]	; (80055d4 <_printf_float+0x300>)
 800553c:	4659      	mov	r1, fp
 800553e:	4628      	mov	r0, r5
 8005540:	47b0      	blx	r6
 8005542:	3001      	adds	r0, #1
 8005544:	f43f af1d 	beq.w	8005382 <_printf_float+0xae>
 8005548:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800554a:	b923      	cbnz	r3, 8005556 <_printf_float+0x282>
 800554c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800554e:	b913      	cbnz	r3, 8005556 <_printf_float+0x282>
 8005550:	6823      	ldr	r3, [r4, #0]
 8005552:	07d9      	lsls	r1, r3, #31
 8005554:	d5d9      	bpl.n	800550a <_printf_float+0x236>
 8005556:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800555a:	4659      	mov	r1, fp
 800555c:	4628      	mov	r0, r5
 800555e:	47b0      	blx	r6
 8005560:	3001      	adds	r0, #1
 8005562:	f43f af0e 	beq.w	8005382 <_printf_float+0xae>
 8005566:	f04f 0800 	mov.w	r8, #0
 800556a:	f104 091a 	add.w	r9, r4, #26
 800556e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005570:	425b      	negs	r3, r3
 8005572:	4543      	cmp	r3, r8
 8005574:	dc01      	bgt.n	800557a <_printf_float+0x2a6>
 8005576:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005578:	e797      	b.n	80054aa <_printf_float+0x1d6>
 800557a:	2301      	movs	r3, #1
 800557c:	464a      	mov	r2, r9
 800557e:	4659      	mov	r1, fp
 8005580:	4628      	mov	r0, r5
 8005582:	47b0      	blx	r6
 8005584:	3001      	adds	r0, #1
 8005586:	f43f aefc 	beq.w	8005382 <_printf_float+0xae>
 800558a:	f108 0801 	add.w	r8, r8, #1
 800558e:	e7ee      	b.n	800556e <_printf_float+0x29a>
 8005590:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005592:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005594:	429a      	cmp	r2, r3
 8005596:	bfa8      	it	ge
 8005598:	461a      	movge	r2, r3
 800559a:	2a00      	cmp	r2, #0
 800559c:	4690      	mov	r8, r2
 800559e:	dd07      	ble.n	80055b0 <_printf_float+0x2dc>
 80055a0:	4613      	mov	r3, r2
 80055a2:	4659      	mov	r1, fp
 80055a4:	463a      	mov	r2, r7
 80055a6:	4628      	mov	r0, r5
 80055a8:	47b0      	blx	r6
 80055aa:	3001      	adds	r0, #1
 80055ac:	f43f aee9 	beq.w	8005382 <_printf_float+0xae>
 80055b0:	f104 031a 	add.w	r3, r4, #26
 80055b4:	f04f 0a00 	mov.w	sl, #0
 80055b8:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80055bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80055be:	e015      	b.n	80055ec <_printf_float+0x318>
 80055c0:	7fefffff 	.word	0x7fefffff
 80055c4:	0800b334 	.word	0x0800b334
 80055c8:	0800b330 	.word	0x0800b330
 80055cc:	0800b33c 	.word	0x0800b33c
 80055d0:	0800b338 	.word	0x0800b338
 80055d4:	0800b340 	.word	0x0800b340
 80055d8:	2301      	movs	r3, #1
 80055da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80055dc:	4659      	mov	r1, fp
 80055de:	4628      	mov	r0, r5
 80055e0:	47b0      	blx	r6
 80055e2:	3001      	adds	r0, #1
 80055e4:	f43f aecd 	beq.w	8005382 <_printf_float+0xae>
 80055e8:	f10a 0a01 	add.w	sl, sl, #1
 80055ec:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80055f0:	eba9 0308 	sub.w	r3, r9, r8
 80055f4:	4553      	cmp	r3, sl
 80055f6:	dcef      	bgt.n	80055d8 <_printf_float+0x304>
 80055f8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80055fc:	429a      	cmp	r2, r3
 80055fe:	444f      	add	r7, r9
 8005600:	db14      	blt.n	800562c <_printf_float+0x358>
 8005602:	6823      	ldr	r3, [r4, #0]
 8005604:	07da      	lsls	r2, r3, #31
 8005606:	d411      	bmi.n	800562c <_printf_float+0x358>
 8005608:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800560a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800560c:	eba3 0209 	sub.w	r2, r3, r9
 8005610:	eba3 0901 	sub.w	r9, r3, r1
 8005614:	4591      	cmp	r9, r2
 8005616:	bfa8      	it	ge
 8005618:	4691      	movge	r9, r2
 800561a:	f1b9 0f00 	cmp.w	r9, #0
 800561e:	dc0d      	bgt.n	800563c <_printf_float+0x368>
 8005620:	2700      	movs	r7, #0
 8005622:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005626:	f104 081a 	add.w	r8, r4, #26
 800562a:	e018      	b.n	800565e <_printf_float+0x38a>
 800562c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005630:	4659      	mov	r1, fp
 8005632:	4628      	mov	r0, r5
 8005634:	47b0      	blx	r6
 8005636:	3001      	adds	r0, #1
 8005638:	d1e6      	bne.n	8005608 <_printf_float+0x334>
 800563a:	e6a2      	b.n	8005382 <_printf_float+0xae>
 800563c:	464b      	mov	r3, r9
 800563e:	463a      	mov	r2, r7
 8005640:	4659      	mov	r1, fp
 8005642:	4628      	mov	r0, r5
 8005644:	47b0      	blx	r6
 8005646:	3001      	adds	r0, #1
 8005648:	d1ea      	bne.n	8005620 <_printf_float+0x34c>
 800564a:	e69a      	b.n	8005382 <_printf_float+0xae>
 800564c:	2301      	movs	r3, #1
 800564e:	4642      	mov	r2, r8
 8005650:	4659      	mov	r1, fp
 8005652:	4628      	mov	r0, r5
 8005654:	47b0      	blx	r6
 8005656:	3001      	adds	r0, #1
 8005658:	f43f ae93 	beq.w	8005382 <_printf_float+0xae>
 800565c:	3701      	adds	r7, #1
 800565e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005662:	1a9b      	subs	r3, r3, r2
 8005664:	eba3 0309 	sub.w	r3, r3, r9
 8005668:	42bb      	cmp	r3, r7
 800566a:	dcef      	bgt.n	800564c <_printf_float+0x378>
 800566c:	e74d      	b.n	800550a <_printf_float+0x236>
 800566e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005670:	2a01      	cmp	r2, #1
 8005672:	dc01      	bgt.n	8005678 <_printf_float+0x3a4>
 8005674:	07db      	lsls	r3, r3, #31
 8005676:	d538      	bpl.n	80056ea <_printf_float+0x416>
 8005678:	2301      	movs	r3, #1
 800567a:	463a      	mov	r2, r7
 800567c:	4659      	mov	r1, fp
 800567e:	4628      	mov	r0, r5
 8005680:	47b0      	blx	r6
 8005682:	3001      	adds	r0, #1
 8005684:	f43f ae7d 	beq.w	8005382 <_printf_float+0xae>
 8005688:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800568c:	4659      	mov	r1, fp
 800568e:	4628      	mov	r0, r5
 8005690:	47b0      	blx	r6
 8005692:	3001      	adds	r0, #1
 8005694:	f107 0701 	add.w	r7, r7, #1
 8005698:	f43f ae73 	beq.w	8005382 <_printf_float+0xae>
 800569c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80056a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056a2:	2200      	movs	r2, #0
 80056a4:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80056a8:	2300      	movs	r3, #0
 80056aa:	f7fb f9e9 	bl	8000a80 <__aeabi_dcmpeq>
 80056ae:	b9c0      	cbnz	r0, 80056e2 <_printf_float+0x40e>
 80056b0:	4643      	mov	r3, r8
 80056b2:	463a      	mov	r2, r7
 80056b4:	4659      	mov	r1, fp
 80056b6:	4628      	mov	r0, r5
 80056b8:	47b0      	blx	r6
 80056ba:	3001      	adds	r0, #1
 80056bc:	d10d      	bne.n	80056da <_printf_float+0x406>
 80056be:	e660      	b.n	8005382 <_printf_float+0xae>
 80056c0:	2301      	movs	r3, #1
 80056c2:	4642      	mov	r2, r8
 80056c4:	4659      	mov	r1, fp
 80056c6:	4628      	mov	r0, r5
 80056c8:	47b0      	blx	r6
 80056ca:	3001      	adds	r0, #1
 80056cc:	f43f ae59 	beq.w	8005382 <_printf_float+0xae>
 80056d0:	3701      	adds	r7, #1
 80056d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056d4:	3b01      	subs	r3, #1
 80056d6:	42bb      	cmp	r3, r7
 80056d8:	dcf2      	bgt.n	80056c0 <_printf_float+0x3ec>
 80056da:	464b      	mov	r3, r9
 80056dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80056e0:	e6e4      	b.n	80054ac <_printf_float+0x1d8>
 80056e2:	2700      	movs	r7, #0
 80056e4:	f104 081a 	add.w	r8, r4, #26
 80056e8:	e7f3      	b.n	80056d2 <_printf_float+0x3fe>
 80056ea:	2301      	movs	r3, #1
 80056ec:	e7e1      	b.n	80056b2 <_printf_float+0x3de>
 80056ee:	2301      	movs	r3, #1
 80056f0:	4642      	mov	r2, r8
 80056f2:	4659      	mov	r1, fp
 80056f4:	4628      	mov	r0, r5
 80056f6:	47b0      	blx	r6
 80056f8:	3001      	adds	r0, #1
 80056fa:	f43f ae42 	beq.w	8005382 <_printf_float+0xae>
 80056fe:	3701      	adds	r7, #1
 8005700:	68e3      	ldr	r3, [r4, #12]
 8005702:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005704:	1a9b      	subs	r3, r3, r2
 8005706:	42bb      	cmp	r3, r7
 8005708:	dcf1      	bgt.n	80056ee <_printf_float+0x41a>
 800570a:	e702      	b.n	8005512 <_printf_float+0x23e>
 800570c:	2700      	movs	r7, #0
 800570e:	f104 0819 	add.w	r8, r4, #25
 8005712:	e7f5      	b.n	8005700 <_printf_float+0x42c>
 8005714:	2b00      	cmp	r3, #0
 8005716:	f43f ae94 	beq.w	8005442 <_printf_float+0x16e>
 800571a:	f04f 0c00 	mov.w	ip, #0
 800571e:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8005722:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8005726:	6022      	str	r2, [r4, #0]
 8005728:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800572c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8005730:	9300      	str	r3, [sp, #0]
 8005732:	463a      	mov	r2, r7
 8005734:	464b      	mov	r3, r9
 8005736:	4628      	mov	r0, r5
 8005738:	f7ff fd3a 	bl	80051b0 <__cvt>
 800573c:	4607      	mov	r7, r0
 800573e:	e64f      	b.n	80053e0 <_printf_float+0x10c>

08005740 <_printf_common>:
 8005740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005744:	4691      	mov	r9, r2
 8005746:	461f      	mov	r7, r3
 8005748:	688a      	ldr	r2, [r1, #8]
 800574a:	690b      	ldr	r3, [r1, #16]
 800574c:	4606      	mov	r6, r0
 800574e:	4293      	cmp	r3, r2
 8005750:	bfb8      	it	lt
 8005752:	4613      	movlt	r3, r2
 8005754:	f8c9 3000 	str.w	r3, [r9]
 8005758:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800575c:	460c      	mov	r4, r1
 800575e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005762:	b112      	cbz	r2, 800576a <_printf_common+0x2a>
 8005764:	3301      	adds	r3, #1
 8005766:	f8c9 3000 	str.w	r3, [r9]
 800576a:	6823      	ldr	r3, [r4, #0]
 800576c:	0699      	lsls	r1, r3, #26
 800576e:	bf42      	ittt	mi
 8005770:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005774:	3302      	addmi	r3, #2
 8005776:	f8c9 3000 	strmi.w	r3, [r9]
 800577a:	6825      	ldr	r5, [r4, #0]
 800577c:	f015 0506 	ands.w	r5, r5, #6
 8005780:	d107      	bne.n	8005792 <_printf_common+0x52>
 8005782:	f104 0a19 	add.w	sl, r4, #25
 8005786:	68e3      	ldr	r3, [r4, #12]
 8005788:	f8d9 2000 	ldr.w	r2, [r9]
 800578c:	1a9b      	subs	r3, r3, r2
 800578e:	42ab      	cmp	r3, r5
 8005790:	dc29      	bgt.n	80057e6 <_printf_common+0xa6>
 8005792:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005796:	6822      	ldr	r2, [r4, #0]
 8005798:	3300      	adds	r3, #0
 800579a:	bf18      	it	ne
 800579c:	2301      	movne	r3, #1
 800579e:	0692      	lsls	r2, r2, #26
 80057a0:	d42e      	bmi.n	8005800 <_printf_common+0xc0>
 80057a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057a6:	4639      	mov	r1, r7
 80057a8:	4630      	mov	r0, r6
 80057aa:	47c0      	blx	r8
 80057ac:	3001      	adds	r0, #1
 80057ae:	d021      	beq.n	80057f4 <_printf_common+0xb4>
 80057b0:	6823      	ldr	r3, [r4, #0]
 80057b2:	68e5      	ldr	r5, [r4, #12]
 80057b4:	f003 0306 	and.w	r3, r3, #6
 80057b8:	2b04      	cmp	r3, #4
 80057ba:	bf18      	it	ne
 80057bc:	2500      	movne	r5, #0
 80057be:	f8d9 2000 	ldr.w	r2, [r9]
 80057c2:	f04f 0900 	mov.w	r9, #0
 80057c6:	bf08      	it	eq
 80057c8:	1aad      	subeq	r5, r5, r2
 80057ca:	68a3      	ldr	r3, [r4, #8]
 80057cc:	6922      	ldr	r2, [r4, #16]
 80057ce:	bf08      	it	eq
 80057d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057d4:	4293      	cmp	r3, r2
 80057d6:	bfc4      	itt	gt
 80057d8:	1a9b      	subgt	r3, r3, r2
 80057da:	18ed      	addgt	r5, r5, r3
 80057dc:	341a      	adds	r4, #26
 80057de:	454d      	cmp	r5, r9
 80057e0:	d11a      	bne.n	8005818 <_printf_common+0xd8>
 80057e2:	2000      	movs	r0, #0
 80057e4:	e008      	b.n	80057f8 <_printf_common+0xb8>
 80057e6:	2301      	movs	r3, #1
 80057e8:	4652      	mov	r2, sl
 80057ea:	4639      	mov	r1, r7
 80057ec:	4630      	mov	r0, r6
 80057ee:	47c0      	blx	r8
 80057f0:	3001      	adds	r0, #1
 80057f2:	d103      	bne.n	80057fc <_printf_common+0xbc>
 80057f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057fc:	3501      	adds	r5, #1
 80057fe:	e7c2      	b.n	8005786 <_printf_common+0x46>
 8005800:	2030      	movs	r0, #48	; 0x30
 8005802:	18e1      	adds	r1, r4, r3
 8005804:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005808:	1c5a      	adds	r2, r3, #1
 800580a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800580e:	4422      	add	r2, r4
 8005810:	3302      	adds	r3, #2
 8005812:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005816:	e7c4      	b.n	80057a2 <_printf_common+0x62>
 8005818:	2301      	movs	r3, #1
 800581a:	4622      	mov	r2, r4
 800581c:	4639      	mov	r1, r7
 800581e:	4630      	mov	r0, r6
 8005820:	47c0      	blx	r8
 8005822:	3001      	adds	r0, #1
 8005824:	d0e6      	beq.n	80057f4 <_printf_common+0xb4>
 8005826:	f109 0901 	add.w	r9, r9, #1
 800582a:	e7d8      	b.n	80057de <_printf_common+0x9e>

0800582c <_printf_i>:
 800582c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005830:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005834:	460c      	mov	r4, r1
 8005836:	7e09      	ldrb	r1, [r1, #24]
 8005838:	b085      	sub	sp, #20
 800583a:	296e      	cmp	r1, #110	; 0x6e
 800583c:	4617      	mov	r7, r2
 800583e:	4606      	mov	r6, r0
 8005840:	4698      	mov	r8, r3
 8005842:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005844:	f000 80b3 	beq.w	80059ae <_printf_i+0x182>
 8005848:	d822      	bhi.n	8005890 <_printf_i+0x64>
 800584a:	2963      	cmp	r1, #99	; 0x63
 800584c:	d036      	beq.n	80058bc <_printf_i+0x90>
 800584e:	d80a      	bhi.n	8005866 <_printf_i+0x3a>
 8005850:	2900      	cmp	r1, #0
 8005852:	f000 80b9 	beq.w	80059c8 <_printf_i+0x19c>
 8005856:	2958      	cmp	r1, #88	; 0x58
 8005858:	f000 8083 	beq.w	8005962 <_printf_i+0x136>
 800585c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005860:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005864:	e032      	b.n	80058cc <_printf_i+0xa0>
 8005866:	2964      	cmp	r1, #100	; 0x64
 8005868:	d001      	beq.n	800586e <_printf_i+0x42>
 800586a:	2969      	cmp	r1, #105	; 0x69
 800586c:	d1f6      	bne.n	800585c <_printf_i+0x30>
 800586e:	6820      	ldr	r0, [r4, #0]
 8005870:	6813      	ldr	r3, [r2, #0]
 8005872:	0605      	lsls	r5, r0, #24
 8005874:	f103 0104 	add.w	r1, r3, #4
 8005878:	d52a      	bpl.n	80058d0 <_printf_i+0xa4>
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	6011      	str	r1, [r2, #0]
 800587e:	2b00      	cmp	r3, #0
 8005880:	da03      	bge.n	800588a <_printf_i+0x5e>
 8005882:	222d      	movs	r2, #45	; 0x2d
 8005884:	425b      	negs	r3, r3
 8005886:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800588a:	486f      	ldr	r0, [pc, #444]	; (8005a48 <_printf_i+0x21c>)
 800588c:	220a      	movs	r2, #10
 800588e:	e039      	b.n	8005904 <_printf_i+0xd8>
 8005890:	2973      	cmp	r1, #115	; 0x73
 8005892:	f000 809d 	beq.w	80059d0 <_printf_i+0x1a4>
 8005896:	d808      	bhi.n	80058aa <_printf_i+0x7e>
 8005898:	296f      	cmp	r1, #111	; 0x6f
 800589a:	d020      	beq.n	80058de <_printf_i+0xb2>
 800589c:	2970      	cmp	r1, #112	; 0x70
 800589e:	d1dd      	bne.n	800585c <_printf_i+0x30>
 80058a0:	6823      	ldr	r3, [r4, #0]
 80058a2:	f043 0320 	orr.w	r3, r3, #32
 80058a6:	6023      	str	r3, [r4, #0]
 80058a8:	e003      	b.n	80058b2 <_printf_i+0x86>
 80058aa:	2975      	cmp	r1, #117	; 0x75
 80058ac:	d017      	beq.n	80058de <_printf_i+0xb2>
 80058ae:	2978      	cmp	r1, #120	; 0x78
 80058b0:	d1d4      	bne.n	800585c <_printf_i+0x30>
 80058b2:	2378      	movs	r3, #120	; 0x78
 80058b4:	4865      	ldr	r0, [pc, #404]	; (8005a4c <_printf_i+0x220>)
 80058b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80058ba:	e055      	b.n	8005968 <_printf_i+0x13c>
 80058bc:	6813      	ldr	r3, [r2, #0]
 80058be:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058c2:	1d19      	adds	r1, r3, #4
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	6011      	str	r1, [r2, #0]
 80058c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058cc:	2301      	movs	r3, #1
 80058ce:	e08c      	b.n	80059ea <_printf_i+0x1be>
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80058d6:	6011      	str	r1, [r2, #0]
 80058d8:	bf18      	it	ne
 80058da:	b21b      	sxthne	r3, r3
 80058dc:	e7cf      	b.n	800587e <_printf_i+0x52>
 80058de:	6813      	ldr	r3, [r2, #0]
 80058e0:	6825      	ldr	r5, [r4, #0]
 80058e2:	1d18      	adds	r0, r3, #4
 80058e4:	6010      	str	r0, [r2, #0]
 80058e6:	0628      	lsls	r0, r5, #24
 80058e8:	d501      	bpl.n	80058ee <_printf_i+0xc2>
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	e002      	b.n	80058f4 <_printf_i+0xc8>
 80058ee:	0668      	lsls	r0, r5, #25
 80058f0:	d5fb      	bpl.n	80058ea <_printf_i+0xbe>
 80058f2:	881b      	ldrh	r3, [r3, #0]
 80058f4:	296f      	cmp	r1, #111	; 0x6f
 80058f6:	bf14      	ite	ne
 80058f8:	220a      	movne	r2, #10
 80058fa:	2208      	moveq	r2, #8
 80058fc:	4852      	ldr	r0, [pc, #328]	; (8005a48 <_printf_i+0x21c>)
 80058fe:	2100      	movs	r1, #0
 8005900:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005904:	6865      	ldr	r5, [r4, #4]
 8005906:	2d00      	cmp	r5, #0
 8005908:	60a5      	str	r5, [r4, #8]
 800590a:	f2c0 8095 	blt.w	8005a38 <_printf_i+0x20c>
 800590e:	6821      	ldr	r1, [r4, #0]
 8005910:	f021 0104 	bic.w	r1, r1, #4
 8005914:	6021      	str	r1, [r4, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d13d      	bne.n	8005996 <_printf_i+0x16a>
 800591a:	2d00      	cmp	r5, #0
 800591c:	f040 808e 	bne.w	8005a3c <_printf_i+0x210>
 8005920:	4665      	mov	r5, ip
 8005922:	2a08      	cmp	r2, #8
 8005924:	d10b      	bne.n	800593e <_printf_i+0x112>
 8005926:	6823      	ldr	r3, [r4, #0]
 8005928:	07db      	lsls	r3, r3, #31
 800592a:	d508      	bpl.n	800593e <_printf_i+0x112>
 800592c:	6923      	ldr	r3, [r4, #16]
 800592e:	6862      	ldr	r2, [r4, #4]
 8005930:	429a      	cmp	r2, r3
 8005932:	bfde      	ittt	le
 8005934:	2330      	movle	r3, #48	; 0x30
 8005936:	f805 3c01 	strble.w	r3, [r5, #-1]
 800593a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800593e:	ebac 0305 	sub.w	r3, ip, r5
 8005942:	6123      	str	r3, [r4, #16]
 8005944:	f8cd 8000 	str.w	r8, [sp]
 8005948:	463b      	mov	r3, r7
 800594a:	aa03      	add	r2, sp, #12
 800594c:	4621      	mov	r1, r4
 800594e:	4630      	mov	r0, r6
 8005950:	f7ff fef6 	bl	8005740 <_printf_common>
 8005954:	3001      	adds	r0, #1
 8005956:	d14d      	bne.n	80059f4 <_printf_i+0x1c8>
 8005958:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800595c:	b005      	add	sp, #20
 800595e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005962:	4839      	ldr	r0, [pc, #228]	; (8005a48 <_printf_i+0x21c>)
 8005964:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005968:	6813      	ldr	r3, [r2, #0]
 800596a:	6821      	ldr	r1, [r4, #0]
 800596c:	1d1d      	adds	r5, r3, #4
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	6015      	str	r5, [r2, #0]
 8005972:	060a      	lsls	r2, r1, #24
 8005974:	d50b      	bpl.n	800598e <_printf_i+0x162>
 8005976:	07ca      	lsls	r2, r1, #31
 8005978:	bf44      	itt	mi
 800597a:	f041 0120 	orrmi.w	r1, r1, #32
 800597e:	6021      	strmi	r1, [r4, #0]
 8005980:	b91b      	cbnz	r3, 800598a <_printf_i+0x15e>
 8005982:	6822      	ldr	r2, [r4, #0]
 8005984:	f022 0220 	bic.w	r2, r2, #32
 8005988:	6022      	str	r2, [r4, #0]
 800598a:	2210      	movs	r2, #16
 800598c:	e7b7      	b.n	80058fe <_printf_i+0xd2>
 800598e:	064d      	lsls	r5, r1, #25
 8005990:	bf48      	it	mi
 8005992:	b29b      	uxthmi	r3, r3
 8005994:	e7ef      	b.n	8005976 <_printf_i+0x14a>
 8005996:	4665      	mov	r5, ip
 8005998:	fbb3 f1f2 	udiv	r1, r3, r2
 800599c:	fb02 3311 	mls	r3, r2, r1, r3
 80059a0:	5cc3      	ldrb	r3, [r0, r3]
 80059a2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80059a6:	460b      	mov	r3, r1
 80059a8:	2900      	cmp	r1, #0
 80059aa:	d1f5      	bne.n	8005998 <_printf_i+0x16c>
 80059ac:	e7b9      	b.n	8005922 <_printf_i+0xf6>
 80059ae:	6813      	ldr	r3, [r2, #0]
 80059b0:	6825      	ldr	r5, [r4, #0]
 80059b2:	1d18      	adds	r0, r3, #4
 80059b4:	6961      	ldr	r1, [r4, #20]
 80059b6:	6010      	str	r0, [r2, #0]
 80059b8:	0628      	lsls	r0, r5, #24
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	d501      	bpl.n	80059c2 <_printf_i+0x196>
 80059be:	6019      	str	r1, [r3, #0]
 80059c0:	e002      	b.n	80059c8 <_printf_i+0x19c>
 80059c2:	066a      	lsls	r2, r5, #25
 80059c4:	d5fb      	bpl.n	80059be <_printf_i+0x192>
 80059c6:	8019      	strh	r1, [r3, #0]
 80059c8:	2300      	movs	r3, #0
 80059ca:	4665      	mov	r5, ip
 80059cc:	6123      	str	r3, [r4, #16]
 80059ce:	e7b9      	b.n	8005944 <_printf_i+0x118>
 80059d0:	6813      	ldr	r3, [r2, #0]
 80059d2:	1d19      	adds	r1, r3, #4
 80059d4:	6011      	str	r1, [r2, #0]
 80059d6:	681d      	ldr	r5, [r3, #0]
 80059d8:	6862      	ldr	r2, [r4, #4]
 80059da:	2100      	movs	r1, #0
 80059dc:	4628      	mov	r0, r5
 80059de:	f000 fee5 	bl	80067ac <memchr>
 80059e2:	b108      	cbz	r0, 80059e8 <_printf_i+0x1bc>
 80059e4:	1b40      	subs	r0, r0, r5
 80059e6:	6060      	str	r0, [r4, #4]
 80059e8:	6863      	ldr	r3, [r4, #4]
 80059ea:	6123      	str	r3, [r4, #16]
 80059ec:	2300      	movs	r3, #0
 80059ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059f2:	e7a7      	b.n	8005944 <_printf_i+0x118>
 80059f4:	6923      	ldr	r3, [r4, #16]
 80059f6:	462a      	mov	r2, r5
 80059f8:	4639      	mov	r1, r7
 80059fa:	4630      	mov	r0, r6
 80059fc:	47c0      	blx	r8
 80059fe:	3001      	adds	r0, #1
 8005a00:	d0aa      	beq.n	8005958 <_printf_i+0x12c>
 8005a02:	6823      	ldr	r3, [r4, #0]
 8005a04:	079b      	lsls	r3, r3, #30
 8005a06:	d413      	bmi.n	8005a30 <_printf_i+0x204>
 8005a08:	68e0      	ldr	r0, [r4, #12]
 8005a0a:	9b03      	ldr	r3, [sp, #12]
 8005a0c:	4298      	cmp	r0, r3
 8005a0e:	bfb8      	it	lt
 8005a10:	4618      	movlt	r0, r3
 8005a12:	e7a3      	b.n	800595c <_printf_i+0x130>
 8005a14:	2301      	movs	r3, #1
 8005a16:	464a      	mov	r2, r9
 8005a18:	4639      	mov	r1, r7
 8005a1a:	4630      	mov	r0, r6
 8005a1c:	47c0      	blx	r8
 8005a1e:	3001      	adds	r0, #1
 8005a20:	d09a      	beq.n	8005958 <_printf_i+0x12c>
 8005a22:	3501      	adds	r5, #1
 8005a24:	68e3      	ldr	r3, [r4, #12]
 8005a26:	9a03      	ldr	r2, [sp, #12]
 8005a28:	1a9b      	subs	r3, r3, r2
 8005a2a:	42ab      	cmp	r3, r5
 8005a2c:	dcf2      	bgt.n	8005a14 <_printf_i+0x1e8>
 8005a2e:	e7eb      	b.n	8005a08 <_printf_i+0x1dc>
 8005a30:	2500      	movs	r5, #0
 8005a32:	f104 0919 	add.w	r9, r4, #25
 8005a36:	e7f5      	b.n	8005a24 <_printf_i+0x1f8>
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d1ac      	bne.n	8005996 <_printf_i+0x16a>
 8005a3c:	7803      	ldrb	r3, [r0, #0]
 8005a3e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a42:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a46:	e76c      	b.n	8005922 <_printf_i+0xf6>
 8005a48:	0800b342 	.word	0x0800b342
 8005a4c:	0800b353 	.word	0x0800b353

08005a50 <sniprintf>:
 8005a50:	b40c      	push	{r2, r3}
 8005a52:	b530      	push	{r4, r5, lr}
 8005a54:	4b17      	ldr	r3, [pc, #92]	; (8005ab4 <sniprintf+0x64>)
 8005a56:	1e0c      	subs	r4, r1, #0
 8005a58:	b09d      	sub	sp, #116	; 0x74
 8005a5a:	681d      	ldr	r5, [r3, #0]
 8005a5c:	da08      	bge.n	8005a70 <sniprintf+0x20>
 8005a5e:	238b      	movs	r3, #139	; 0x8b
 8005a60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a64:	602b      	str	r3, [r5, #0]
 8005a66:	b01d      	add	sp, #116	; 0x74
 8005a68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a6c:	b002      	add	sp, #8
 8005a6e:	4770      	bx	lr
 8005a70:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005a74:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005a78:	bf0c      	ite	eq
 8005a7a:	4623      	moveq	r3, r4
 8005a7c:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8005a80:	9304      	str	r3, [sp, #16]
 8005a82:	9307      	str	r3, [sp, #28]
 8005a84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005a88:	9002      	str	r0, [sp, #8]
 8005a8a:	9006      	str	r0, [sp, #24]
 8005a8c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005a90:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005a92:	ab21      	add	r3, sp, #132	; 0x84
 8005a94:	a902      	add	r1, sp, #8
 8005a96:	4628      	mov	r0, r5
 8005a98:	9301      	str	r3, [sp, #4]
 8005a9a:	f001 fa8b 	bl	8006fb4 <_svfiprintf_r>
 8005a9e:	1c43      	adds	r3, r0, #1
 8005aa0:	bfbc      	itt	lt
 8005aa2:	238b      	movlt	r3, #139	; 0x8b
 8005aa4:	602b      	strlt	r3, [r5, #0]
 8005aa6:	2c00      	cmp	r4, #0
 8005aa8:	d0dd      	beq.n	8005a66 <sniprintf+0x16>
 8005aaa:	2200      	movs	r2, #0
 8005aac:	9b02      	ldr	r3, [sp, #8]
 8005aae:	701a      	strb	r2, [r3, #0]
 8005ab0:	e7d9      	b.n	8005a66 <sniprintf+0x16>
 8005ab2:	bf00      	nop
 8005ab4:	20000048 	.word	0x20000048

08005ab8 <siprintf>:
 8005ab8:	b40e      	push	{r1, r2, r3}
 8005aba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005abe:	b500      	push	{lr}
 8005ac0:	b09c      	sub	sp, #112	; 0x70
 8005ac2:	ab1d      	add	r3, sp, #116	; 0x74
 8005ac4:	9002      	str	r0, [sp, #8]
 8005ac6:	9006      	str	r0, [sp, #24]
 8005ac8:	9107      	str	r1, [sp, #28]
 8005aca:	9104      	str	r1, [sp, #16]
 8005acc:	4808      	ldr	r0, [pc, #32]	; (8005af0 <siprintf+0x38>)
 8005ace:	4909      	ldr	r1, [pc, #36]	; (8005af4 <siprintf+0x3c>)
 8005ad0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ad4:	9105      	str	r1, [sp, #20]
 8005ad6:	6800      	ldr	r0, [r0, #0]
 8005ad8:	a902      	add	r1, sp, #8
 8005ada:	9301      	str	r3, [sp, #4]
 8005adc:	f001 fa6a 	bl	8006fb4 <_svfiprintf_r>
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	9b02      	ldr	r3, [sp, #8]
 8005ae4:	701a      	strb	r2, [r3, #0]
 8005ae6:	b01c      	add	sp, #112	; 0x70
 8005ae8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005aec:	b003      	add	sp, #12
 8005aee:	4770      	bx	lr
 8005af0:	20000048 	.word	0x20000048
 8005af4:	ffff0208 	.word	0xffff0208

08005af8 <quorem>:
 8005af8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005afc:	6903      	ldr	r3, [r0, #16]
 8005afe:	690c      	ldr	r4, [r1, #16]
 8005b00:	4680      	mov	r8, r0
 8005b02:	42a3      	cmp	r3, r4
 8005b04:	f2c0 8084 	blt.w	8005c10 <quorem+0x118>
 8005b08:	3c01      	subs	r4, #1
 8005b0a:	f101 0714 	add.w	r7, r1, #20
 8005b0e:	f100 0614 	add.w	r6, r0, #20
 8005b12:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005b16:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005b1a:	3501      	adds	r5, #1
 8005b1c:	fbb0 f5f5 	udiv	r5, r0, r5
 8005b20:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005b24:	eb06 030c 	add.w	r3, r6, ip
 8005b28:	eb07 090c 	add.w	r9, r7, ip
 8005b2c:	9301      	str	r3, [sp, #4]
 8005b2e:	b39d      	cbz	r5, 8005b98 <quorem+0xa0>
 8005b30:	f04f 0a00 	mov.w	sl, #0
 8005b34:	4638      	mov	r0, r7
 8005b36:	46b6      	mov	lr, r6
 8005b38:	46d3      	mov	fp, sl
 8005b3a:	f850 2b04 	ldr.w	r2, [r0], #4
 8005b3e:	b293      	uxth	r3, r2
 8005b40:	fb05 a303 	mla	r3, r5, r3, sl
 8005b44:	0c12      	lsrs	r2, r2, #16
 8005b46:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005b4a:	fb05 a202 	mla	r2, r5, r2, sl
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	ebab 0303 	sub.w	r3, fp, r3
 8005b54:	f8de b000 	ldr.w	fp, [lr]
 8005b58:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005b5c:	fa1f fb8b 	uxth.w	fp, fp
 8005b60:	445b      	add	r3, fp
 8005b62:	fa1f fb82 	uxth.w	fp, r2
 8005b66:	f8de 2000 	ldr.w	r2, [lr]
 8005b6a:	4581      	cmp	r9, r0
 8005b6c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005b70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b7a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005b7e:	f84e 3b04 	str.w	r3, [lr], #4
 8005b82:	d2da      	bcs.n	8005b3a <quorem+0x42>
 8005b84:	f856 300c 	ldr.w	r3, [r6, ip]
 8005b88:	b933      	cbnz	r3, 8005b98 <quorem+0xa0>
 8005b8a:	9b01      	ldr	r3, [sp, #4]
 8005b8c:	3b04      	subs	r3, #4
 8005b8e:	429e      	cmp	r6, r3
 8005b90:	461a      	mov	r2, r3
 8005b92:	d331      	bcc.n	8005bf8 <quorem+0x100>
 8005b94:	f8c8 4010 	str.w	r4, [r8, #16]
 8005b98:	4640      	mov	r0, r8
 8005b9a:	f001 f835 	bl	8006c08 <__mcmp>
 8005b9e:	2800      	cmp	r0, #0
 8005ba0:	db26      	blt.n	8005bf0 <quorem+0xf8>
 8005ba2:	4630      	mov	r0, r6
 8005ba4:	f04f 0c00 	mov.w	ip, #0
 8005ba8:	3501      	adds	r5, #1
 8005baa:	f857 1b04 	ldr.w	r1, [r7], #4
 8005bae:	f8d0 e000 	ldr.w	lr, [r0]
 8005bb2:	b28b      	uxth	r3, r1
 8005bb4:	ebac 0303 	sub.w	r3, ip, r3
 8005bb8:	fa1f f28e 	uxth.w	r2, lr
 8005bbc:	4413      	add	r3, r2
 8005bbe:	0c0a      	lsrs	r2, r1, #16
 8005bc0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005bc4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005bce:	45b9      	cmp	r9, r7
 8005bd0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005bd4:	f840 3b04 	str.w	r3, [r0], #4
 8005bd8:	d2e7      	bcs.n	8005baa <quorem+0xb2>
 8005bda:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005bde:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005be2:	b92a      	cbnz	r2, 8005bf0 <quorem+0xf8>
 8005be4:	3b04      	subs	r3, #4
 8005be6:	429e      	cmp	r6, r3
 8005be8:	461a      	mov	r2, r3
 8005bea:	d30b      	bcc.n	8005c04 <quorem+0x10c>
 8005bec:	f8c8 4010 	str.w	r4, [r8, #16]
 8005bf0:	4628      	mov	r0, r5
 8005bf2:	b003      	add	sp, #12
 8005bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bf8:	6812      	ldr	r2, [r2, #0]
 8005bfa:	3b04      	subs	r3, #4
 8005bfc:	2a00      	cmp	r2, #0
 8005bfe:	d1c9      	bne.n	8005b94 <quorem+0x9c>
 8005c00:	3c01      	subs	r4, #1
 8005c02:	e7c4      	b.n	8005b8e <quorem+0x96>
 8005c04:	6812      	ldr	r2, [r2, #0]
 8005c06:	3b04      	subs	r3, #4
 8005c08:	2a00      	cmp	r2, #0
 8005c0a:	d1ef      	bne.n	8005bec <quorem+0xf4>
 8005c0c:	3c01      	subs	r4, #1
 8005c0e:	e7ea      	b.n	8005be6 <quorem+0xee>
 8005c10:	2000      	movs	r0, #0
 8005c12:	e7ee      	b.n	8005bf2 <quorem+0xfa>
 8005c14:	0000      	movs	r0, r0
	...

08005c18 <_dtoa_r>:
 8005c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c1c:	4616      	mov	r6, r2
 8005c1e:	461f      	mov	r7, r3
 8005c20:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005c22:	b095      	sub	sp, #84	; 0x54
 8005c24:	4604      	mov	r4, r0
 8005c26:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8005c2a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005c2e:	b93d      	cbnz	r5, 8005c40 <_dtoa_r+0x28>
 8005c30:	2010      	movs	r0, #16
 8005c32:	f000 fdb3 	bl	800679c <malloc>
 8005c36:	6260      	str	r0, [r4, #36]	; 0x24
 8005c38:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005c3c:	6005      	str	r5, [r0, #0]
 8005c3e:	60c5      	str	r5, [r0, #12]
 8005c40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c42:	6819      	ldr	r1, [r3, #0]
 8005c44:	b151      	cbz	r1, 8005c5c <_dtoa_r+0x44>
 8005c46:	685a      	ldr	r2, [r3, #4]
 8005c48:	2301      	movs	r3, #1
 8005c4a:	4093      	lsls	r3, r2
 8005c4c:	604a      	str	r2, [r1, #4]
 8005c4e:	608b      	str	r3, [r1, #8]
 8005c50:	4620      	mov	r0, r4
 8005c52:	f000 fdf8 	bl	8006846 <_Bfree>
 8005c56:	2200      	movs	r2, #0
 8005c58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c5a:	601a      	str	r2, [r3, #0]
 8005c5c:	1e3b      	subs	r3, r7, #0
 8005c5e:	bfaf      	iteee	ge
 8005c60:	2300      	movge	r3, #0
 8005c62:	2201      	movlt	r2, #1
 8005c64:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005c68:	9303      	strlt	r3, [sp, #12]
 8005c6a:	bfac      	ite	ge
 8005c6c:	f8c8 3000 	strge.w	r3, [r8]
 8005c70:	f8c8 2000 	strlt.w	r2, [r8]
 8005c74:	4bae      	ldr	r3, [pc, #696]	; (8005f30 <_dtoa_r+0x318>)
 8005c76:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005c7a:	ea33 0308 	bics.w	r3, r3, r8
 8005c7e:	d11b      	bne.n	8005cb8 <_dtoa_r+0xa0>
 8005c80:	f242 730f 	movw	r3, #9999	; 0x270f
 8005c84:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005c86:	6013      	str	r3, [r2, #0]
 8005c88:	9b02      	ldr	r3, [sp, #8]
 8005c8a:	b923      	cbnz	r3, 8005c96 <_dtoa_r+0x7e>
 8005c8c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005c90:	2800      	cmp	r0, #0
 8005c92:	f000 8545 	beq.w	8006720 <_dtoa_r+0xb08>
 8005c96:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c98:	b953      	cbnz	r3, 8005cb0 <_dtoa_r+0x98>
 8005c9a:	4ba6      	ldr	r3, [pc, #664]	; (8005f34 <_dtoa_r+0x31c>)
 8005c9c:	e021      	b.n	8005ce2 <_dtoa_r+0xca>
 8005c9e:	4ba6      	ldr	r3, [pc, #664]	; (8005f38 <_dtoa_r+0x320>)
 8005ca0:	9306      	str	r3, [sp, #24]
 8005ca2:	3308      	adds	r3, #8
 8005ca4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005ca6:	6013      	str	r3, [r2, #0]
 8005ca8:	9806      	ldr	r0, [sp, #24]
 8005caa:	b015      	add	sp, #84	; 0x54
 8005cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cb0:	4ba0      	ldr	r3, [pc, #640]	; (8005f34 <_dtoa_r+0x31c>)
 8005cb2:	9306      	str	r3, [sp, #24]
 8005cb4:	3303      	adds	r3, #3
 8005cb6:	e7f5      	b.n	8005ca4 <_dtoa_r+0x8c>
 8005cb8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	4630      	mov	r0, r6
 8005cc2:	4639      	mov	r1, r7
 8005cc4:	f7fa fedc 	bl	8000a80 <__aeabi_dcmpeq>
 8005cc8:	4682      	mov	sl, r0
 8005cca:	b160      	cbz	r0, 8005ce6 <_dtoa_r+0xce>
 8005ccc:	2301      	movs	r3, #1
 8005cce:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005cd0:	6013      	str	r3, [r2, #0]
 8005cd2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f000 8520 	beq.w	800671a <_dtoa_r+0xb02>
 8005cda:	4b98      	ldr	r3, [pc, #608]	; (8005f3c <_dtoa_r+0x324>)
 8005cdc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005cde:	6013      	str	r3, [r2, #0]
 8005ce0:	3b01      	subs	r3, #1
 8005ce2:	9306      	str	r3, [sp, #24]
 8005ce4:	e7e0      	b.n	8005ca8 <_dtoa_r+0x90>
 8005ce6:	ab12      	add	r3, sp, #72	; 0x48
 8005ce8:	9301      	str	r3, [sp, #4]
 8005cea:	ab13      	add	r3, sp, #76	; 0x4c
 8005cec:	9300      	str	r3, [sp, #0]
 8005cee:	4632      	mov	r2, r6
 8005cf0:	463b      	mov	r3, r7
 8005cf2:	4620      	mov	r0, r4
 8005cf4:	f001 f800 	bl	8006cf8 <__d2b>
 8005cf8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005cfc:	4683      	mov	fp, r0
 8005cfe:	2d00      	cmp	r5, #0
 8005d00:	d07d      	beq.n	8005dfe <_dtoa_r+0x1e6>
 8005d02:	46b0      	mov	r8, r6
 8005d04:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005d08:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8005d0c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8005d10:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005d14:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8005d18:	2200      	movs	r2, #0
 8005d1a:	4b89      	ldr	r3, [pc, #548]	; (8005f40 <_dtoa_r+0x328>)
 8005d1c:	4640      	mov	r0, r8
 8005d1e:	4649      	mov	r1, r9
 8005d20:	f7fa fa8e 	bl	8000240 <__aeabi_dsub>
 8005d24:	a37c      	add	r3, pc, #496	; (adr r3, 8005f18 <_dtoa_r+0x300>)
 8005d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2a:	f7fa fc41 	bl	80005b0 <__aeabi_dmul>
 8005d2e:	a37c      	add	r3, pc, #496	; (adr r3, 8005f20 <_dtoa_r+0x308>)
 8005d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d34:	f7fa fa86 	bl	8000244 <__adddf3>
 8005d38:	4606      	mov	r6, r0
 8005d3a:	4628      	mov	r0, r5
 8005d3c:	460f      	mov	r7, r1
 8005d3e:	f7fa fbcd 	bl	80004dc <__aeabi_i2d>
 8005d42:	a379      	add	r3, pc, #484	; (adr r3, 8005f28 <_dtoa_r+0x310>)
 8005d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d48:	f7fa fc32 	bl	80005b0 <__aeabi_dmul>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	460b      	mov	r3, r1
 8005d50:	4630      	mov	r0, r6
 8005d52:	4639      	mov	r1, r7
 8005d54:	f7fa fa76 	bl	8000244 <__adddf3>
 8005d58:	4606      	mov	r6, r0
 8005d5a:	460f      	mov	r7, r1
 8005d5c:	f7fa fed8 	bl	8000b10 <__aeabi_d2iz>
 8005d60:	2200      	movs	r2, #0
 8005d62:	4682      	mov	sl, r0
 8005d64:	2300      	movs	r3, #0
 8005d66:	4630      	mov	r0, r6
 8005d68:	4639      	mov	r1, r7
 8005d6a:	f7fa fe93 	bl	8000a94 <__aeabi_dcmplt>
 8005d6e:	b148      	cbz	r0, 8005d84 <_dtoa_r+0x16c>
 8005d70:	4650      	mov	r0, sl
 8005d72:	f7fa fbb3 	bl	80004dc <__aeabi_i2d>
 8005d76:	4632      	mov	r2, r6
 8005d78:	463b      	mov	r3, r7
 8005d7a:	f7fa fe81 	bl	8000a80 <__aeabi_dcmpeq>
 8005d7e:	b908      	cbnz	r0, 8005d84 <_dtoa_r+0x16c>
 8005d80:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005d84:	f1ba 0f16 	cmp.w	sl, #22
 8005d88:	d85a      	bhi.n	8005e40 <_dtoa_r+0x228>
 8005d8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d8e:	496d      	ldr	r1, [pc, #436]	; (8005f44 <_dtoa_r+0x32c>)
 8005d90:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005d94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d98:	f7fa fe9a 	bl	8000ad0 <__aeabi_dcmpgt>
 8005d9c:	2800      	cmp	r0, #0
 8005d9e:	d051      	beq.n	8005e44 <_dtoa_r+0x22c>
 8005da0:	2300      	movs	r3, #0
 8005da2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005da6:	930d      	str	r3, [sp, #52]	; 0x34
 8005da8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005daa:	1b5d      	subs	r5, r3, r5
 8005dac:	1e6b      	subs	r3, r5, #1
 8005dae:	9307      	str	r3, [sp, #28]
 8005db0:	bf43      	ittte	mi
 8005db2:	2300      	movmi	r3, #0
 8005db4:	f1c5 0901 	rsbmi	r9, r5, #1
 8005db8:	9307      	strmi	r3, [sp, #28]
 8005dba:	f04f 0900 	movpl.w	r9, #0
 8005dbe:	f1ba 0f00 	cmp.w	sl, #0
 8005dc2:	db41      	blt.n	8005e48 <_dtoa_r+0x230>
 8005dc4:	9b07      	ldr	r3, [sp, #28]
 8005dc6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8005dca:	4453      	add	r3, sl
 8005dcc:	9307      	str	r3, [sp, #28]
 8005dce:	2300      	movs	r3, #0
 8005dd0:	9308      	str	r3, [sp, #32]
 8005dd2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005dd4:	2b09      	cmp	r3, #9
 8005dd6:	f200 808f 	bhi.w	8005ef8 <_dtoa_r+0x2e0>
 8005dda:	2b05      	cmp	r3, #5
 8005ddc:	bfc4      	itt	gt
 8005dde:	3b04      	subgt	r3, #4
 8005de0:	931e      	strgt	r3, [sp, #120]	; 0x78
 8005de2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005de4:	bfc8      	it	gt
 8005de6:	2500      	movgt	r5, #0
 8005de8:	f1a3 0302 	sub.w	r3, r3, #2
 8005dec:	bfd8      	it	le
 8005dee:	2501      	movle	r5, #1
 8005df0:	2b03      	cmp	r3, #3
 8005df2:	f200 808d 	bhi.w	8005f10 <_dtoa_r+0x2f8>
 8005df6:	e8df f003 	tbb	[pc, r3]
 8005dfa:	7d7b      	.short	0x7d7b
 8005dfc:	6f2f      	.short	0x6f2f
 8005dfe:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005e02:	441d      	add	r5, r3
 8005e04:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005e08:	2820      	cmp	r0, #32
 8005e0a:	dd13      	ble.n	8005e34 <_dtoa_r+0x21c>
 8005e0c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005e10:	9b02      	ldr	r3, [sp, #8]
 8005e12:	fa08 f800 	lsl.w	r8, r8, r0
 8005e16:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005e1a:	fa23 f000 	lsr.w	r0, r3, r0
 8005e1e:	ea48 0000 	orr.w	r0, r8, r0
 8005e22:	f7fa fb4b 	bl	80004bc <__aeabi_ui2d>
 8005e26:	2301      	movs	r3, #1
 8005e28:	4680      	mov	r8, r0
 8005e2a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8005e2e:	3d01      	subs	r5, #1
 8005e30:	9310      	str	r3, [sp, #64]	; 0x40
 8005e32:	e771      	b.n	8005d18 <_dtoa_r+0x100>
 8005e34:	9b02      	ldr	r3, [sp, #8]
 8005e36:	f1c0 0020 	rsb	r0, r0, #32
 8005e3a:	fa03 f000 	lsl.w	r0, r3, r0
 8005e3e:	e7f0      	b.n	8005e22 <_dtoa_r+0x20a>
 8005e40:	2301      	movs	r3, #1
 8005e42:	e7b0      	b.n	8005da6 <_dtoa_r+0x18e>
 8005e44:	900d      	str	r0, [sp, #52]	; 0x34
 8005e46:	e7af      	b.n	8005da8 <_dtoa_r+0x190>
 8005e48:	f1ca 0300 	rsb	r3, sl, #0
 8005e4c:	9308      	str	r3, [sp, #32]
 8005e4e:	2300      	movs	r3, #0
 8005e50:	eba9 090a 	sub.w	r9, r9, sl
 8005e54:	930c      	str	r3, [sp, #48]	; 0x30
 8005e56:	e7bc      	b.n	8005dd2 <_dtoa_r+0x1ba>
 8005e58:	2301      	movs	r3, #1
 8005e5a:	9309      	str	r3, [sp, #36]	; 0x24
 8005e5c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	dd74      	ble.n	8005f4c <_dtoa_r+0x334>
 8005e62:	4698      	mov	r8, r3
 8005e64:	9304      	str	r3, [sp, #16]
 8005e66:	2200      	movs	r2, #0
 8005e68:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005e6a:	6072      	str	r2, [r6, #4]
 8005e6c:	2204      	movs	r2, #4
 8005e6e:	f102 0014 	add.w	r0, r2, #20
 8005e72:	4298      	cmp	r0, r3
 8005e74:	6871      	ldr	r1, [r6, #4]
 8005e76:	d96e      	bls.n	8005f56 <_dtoa_r+0x33e>
 8005e78:	4620      	mov	r0, r4
 8005e7a:	f000 fcb0 	bl	80067de <_Balloc>
 8005e7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e80:	6030      	str	r0, [r6, #0]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f1b8 0f0e 	cmp.w	r8, #14
 8005e88:	9306      	str	r3, [sp, #24]
 8005e8a:	f200 80ed 	bhi.w	8006068 <_dtoa_r+0x450>
 8005e8e:	2d00      	cmp	r5, #0
 8005e90:	f000 80ea 	beq.w	8006068 <_dtoa_r+0x450>
 8005e94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e98:	f1ba 0f00 	cmp.w	sl, #0
 8005e9c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005ea0:	dd77      	ble.n	8005f92 <_dtoa_r+0x37a>
 8005ea2:	4a28      	ldr	r2, [pc, #160]	; (8005f44 <_dtoa_r+0x32c>)
 8005ea4:	f00a 030f 	and.w	r3, sl, #15
 8005ea8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005eac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005eb0:	06f0      	lsls	r0, r6, #27
 8005eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005eba:	d568      	bpl.n	8005f8e <_dtoa_r+0x376>
 8005ebc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005ec0:	4b21      	ldr	r3, [pc, #132]	; (8005f48 <_dtoa_r+0x330>)
 8005ec2:	2503      	movs	r5, #3
 8005ec4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005ec8:	f7fa fc9c 	bl	8000804 <__aeabi_ddiv>
 8005ecc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ed0:	f006 060f 	and.w	r6, r6, #15
 8005ed4:	4f1c      	ldr	r7, [pc, #112]	; (8005f48 <_dtoa_r+0x330>)
 8005ed6:	e04f      	b.n	8005f78 <_dtoa_r+0x360>
 8005ed8:	2301      	movs	r3, #1
 8005eda:	9309      	str	r3, [sp, #36]	; 0x24
 8005edc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005ede:	4453      	add	r3, sl
 8005ee0:	f103 0801 	add.w	r8, r3, #1
 8005ee4:	9304      	str	r3, [sp, #16]
 8005ee6:	4643      	mov	r3, r8
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	bfb8      	it	lt
 8005eec:	2301      	movlt	r3, #1
 8005eee:	e7ba      	b.n	8005e66 <_dtoa_r+0x24e>
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	e7b2      	b.n	8005e5a <_dtoa_r+0x242>
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	e7f0      	b.n	8005eda <_dtoa_r+0x2c2>
 8005ef8:	2501      	movs	r5, #1
 8005efa:	2300      	movs	r3, #0
 8005efc:	9509      	str	r5, [sp, #36]	; 0x24
 8005efe:	931e      	str	r3, [sp, #120]	; 0x78
 8005f00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f04:	2200      	movs	r2, #0
 8005f06:	9304      	str	r3, [sp, #16]
 8005f08:	4698      	mov	r8, r3
 8005f0a:	2312      	movs	r3, #18
 8005f0c:	921f      	str	r2, [sp, #124]	; 0x7c
 8005f0e:	e7aa      	b.n	8005e66 <_dtoa_r+0x24e>
 8005f10:	2301      	movs	r3, #1
 8005f12:	9309      	str	r3, [sp, #36]	; 0x24
 8005f14:	e7f4      	b.n	8005f00 <_dtoa_r+0x2e8>
 8005f16:	bf00      	nop
 8005f18:	636f4361 	.word	0x636f4361
 8005f1c:	3fd287a7 	.word	0x3fd287a7
 8005f20:	8b60c8b3 	.word	0x8b60c8b3
 8005f24:	3fc68a28 	.word	0x3fc68a28
 8005f28:	509f79fb 	.word	0x509f79fb
 8005f2c:	3fd34413 	.word	0x3fd34413
 8005f30:	7ff00000 	.word	0x7ff00000
 8005f34:	0800b36d 	.word	0x0800b36d
 8005f38:	0800b364 	.word	0x0800b364
 8005f3c:	0800b341 	.word	0x0800b341
 8005f40:	3ff80000 	.word	0x3ff80000
 8005f44:	0800b3a0 	.word	0x0800b3a0
 8005f48:	0800b378 	.word	0x0800b378
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	9304      	str	r3, [sp, #16]
 8005f50:	4698      	mov	r8, r3
 8005f52:	461a      	mov	r2, r3
 8005f54:	e7da      	b.n	8005f0c <_dtoa_r+0x2f4>
 8005f56:	3101      	adds	r1, #1
 8005f58:	6071      	str	r1, [r6, #4]
 8005f5a:	0052      	lsls	r2, r2, #1
 8005f5c:	e787      	b.n	8005e6e <_dtoa_r+0x256>
 8005f5e:	07f1      	lsls	r1, r6, #31
 8005f60:	d508      	bpl.n	8005f74 <_dtoa_r+0x35c>
 8005f62:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005f66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f6a:	f7fa fb21 	bl	80005b0 <__aeabi_dmul>
 8005f6e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005f72:	3501      	adds	r5, #1
 8005f74:	1076      	asrs	r6, r6, #1
 8005f76:	3708      	adds	r7, #8
 8005f78:	2e00      	cmp	r6, #0
 8005f7a:	d1f0      	bne.n	8005f5e <_dtoa_r+0x346>
 8005f7c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005f80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f84:	f7fa fc3e 	bl	8000804 <__aeabi_ddiv>
 8005f88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f8c:	e01b      	b.n	8005fc6 <_dtoa_r+0x3ae>
 8005f8e:	2502      	movs	r5, #2
 8005f90:	e7a0      	b.n	8005ed4 <_dtoa_r+0x2bc>
 8005f92:	f000 80a4 	beq.w	80060de <_dtoa_r+0x4c6>
 8005f96:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005f9a:	f1ca 0600 	rsb	r6, sl, #0
 8005f9e:	4ba0      	ldr	r3, [pc, #640]	; (8006220 <_dtoa_r+0x608>)
 8005fa0:	f006 020f 	and.w	r2, r6, #15
 8005fa4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fac:	f7fa fb00 	bl	80005b0 <__aeabi_dmul>
 8005fb0:	2502      	movs	r5, #2
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fb8:	4f9a      	ldr	r7, [pc, #616]	; (8006224 <_dtoa_r+0x60c>)
 8005fba:	1136      	asrs	r6, r6, #4
 8005fbc:	2e00      	cmp	r6, #0
 8005fbe:	f040 8083 	bne.w	80060c8 <_dtoa_r+0x4b0>
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1e0      	bne.n	8005f88 <_dtoa_r+0x370>
 8005fc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f000 808a 	beq.w	80060e2 <_dtoa_r+0x4ca>
 8005fce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005fd2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005fd6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005fda:	2200      	movs	r2, #0
 8005fdc:	4b92      	ldr	r3, [pc, #584]	; (8006228 <_dtoa_r+0x610>)
 8005fde:	f7fa fd59 	bl	8000a94 <__aeabi_dcmplt>
 8005fe2:	2800      	cmp	r0, #0
 8005fe4:	d07d      	beq.n	80060e2 <_dtoa_r+0x4ca>
 8005fe6:	f1b8 0f00 	cmp.w	r8, #0
 8005fea:	d07a      	beq.n	80060e2 <_dtoa_r+0x4ca>
 8005fec:	9b04      	ldr	r3, [sp, #16]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	dd36      	ble.n	8006060 <_dtoa_r+0x448>
 8005ff2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	4b8c      	ldr	r3, [pc, #560]	; (800622c <_dtoa_r+0x614>)
 8005ffa:	f7fa fad9 	bl	80005b0 <__aeabi_dmul>
 8005ffe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006002:	9e04      	ldr	r6, [sp, #16]
 8006004:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 8006008:	3501      	adds	r5, #1
 800600a:	4628      	mov	r0, r5
 800600c:	f7fa fa66 	bl	80004dc <__aeabi_i2d>
 8006010:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006014:	f7fa facc 	bl	80005b0 <__aeabi_dmul>
 8006018:	2200      	movs	r2, #0
 800601a:	4b85      	ldr	r3, [pc, #532]	; (8006230 <_dtoa_r+0x618>)
 800601c:	f7fa f912 	bl	8000244 <__adddf3>
 8006020:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8006024:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006028:	950b      	str	r5, [sp, #44]	; 0x2c
 800602a:	2e00      	cmp	r6, #0
 800602c:	d15c      	bne.n	80060e8 <_dtoa_r+0x4d0>
 800602e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006032:	2200      	movs	r2, #0
 8006034:	4b7f      	ldr	r3, [pc, #508]	; (8006234 <_dtoa_r+0x61c>)
 8006036:	f7fa f903 	bl	8000240 <__aeabi_dsub>
 800603a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800603c:	462b      	mov	r3, r5
 800603e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006042:	f7fa fd45 	bl	8000ad0 <__aeabi_dcmpgt>
 8006046:	2800      	cmp	r0, #0
 8006048:	f040 8281 	bne.w	800654e <_dtoa_r+0x936>
 800604c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006050:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006052:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006056:	f7fa fd1d 	bl	8000a94 <__aeabi_dcmplt>
 800605a:	2800      	cmp	r0, #0
 800605c:	f040 8275 	bne.w	800654a <_dtoa_r+0x932>
 8006060:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006064:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006068:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800606a:	2b00      	cmp	r3, #0
 800606c:	f2c0 814b 	blt.w	8006306 <_dtoa_r+0x6ee>
 8006070:	f1ba 0f0e 	cmp.w	sl, #14
 8006074:	f300 8147 	bgt.w	8006306 <_dtoa_r+0x6ee>
 8006078:	4b69      	ldr	r3, [pc, #420]	; (8006220 <_dtoa_r+0x608>)
 800607a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800607e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006082:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006086:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006088:	2b00      	cmp	r3, #0
 800608a:	f280 80d7 	bge.w	800623c <_dtoa_r+0x624>
 800608e:	f1b8 0f00 	cmp.w	r8, #0
 8006092:	f300 80d3 	bgt.w	800623c <_dtoa_r+0x624>
 8006096:	f040 8257 	bne.w	8006548 <_dtoa_r+0x930>
 800609a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800609e:	2200      	movs	r2, #0
 80060a0:	4b64      	ldr	r3, [pc, #400]	; (8006234 <_dtoa_r+0x61c>)
 80060a2:	f7fa fa85 	bl	80005b0 <__aeabi_dmul>
 80060a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80060aa:	f7fa fd07 	bl	8000abc <__aeabi_dcmpge>
 80060ae:	4646      	mov	r6, r8
 80060b0:	4647      	mov	r7, r8
 80060b2:	2800      	cmp	r0, #0
 80060b4:	f040 822d 	bne.w	8006512 <_dtoa_r+0x8fa>
 80060b8:	9b06      	ldr	r3, [sp, #24]
 80060ba:	9a06      	ldr	r2, [sp, #24]
 80060bc:	1c5d      	adds	r5, r3, #1
 80060be:	2331      	movs	r3, #49	; 0x31
 80060c0:	f10a 0a01 	add.w	sl, sl, #1
 80060c4:	7013      	strb	r3, [r2, #0]
 80060c6:	e228      	b.n	800651a <_dtoa_r+0x902>
 80060c8:	07f2      	lsls	r2, r6, #31
 80060ca:	d505      	bpl.n	80060d8 <_dtoa_r+0x4c0>
 80060cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060d0:	f7fa fa6e 	bl	80005b0 <__aeabi_dmul>
 80060d4:	2301      	movs	r3, #1
 80060d6:	3501      	adds	r5, #1
 80060d8:	1076      	asrs	r6, r6, #1
 80060da:	3708      	adds	r7, #8
 80060dc:	e76e      	b.n	8005fbc <_dtoa_r+0x3a4>
 80060de:	2502      	movs	r5, #2
 80060e0:	e771      	b.n	8005fc6 <_dtoa_r+0x3ae>
 80060e2:	4657      	mov	r7, sl
 80060e4:	4646      	mov	r6, r8
 80060e6:	e790      	b.n	800600a <_dtoa_r+0x3f2>
 80060e8:	4b4d      	ldr	r3, [pc, #308]	; (8006220 <_dtoa_r+0x608>)
 80060ea:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80060ee:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80060f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d048      	beq.n	800618a <_dtoa_r+0x572>
 80060f8:	4602      	mov	r2, r0
 80060fa:	460b      	mov	r3, r1
 80060fc:	2000      	movs	r0, #0
 80060fe:	494e      	ldr	r1, [pc, #312]	; (8006238 <_dtoa_r+0x620>)
 8006100:	f7fa fb80 	bl	8000804 <__aeabi_ddiv>
 8006104:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006108:	f7fa f89a 	bl	8000240 <__aeabi_dsub>
 800610c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006110:	9d06      	ldr	r5, [sp, #24]
 8006112:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006116:	f7fa fcfb 	bl	8000b10 <__aeabi_d2iz>
 800611a:	9011      	str	r0, [sp, #68]	; 0x44
 800611c:	f7fa f9de 	bl	80004dc <__aeabi_i2d>
 8006120:	4602      	mov	r2, r0
 8006122:	460b      	mov	r3, r1
 8006124:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006128:	f7fa f88a 	bl	8000240 <__aeabi_dsub>
 800612c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800612e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006132:	3330      	adds	r3, #48	; 0x30
 8006134:	f805 3b01 	strb.w	r3, [r5], #1
 8006138:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800613c:	f7fa fcaa 	bl	8000a94 <__aeabi_dcmplt>
 8006140:	2800      	cmp	r0, #0
 8006142:	d163      	bne.n	800620c <_dtoa_r+0x5f4>
 8006144:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006148:	2000      	movs	r0, #0
 800614a:	4937      	ldr	r1, [pc, #220]	; (8006228 <_dtoa_r+0x610>)
 800614c:	f7fa f878 	bl	8000240 <__aeabi_dsub>
 8006150:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006154:	f7fa fc9e 	bl	8000a94 <__aeabi_dcmplt>
 8006158:	2800      	cmp	r0, #0
 800615a:	f040 80b5 	bne.w	80062c8 <_dtoa_r+0x6b0>
 800615e:	9b06      	ldr	r3, [sp, #24]
 8006160:	1aeb      	subs	r3, r5, r3
 8006162:	429e      	cmp	r6, r3
 8006164:	f77f af7c 	ble.w	8006060 <_dtoa_r+0x448>
 8006168:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800616c:	2200      	movs	r2, #0
 800616e:	4b2f      	ldr	r3, [pc, #188]	; (800622c <_dtoa_r+0x614>)
 8006170:	f7fa fa1e 	bl	80005b0 <__aeabi_dmul>
 8006174:	2200      	movs	r2, #0
 8006176:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800617a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800617e:	4b2b      	ldr	r3, [pc, #172]	; (800622c <_dtoa_r+0x614>)
 8006180:	f7fa fa16 	bl	80005b0 <__aeabi_dmul>
 8006184:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006188:	e7c3      	b.n	8006112 <_dtoa_r+0x4fa>
 800618a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800618e:	f7fa fa0f 	bl	80005b0 <__aeabi_dmul>
 8006192:	9b06      	ldr	r3, [sp, #24]
 8006194:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006198:	199d      	adds	r5, r3, r6
 800619a:	461e      	mov	r6, r3
 800619c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061a0:	f7fa fcb6 	bl	8000b10 <__aeabi_d2iz>
 80061a4:	9011      	str	r0, [sp, #68]	; 0x44
 80061a6:	f7fa f999 	bl	80004dc <__aeabi_i2d>
 80061aa:	4602      	mov	r2, r0
 80061ac:	460b      	mov	r3, r1
 80061ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061b2:	f7fa f845 	bl	8000240 <__aeabi_dsub>
 80061b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80061b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061bc:	3330      	adds	r3, #48	; 0x30
 80061be:	f806 3b01 	strb.w	r3, [r6], #1
 80061c2:	42ae      	cmp	r6, r5
 80061c4:	f04f 0200 	mov.w	r2, #0
 80061c8:	d124      	bne.n	8006214 <_dtoa_r+0x5fc>
 80061ca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80061ce:	4b1a      	ldr	r3, [pc, #104]	; (8006238 <_dtoa_r+0x620>)
 80061d0:	f7fa f838 	bl	8000244 <__adddf3>
 80061d4:	4602      	mov	r2, r0
 80061d6:	460b      	mov	r3, r1
 80061d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061dc:	f7fa fc78 	bl	8000ad0 <__aeabi_dcmpgt>
 80061e0:	2800      	cmp	r0, #0
 80061e2:	d171      	bne.n	80062c8 <_dtoa_r+0x6b0>
 80061e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80061e8:	2000      	movs	r0, #0
 80061ea:	4913      	ldr	r1, [pc, #76]	; (8006238 <_dtoa_r+0x620>)
 80061ec:	f7fa f828 	bl	8000240 <__aeabi_dsub>
 80061f0:	4602      	mov	r2, r0
 80061f2:	460b      	mov	r3, r1
 80061f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061f8:	f7fa fc4c 	bl	8000a94 <__aeabi_dcmplt>
 80061fc:	2800      	cmp	r0, #0
 80061fe:	f43f af2f 	beq.w	8006060 <_dtoa_r+0x448>
 8006202:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006206:	1e6a      	subs	r2, r5, #1
 8006208:	2b30      	cmp	r3, #48	; 0x30
 800620a:	d001      	beq.n	8006210 <_dtoa_r+0x5f8>
 800620c:	46ba      	mov	sl, r7
 800620e:	e04a      	b.n	80062a6 <_dtoa_r+0x68e>
 8006210:	4615      	mov	r5, r2
 8006212:	e7f6      	b.n	8006202 <_dtoa_r+0x5ea>
 8006214:	4b05      	ldr	r3, [pc, #20]	; (800622c <_dtoa_r+0x614>)
 8006216:	f7fa f9cb 	bl	80005b0 <__aeabi_dmul>
 800621a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800621e:	e7bd      	b.n	800619c <_dtoa_r+0x584>
 8006220:	0800b3a0 	.word	0x0800b3a0
 8006224:	0800b378 	.word	0x0800b378
 8006228:	3ff00000 	.word	0x3ff00000
 800622c:	40240000 	.word	0x40240000
 8006230:	401c0000 	.word	0x401c0000
 8006234:	40140000 	.word	0x40140000
 8006238:	3fe00000 	.word	0x3fe00000
 800623c:	9d06      	ldr	r5, [sp, #24]
 800623e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006242:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006246:	4630      	mov	r0, r6
 8006248:	4639      	mov	r1, r7
 800624a:	f7fa fadb 	bl	8000804 <__aeabi_ddiv>
 800624e:	f7fa fc5f 	bl	8000b10 <__aeabi_d2iz>
 8006252:	4681      	mov	r9, r0
 8006254:	f7fa f942 	bl	80004dc <__aeabi_i2d>
 8006258:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800625c:	f7fa f9a8 	bl	80005b0 <__aeabi_dmul>
 8006260:	4602      	mov	r2, r0
 8006262:	460b      	mov	r3, r1
 8006264:	4630      	mov	r0, r6
 8006266:	4639      	mov	r1, r7
 8006268:	f7f9 ffea 	bl	8000240 <__aeabi_dsub>
 800626c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8006270:	f805 6b01 	strb.w	r6, [r5], #1
 8006274:	9e06      	ldr	r6, [sp, #24]
 8006276:	4602      	mov	r2, r0
 8006278:	1bae      	subs	r6, r5, r6
 800627a:	45b0      	cmp	r8, r6
 800627c:	460b      	mov	r3, r1
 800627e:	d135      	bne.n	80062ec <_dtoa_r+0x6d4>
 8006280:	f7f9 ffe0 	bl	8000244 <__adddf3>
 8006284:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006288:	4606      	mov	r6, r0
 800628a:	460f      	mov	r7, r1
 800628c:	f7fa fc20 	bl	8000ad0 <__aeabi_dcmpgt>
 8006290:	b9c8      	cbnz	r0, 80062c6 <_dtoa_r+0x6ae>
 8006292:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006296:	4630      	mov	r0, r6
 8006298:	4639      	mov	r1, r7
 800629a:	f7fa fbf1 	bl	8000a80 <__aeabi_dcmpeq>
 800629e:	b110      	cbz	r0, 80062a6 <_dtoa_r+0x68e>
 80062a0:	f019 0f01 	tst.w	r9, #1
 80062a4:	d10f      	bne.n	80062c6 <_dtoa_r+0x6ae>
 80062a6:	4659      	mov	r1, fp
 80062a8:	4620      	mov	r0, r4
 80062aa:	f000 facc 	bl	8006846 <_Bfree>
 80062ae:	2300      	movs	r3, #0
 80062b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80062b2:	702b      	strb	r3, [r5, #0]
 80062b4:	f10a 0301 	add.w	r3, sl, #1
 80062b8:	6013      	str	r3, [r2, #0]
 80062ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80062bc:	2b00      	cmp	r3, #0
 80062be:	f43f acf3 	beq.w	8005ca8 <_dtoa_r+0x90>
 80062c2:	601d      	str	r5, [r3, #0]
 80062c4:	e4f0      	b.n	8005ca8 <_dtoa_r+0x90>
 80062c6:	4657      	mov	r7, sl
 80062c8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80062cc:	1e6b      	subs	r3, r5, #1
 80062ce:	2a39      	cmp	r2, #57	; 0x39
 80062d0:	d106      	bne.n	80062e0 <_dtoa_r+0x6c8>
 80062d2:	9a06      	ldr	r2, [sp, #24]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d107      	bne.n	80062e8 <_dtoa_r+0x6d0>
 80062d8:	2330      	movs	r3, #48	; 0x30
 80062da:	7013      	strb	r3, [r2, #0]
 80062dc:	4613      	mov	r3, r2
 80062de:	3701      	adds	r7, #1
 80062e0:	781a      	ldrb	r2, [r3, #0]
 80062e2:	3201      	adds	r2, #1
 80062e4:	701a      	strb	r2, [r3, #0]
 80062e6:	e791      	b.n	800620c <_dtoa_r+0x5f4>
 80062e8:	461d      	mov	r5, r3
 80062ea:	e7ed      	b.n	80062c8 <_dtoa_r+0x6b0>
 80062ec:	2200      	movs	r2, #0
 80062ee:	4b99      	ldr	r3, [pc, #612]	; (8006554 <_dtoa_r+0x93c>)
 80062f0:	f7fa f95e 	bl	80005b0 <__aeabi_dmul>
 80062f4:	2200      	movs	r2, #0
 80062f6:	2300      	movs	r3, #0
 80062f8:	4606      	mov	r6, r0
 80062fa:	460f      	mov	r7, r1
 80062fc:	f7fa fbc0 	bl	8000a80 <__aeabi_dcmpeq>
 8006300:	2800      	cmp	r0, #0
 8006302:	d09e      	beq.n	8006242 <_dtoa_r+0x62a>
 8006304:	e7cf      	b.n	80062a6 <_dtoa_r+0x68e>
 8006306:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006308:	2a00      	cmp	r2, #0
 800630a:	f000 8088 	beq.w	800641e <_dtoa_r+0x806>
 800630e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006310:	2a01      	cmp	r2, #1
 8006312:	dc6d      	bgt.n	80063f0 <_dtoa_r+0x7d8>
 8006314:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006316:	2a00      	cmp	r2, #0
 8006318:	d066      	beq.n	80063e8 <_dtoa_r+0x7d0>
 800631a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800631e:	464d      	mov	r5, r9
 8006320:	9e08      	ldr	r6, [sp, #32]
 8006322:	9a07      	ldr	r2, [sp, #28]
 8006324:	2101      	movs	r1, #1
 8006326:	441a      	add	r2, r3
 8006328:	4620      	mov	r0, r4
 800632a:	4499      	add	r9, r3
 800632c:	9207      	str	r2, [sp, #28]
 800632e:	f000 fb2a 	bl	8006986 <__i2b>
 8006332:	4607      	mov	r7, r0
 8006334:	2d00      	cmp	r5, #0
 8006336:	dd0b      	ble.n	8006350 <_dtoa_r+0x738>
 8006338:	9b07      	ldr	r3, [sp, #28]
 800633a:	2b00      	cmp	r3, #0
 800633c:	dd08      	ble.n	8006350 <_dtoa_r+0x738>
 800633e:	42ab      	cmp	r3, r5
 8006340:	bfa8      	it	ge
 8006342:	462b      	movge	r3, r5
 8006344:	9a07      	ldr	r2, [sp, #28]
 8006346:	eba9 0903 	sub.w	r9, r9, r3
 800634a:	1aed      	subs	r5, r5, r3
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	9307      	str	r3, [sp, #28]
 8006350:	9b08      	ldr	r3, [sp, #32]
 8006352:	b1eb      	cbz	r3, 8006390 <_dtoa_r+0x778>
 8006354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006356:	2b00      	cmp	r3, #0
 8006358:	d065      	beq.n	8006426 <_dtoa_r+0x80e>
 800635a:	b18e      	cbz	r6, 8006380 <_dtoa_r+0x768>
 800635c:	4639      	mov	r1, r7
 800635e:	4632      	mov	r2, r6
 8006360:	4620      	mov	r0, r4
 8006362:	f000 fbaf 	bl	8006ac4 <__pow5mult>
 8006366:	465a      	mov	r2, fp
 8006368:	4601      	mov	r1, r0
 800636a:	4607      	mov	r7, r0
 800636c:	4620      	mov	r0, r4
 800636e:	f000 fb13 	bl	8006998 <__multiply>
 8006372:	4659      	mov	r1, fp
 8006374:	900a      	str	r0, [sp, #40]	; 0x28
 8006376:	4620      	mov	r0, r4
 8006378:	f000 fa65 	bl	8006846 <_Bfree>
 800637c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800637e:	469b      	mov	fp, r3
 8006380:	9b08      	ldr	r3, [sp, #32]
 8006382:	1b9a      	subs	r2, r3, r6
 8006384:	d004      	beq.n	8006390 <_dtoa_r+0x778>
 8006386:	4659      	mov	r1, fp
 8006388:	4620      	mov	r0, r4
 800638a:	f000 fb9b 	bl	8006ac4 <__pow5mult>
 800638e:	4683      	mov	fp, r0
 8006390:	2101      	movs	r1, #1
 8006392:	4620      	mov	r0, r4
 8006394:	f000 faf7 	bl	8006986 <__i2b>
 8006398:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800639a:	4606      	mov	r6, r0
 800639c:	2b00      	cmp	r3, #0
 800639e:	f000 81c6 	beq.w	800672e <_dtoa_r+0xb16>
 80063a2:	461a      	mov	r2, r3
 80063a4:	4601      	mov	r1, r0
 80063a6:	4620      	mov	r0, r4
 80063a8:	f000 fb8c 	bl	8006ac4 <__pow5mult>
 80063ac:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80063ae:	4606      	mov	r6, r0
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	dc3e      	bgt.n	8006432 <_dtoa_r+0x81a>
 80063b4:	9b02      	ldr	r3, [sp, #8]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d137      	bne.n	800642a <_dtoa_r+0x812>
 80063ba:	9b03      	ldr	r3, [sp, #12]
 80063bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d134      	bne.n	800642e <_dtoa_r+0x816>
 80063c4:	9b03      	ldr	r3, [sp, #12]
 80063c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063ca:	0d1b      	lsrs	r3, r3, #20
 80063cc:	051b      	lsls	r3, r3, #20
 80063ce:	b12b      	cbz	r3, 80063dc <_dtoa_r+0x7c4>
 80063d0:	9b07      	ldr	r3, [sp, #28]
 80063d2:	f109 0901 	add.w	r9, r9, #1
 80063d6:	3301      	adds	r3, #1
 80063d8:	9307      	str	r3, [sp, #28]
 80063da:	2301      	movs	r3, #1
 80063dc:	9308      	str	r3, [sp, #32]
 80063de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d128      	bne.n	8006436 <_dtoa_r+0x81e>
 80063e4:	2001      	movs	r0, #1
 80063e6:	e02e      	b.n	8006446 <_dtoa_r+0x82e>
 80063e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80063ea:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80063ee:	e796      	b.n	800631e <_dtoa_r+0x706>
 80063f0:	9b08      	ldr	r3, [sp, #32]
 80063f2:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 80063f6:	42b3      	cmp	r3, r6
 80063f8:	bfb7      	itett	lt
 80063fa:	9b08      	ldrlt	r3, [sp, #32]
 80063fc:	1b9e      	subge	r6, r3, r6
 80063fe:	1af2      	sublt	r2, r6, r3
 8006400:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8006402:	bfbf      	itttt	lt
 8006404:	9608      	strlt	r6, [sp, #32]
 8006406:	189b      	addlt	r3, r3, r2
 8006408:	930c      	strlt	r3, [sp, #48]	; 0x30
 800640a:	2600      	movlt	r6, #0
 800640c:	f1b8 0f00 	cmp.w	r8, #0
 8006410:	bfb9      	ittee	lt
 8006412:	eba9 0508 	sublt.w	r5, r9, r8
 8006416:	2300      	movlt	r3, #0
 8006418:	464d      	movge	r5, r9
 800641a:	4643      	movge	r3, r8
 800641c:	e781      	b.n	8006322 <_dtoa_r+0x70a>
 800641e:	9e08      	ldr	r6, [sp, #32]
 8006420:	464d      	mov	r5, r9
 8006422:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006424:	e786      	b.n	8006334 <_dtoa_r+0x71c>
 8006426:	9a08      	ldr	r2, [sp, #32]
 8006428:	e7ad      	b.n	8006386 <_dtoa_r+0x76e>
 800642a:	2300      	movs	r3, #0
 800642c:	e7d6      	b.n	80063dc <_dtoa_r+0x7c4>
 800642e:	9b02      	ldr	r3, [sp, #8]
 8006430:	e7d4      	b.n	80063dc <_dtoa_r+0x7c4>
 8006432:	2300      	movs	r3, #0
 8006434:	9308      	str	r3, [sp, #32]
 8006436:	6933      	ldr	r3, [r6, #16]
 8006438:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800643c:	6918      	ldr	r0, [r3, #16]
 800643e:	f000 fa54 	bl	80068ea <__hi0bits>
 8006442:	f1c0 0020 	rsb	r0, r0, #32
 8006446:	9b07      	ldr	r3, [sp, #28]
 8006448:	4418      	add	r0, r3
 800644a:	f010 001f 	ands.w	r0, r0, #31
 800644e:	d047      	beq.n	80064e0 <_dtoa_r+0x8c8>
 8006450:	f1c0 0320 	rsb	r3, r0, #32
 8006454:	2b04      	cmp	r3, #4
 8006456:	dd3b      	ble.n	80064d0 <_dtoa_r+0x8b8>
 8006458:	9b07      	ldr	r3, [sp, #28]
 800645a:	f1c0 001c 	rsb	r0, r0, #28
 800645e:	4481      	add	r9, r0
 8006460:	4405      	add	r5, r0
 8006462:	4403      	add	r3, r0
 8006464:	9307      	str	r3, [sp, #28]
 8006466:	f1b9 0f00 	cmp.w	r9, #0
 800646a:	dd05      	ble.n	8006478 <_dtoa_r+0x860>
 800646c:	4659      	mov	r1, fp
 800646e:	464a      	mov	r2, r9
 8006470:	4620      	mov	r0, r4
 8006472:	f000 fb75 	bl	8006b60 <__lshift>
 8006476:	4683      	mov	fp, r0
 8006478:	9b07      	ldr	r3, [sp, #28]
 800647a:	2b00      	cmp	r3, #0
 800647c:	dd05      	ble.n	800648a <_dtoa_r+0x872>
 800647e:	4631      	mov	r1, r6
 8006480:	461a      	mov	r2, r3
 8006482:	4620      	mov	r0, r4
 8006484:	f000 fb6c 	bl	8006b60 <__lshift>
 8006488:	4606      	mov	r6, r0
 800648a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800648c:	b353      	cbz	r3, 80064e4 <_dtoa_r+0x8cc>
 800648e:	4631      	mov	r1, r6
 8006490:	4658      	mov	r0, fp
 8006492:	f000 fbb9 	bl	8006c08 <__mcmp>
 8006496:	2800      	cmp	r0, #0
 8006498:	da24      	bge.n	80064e4 <_dtoa_r+0x8cc>
 800649a:	2300      	movs	r3, #0
 800649c:	4659      	mov	r1, fp
 800649e:	220a      	movs	r2, #10
 80064a0:	4620      	mov	r0, r4
 80064a2:	f000 f9e7 	bl	8006874 <__multadd>
 80064a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064a8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80064ac:	4683      	mov	fp, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	f000 8144 	beq.w	800673c <_dtoa_r+0xb24>
 80064b4:	2300      	movs	r3, #0
 80064b6:	4639      	mov	r1, r7
 80064b8:	220a      	movs	r2, #10
 80064ba:	4620      	mov	r0, r4
 80064bc:	f000 f9da 	bl	8006874 <__multadd>
 80064c0:	9b04      	ldr	r3, [sp, #16]
 80064c2:	4607      	mov	r7, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	dc4d      	bgt.n	8006564 <_dtoa_r+0x94c>
 80064c8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80064ca:	2b02      	cmp	r3, #2
 80064cc:	dd4a      	ble.n	8006564 <_dtoa_r+0x94c>
 80064ce:	e011      	b.n	80064f4 <_dtoa_r+0x8dc>
 80064d0:	d0c9      	beq.n	8006466 <_dtoa_r+0x84e>
 80064d2:	9a07      	ldr	r2, [sp, #28]
 80064d4:	331c      	adds	r3, #28
 80064d6:	441a      	add	r2, r3
 80064d8:	4499      	add	r9, r3
 80064da:	441d      	add	r5, r3
 80064dc:	4613      	mov	r3, r2
 80064de:	e7c1      	b.n	8006464 <_dtoa_r+0x84c>
 80064e0:	4603      	mov	r3, r0
 80064e2:	e7f6      	b.n	80064d2 <_dtoa_r+0x8ba>
 80064e4:	f1b8 0f00 	cmp.w	r8, #0
 80064e8:	dc36      	bgt.n	8006558 <_dtoa_r+0x940>
 80064ea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80064ec:	2b02      	cmp	r3, #2
 80064ee:	dd33      	ble.n	8006558 <_dtoa_r+0x940>
 80064f0:	f8cd 8010 	str.w	r8, [sp, #16]
 80064f4:	9b04      	ldr	r3, [sp, #16]
 80064f6:	b963      	cbnz	r3, 8006512 <_dtoa_r+0x8fa>
 80064f8:	4631      	mov	r1, r6
 80064fa:	2205      	movs	r2, #5
 80064fc:	4620      	mov	r0, r4
 80064fe:	f000 f9b9 	bl	8006874 <__multadd>
 8006502:	4601      	mov	r1, r0
 8006504:	4606      	mov	r6, r0
 8006506:	4658      	mov	r0, fp
 8006508:	f000 fb7e 	bl	8006c08 <__mcmp>
 800650c:	2800      	cmp	r0, #0
 800650e:	f73f add3 	bgt.w	80060b8 <_dtoa_r+0x4a0>
 8006512:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006514:	9d06      	ldr	r5, [sp, #24]
 8006516:	ea6f 0a03 	mvn.w	sl, r3
 800651a:	f04f 0900 	mov.w	r9, #0
 800651e:	4631      	mov	r1, r6
 8006520:	4620      	mov	r0, r4
 8006522:	f000 f990 	bl	8006846 <_Bfree>
 8006526:	2f00      	cmp	r7, #0
 8006528:	f43f aebd 	beq.w	80062a6 <_dtoa_r+0x68e>
 800652c:	f1b9 0f00 	cmp.w	r9, #0
 8006530:	d005      	beq.n	800653e <_dtoa_r+0x926>
 8006532:	45b9      	cmp	r9, r7
 8006534:	d003      	beq.n	800653e <_dtoa_r+0x926>
 8006536:	4649      	mov	r1, r9
 8006538:	4620      	mov	r0, r4
 800653a:	f000 f984 	bl	8006846 <_Bfree>
 800653e:	4639      	mov	r1, r7
 8006540:	4620      	mov	r0, r4
 8006542:	f000 f980 	bl	8006846 <_Bfree>
 8006546:	e6ae      	b.n	80062a6 <_dtoa_r+0x68e>
 8006548:	2600      	movs	r6, #0
 800654a:	4637      	mov	r7, r6
 800654c:	e7e1      	b.n	8006512 <_dtoa_r+0x8fa>
 800654e:	46ba      	mov	sl, r7
 8006550:	4637      	mov	r7, r6
 8006552:	e5b1      	b.n	80060b8 <_dtoa_r+0x4a0>
 8006554:	40240000 	.word	0x40240000
 8006558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800655a:	f8cd 8010 	str.w	r8, [sp, #16]
 800655e:	2b00      	cmp	r3, #0
 8006560:	f000 80f3 	beq.w	800674a <_dtoa_r+0xb32>
 8006564:	2d00      	cmp	r5, #0
 8006566:	dd05      	ble.n	8006574 <_dtoa_r+0x95c>
 8006568:	4639      	mov	r1, r7
 800656a:	462a      	mov	r2, r5
 800656c:	4620      	mov	r0, r4
 800656e:	f000 faf7 	bl	8006b60 <__lshift>
 8006572:	4607      	mov	r7, r0
 8006574:	9b08      	ldr	r3, [sp, #32]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d04c      	beq.n	8006614 <_dtoa_r+0x9fc>
 800657a:	6879      	ldr	r1, [r7, #4]
 800657c:	4620      	mov	r0, r4
 800657e:	f000 f92e 	bl	80067de <_Balloc>
 8006582:	4605      	mov	r5, r0
 8006584:	693a      	ldr	r2, [r7, #16]
 8006586:	f107 010c 	add.w	r1, r7, #12
 800658a:	3202      	adds	r2, #2
 800658c:	0092      	lsls	r2, r2, #2
 800658e:	300c      	adds	r0, #12
 8006590:	f000 f91a 	bl	80067c8 <memcpy>
 8006594:	2201      	movs	r2, #1
 8006596:	4629      	mov	r1, r5
 8006598:	4620      	mov	r0, r4
 800659a:	f000 fae1 	bl	8006b60 <__lshift>
 800659e:	46b9      	mov	r9, r7
 80065a0:	4607      	mov	r7, r0
 80065a2:	9b06      	ldr	r3, [sp, #24]
 80065a4:	9307      	str	r3, [sp, #28]
 80065a6:	9b02      	ldr	r3, [sp, #8]
 80065a8:	f003 0301 	and.w	r3, r3, #1
 80065ac:	9308      	str	r3, [sp, #32]
 80065ae:	4631      	mov	r1, r6
 80065b0:	4658      	mov	r0, fp
 80065b2:	f7ff faa1 	bl	8005af8 <quorem>
 80065b6:	4649      	mov	r1, r9
 80065b8:	4605      	mov	r5, r0
 80065ba:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80065be:	4658      	mov	r0, fp
 80065c0:	f000 fb22 	bl	8006c08 <__mcmp>
 80065c4:	463a      	mov	r2, r7
 80065c6:	9002      	str	r0, [sp, #8]
 80065c8:	4631      	mov	r1, r6
 80065ca:	4620      	mov	r0, r4
 80065cc:	f000 fb36 	bl	8006c3c <__mdiff>
 80065d0:	68c3      	ldr	r3, [r0, #12]
 80065d2:	4602      	mov	r2, r0
 80065d4:	bb03      	cbnz	r3, 8006618 <_dtoa_r+0xa00>
 80065d6:	4601      	mov	r1, r0
 80065d8:	9009      	str	r0, [sp, #36]	; 0x24
 80065da:	4658      	mov	r0, fp
 80065dc:	f000 fb14 	bl	8006c08 <__mcmp>
 80065e0:	4603      	mov	r3, r0
 80065e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065e4:	4611      	mov	r1, r2
 80065e6:	4620      	mov	r0, r4
 80065e8:	9309      	str	r3, [sp, #36]	; 0x24
 80065ea:	f000 f92c 	bl	8006846 <_Bfree>
 80065ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065f0:	b9a3      	cbnz	r3, 800661c <_dtoa_r+0xa04>
 80065f2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80065f4:	b992      	cbnz	r2, 800661c <_dtoa_r+0xa04>
 80065f6:	9a08      	ldr	r2, [sp, #32]
 80065f8:	b982      	cbnz	r2, 800661c <_dtoa_r+0xa04>
 80065fa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80065fe:	d029      	beq.n	8006654 <_dtoa_r+0xa3c>
 8006600:	9b02      	ldr	r3, [sp, #8]
 8006602:	2b00      	cmp	r3, #0
 8006604:	dd01      	ble.n	800660a <_dtoa_r+0x9f2>
 8006606:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800660a:	9b07      	ldr	r3, [sp, #28]
 800660c:	1c5d      	adds	r5, r3, #1
 800660e:	f883 8000 	strb.w	r8, [r3]
 8006612:	e784      	b.n	800651e <_dtoa_r+0x906>
 8006614:	4638      	mov	r0, r7
 8006616:	e7c2      	b.n	800659e <_dtoa_r+0x986>
 8006618:	2301      	movs	r3, #1
 800661a:	e7e3      	b.n	80065e4 <_dtoa_r+0x9cc>
 800661c:	9a02      	ldr	r2, [sp, #8]
 800661e:	2a00      	cmp	r2, #0
 8006620:	db04      	blt.n	800662c <_dtoa_r+0xa14>
 8006622:	d123      	bne.n	800666c <_dtoa_r+0xa54>
 8006624:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006626:	bb0a      	cbnz	r2, 800666c <_dtoa_r+0xa54>
 8006628:	9a08      	ldr	r2, [sp, #32]
 800662a:	b9fa      	cbnz	r2, 800666c <_dtoa_r+0xa54>
 800662c:	2b00      	cmp	r3, #0
 800662e:	ddec      	ble.n	800660a <_dtoa_r+0x9f2>
 8006630:	4659      	mov	r1, fp
 8006632:	2201      	movs	r2, #1
 8006634:	4620      	mov	r0, r4
 8006636:	f000 fa93 	bl	8006b60 <__lshift>
 800663a:	4631      	mov	r1, r6
 800663c:	4683      	mov	fp, r0
 800663e:	f000 fae3 	bl	8006c08 <__mcmp>
 8006642:	2800      	cmp	r0, #0
 8006644:	dc03      	bgt.n	800664e <_dtoa_r+0xa36>
 8006646:	d1e0      	bne.n	800660a <_dtoa_r+0x9f2>
 8006648:	f018 0f01 	tst.w	r8, #1
 800664c:	d0dd      	beq.n	800660a <_dtoa_r+0x9f2>
 800664e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006652:	d1d8      	bne.n	8006606 <_dtoa_r+0x9ee>
 8006654:	9b07      	ldr	r3, [sp, #28]
 8006656:	9a07      	ldr	r2, [sp, #28]
 8006658:	1c5d      	adds	r5, r3, #1
 800665a:	2339      	movs	r3, #57	; 0x39
 800665c:	7013      	strb	r3, [r2, #0]
 800665e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006662:	1e6a      	subs	r2, r5, #1
 8006664:	2b39      	cmp	r3, #57	; 0x39
 8006666:	d04d      	beq.n	8006704 <_dtoa_r+0xaec>
 8006668:	3301      	adds	r3, #1
 800666a:	e052      	b.n	8006712 <_dtoa_r+0xafa>
 800666c:	9a07      	ldr	r2, [sp, #28]
 800666e:	2b00      	cmp	r3, #0
 8006670:	f102 0501 	add.w	r5, r2, #1
 8006674:	dd06      	ble.n	8006684 <_dtoa_r+0xa6c>
 8006676:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800667a:	d0eb      	beq.n	8006654 <_dtoa_r+0xa3c>
 800667c:	f108 0801 	add.w	r8, r8, #1
 8006680:	9b07      	ldr	r3, [sp, #28]
 8006682:	e7c4      	b.n	800660e <_dtoa_r+0x9f6>
 8006684:	9b06      	ldr	r3, [sp, #24]
 8006686:	9a04      	ldr	r2, [sp, #16]
 8006688:	1aeb      	subs	r3, r5, r3
 800668a:	4293      	cmp	r3, r2
 800668c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006690:	d021      	beq.n	80066d6 <_dtoa_r+0xabe>
 8006692:	4659      	mov	r1, fp
 8006694:	2300      	movs	r3, #0
 8006696:	220a      	movs	r2, #10
 8006698:	4620      	mov	r0, r4
 800669a:	f000 f8eb 	bl	8006874 <__multadd>
 800669e:	45b9      	cmp	r9, r7
 80066a0:	4683      	mov	fp, r0
 80066a2:	f04f 0300 	mov.w	r3, #0
 80066a6:	f04f 020a 	mov.w	r2, #10
 80066aa:	4649      	mov	r1, r9
 80066ac:	4620      	mov	r0, r4
 80066ae:	d105      	bne.n	80066bc <_dtoa_r+0xaa4>
 80066b0:	f000 f8e0 	bl	8006874 <__multadd>
 80066b4:	4681      	mov	r9, r0
 80066b6:	4607      	mov	r7, r0
 80066b8:	9507      	str	r5, [sp, #28]
 80066ba:	e778      	b.n	80065ae <_dtoa_r+0x996>
 80066bc:	f000 f8da 	bl	8006874 <__multadd>
 80066c0:	4639      	mov	r1, r7
 80066c2:	4681      	mov	r9, r0
 80066c4:	2300      	movs	r3, #0
 80066c6:	220a      	movs	r2, #10
 80066c8:	4620      	mov	r0, r4
 80066ca:	f000 f8d3 	bl	8006874 <__multadd>
 80066ce:	4607      	mov	r7, r0
 80066d0:	e7f2      	b.n	80066b8 <_dtoa_r+0xaa0>
 80066d2:	f04f 0900 	mov.w	r9, #0
 80066d6:	4659      	mov	r1, fp
 80066d8:	2201      	movs	r2, #1
 80066da:	4620      	mov	r0, r4
 80066dc:	f000 fa40 	bl	8006b60 <__lshift>
 80066e0:	4631      	mov	r1, r6
 80066e2:	4683      	mov	fp, r0
 80066e4:	f000 fa90 	bl	8006c08 <__mcmp>
 80066e8:	2800      	cmp	r0, #0
 80066ea:	dcb8      	bgt.n	800665e <_dtoa_r+0xa46>
 80066ec:	d102      	bne.n	80066f4 <_dtoa_r+0xadc>
 80066ee:	f018 0f01 	tst.w	r8, #1
 80066f2:	d1b4      	bne.n	800665e <_dtoa_r+0xa46>
 80066f4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80066f8:	1e6a      	subs	r2, r5, #1
 80066fa:	2b30      	cmp	r3, #48	; 0x30
 80066fc:	f47f af0f 	bne.w	800651e <_dtoa_r+0x906>
 8006700:	4615      	mov	r5, r2
 8006702:	e7f7      	b.n	80066f4 <_dtoa_r+0xadc>
 8006704:	9b06      	ldr	r3, [sp, #24]
 8006706:	4293      	cmp	r3, r2
 8006708:	d105      	bne.n	8006716 <_dtoa_r+0xafe>
 800670a:	2331      	movs	r3, #49	; 0x31
 800670c:	9a06      	ldr	r2, [sp, #24]
 800670e:	f10a 0a01 	add.w	sl, sl, #1
 8006712:	7013      	strb	r3, [r2, #0]
 8006714:	e703      	b.n	800651e <_dtoa_r+0x906>
 8006716:	4615      	mov	r5, r2
 8006718:	e7a1      	b.n	800665e <_dtoa_r+0xa46>
 800671a:	4b17      	ldr	r3, [pc, #92]	; (8006778 <_dtoa_r+0xb60>)
 800671c:	f7ff bae1 	b.w	8005ce2 <_dtoa_r+0xca>
 8006720:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006722:	2b00      	cmp	r3, #0
 8006724:	f47f aabb 	bne.w	8005c9e <_dtoa_r+0x86>
 8006728:	4b14      	ldr	r3, [pc, #80]	; (800677c <_dtoa_r+0xb64>)
 800672a:	f7ff bada 	b.w	8005ce2 <_dtoa_r+0xca>
 800672e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006730:	2b01      	cmp	r3, #1
 8006732:	f77f ae3f 	ble.w	80063b4 <_dtoa_r+0x79c>
 8006736:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006738:	9308      	str	r3, [sp, #32]
 800673a:	e653      	b.n	80063e4 <_dtoa_r+0x7cc>
 800673c:	9b04      	ldr	r3, [sp, #16]
 800673e:	2b00      	cmp	r3, #0
 8006740:	dc03      	bgt.n	800674a <_dtoa_r+0xb32>
 8006742:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006744:	2b02      	cmp	r3, #2
 8006746:	f73f aed5 	bgt.w	80064f4 <_dtoa_r+0x8dc>
 800674a:	9d06      	ldr	r5, [sp, #24]
 800674c:	4631      	mov	r1, r6
 800674e:	4658      	mov	r0, fp
 8006750:	f7ff f9d2 	bl	8005af8 <quorem>
 8006754:	9b06      	ldr	r3, [sp, #24]
 8006756:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800675a:	f805 8b01 	strb.w	r8, [r5], #1
 800675e:	9a04      	ldr	r2, [sp, #16]
 8006760:	1aeb      	subs	r3, r5, r3
 8006762:	429a      	cmp	r2, r3
 8006764:	ddb5      	ble.n	80066d2 <_dtoa_r+0xaba>
 8006766:	4659      	mov	r1, fp
 8006768:	2300      	movs	r3, #0
 800676a:	220a      	movs	r2, #10
 800676c:	4620      	mov	r0, r4
 800676e:	f000 f881 	bl	8006874 <__multadd>
 8006772:	4683      	mov	fp, r0
 8006774:	e7ea      	b.n	800674c <_dtoa_r+0xb34>
 8006776:	bf00      	nop
 8006778:	0800b340 	.word	0x0800b340
 800677c:	0800b364 	.word	0x0800b364

08006780 <_localeconv_r>:
 8006780:	4b04      	ldr	r3, [pc, #16]	; (8006794 <_localeconv_r+0x14>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	6a18      	ldr	r0, [r3, #32]
 8006786:	4b04      	ldr	r3, [pc, #16]	; (8006798 <_localeconv_r+0x18>)
 8006788:	2800      	cmp	r0, #0
 800678a:	bf08      	it	eq
 800678c:	4618      	moveq	r0, r3
 800678e:	30f0      	adds	r0, #240	; 0xf0
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop
 8006794:	20000048 	.word	0x20000048
 8006798:	200000ac 	.word	0x200000ac

0800679c <malloc>:
 800679c:	4b02      	ldr	r3, [pc, #8]	; (80067a8 <malloc+0xc>)
 800679e:	4601      	mov	r1, r0
 80067a0:	6818      	ldr	r0, [r3, #0]
 80067a2:	f000 bb53 	b.w	8006e4c <_malloc_r>
 80067a6:	bf00      	nop
 80067a8:	20000048 	.word	0x20000048

080067ac <memchr>:
 80067ac:	b510      	push	{r4, lr}
 80067ae:	b2c9      	uxtb	r1, r1
 80067b0:	4402      	add	r2, r0
 80067b2:	4290      	cmp	r0, r2
 80067b4:	4603      	mov	r3, r0
 80067b6:	d101      	bne.n	80067bc <memchr+0x10>
 80067b8:	2300      	movs	r3, #0
 80067ba:	e003      	b.n	80067c4 <memchr+0x18>
 80067bc:	781c      	ldrb	r4, [r3, #0]
 80067be:	3001      	adds	r0, #1
 80067c0:	428c      	cmp	r4, r1
 80067c2:	d1f6      	bne.n	80067b2 <memchr+0x6>
 80067c4:	4618      	mov	r0, r3
 80067c6:	bd10      	pop	{r4, pc}

080067c8 <memcpy>:
 80067c8:	b510      	push	{r4, lr}
 80067ca:	1e43      	subs	r3, r0, #1
 80067cc:	440a      	add	r2, r1
 80067ce:	4291      	cmp	r1, r2
 80067d0:	d100      	bne.n	80067d4 <memcpy+0xc>
 80067d2:	bd10      	pop	{r4, pc}
 80067d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067dc:	e7f7      	b.n	80067ce <memcpy+0x6>

080067de <_Balloc>:
 80067de:	b570      	push	{r4, r5, r6, lr}
 80067e0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80067e2:	4604      	mov	r4, r0
 80067e4:	460e      	mov	r6, r1
 80067e6:	b93d      	cbnz	r5, 80067f8 <_Balloc+0x1a>
 80067e8:	2010      	movs	r0, #16
 80067ea:	f7ff ffd7 	bl	800679c <malloc>
 80067ee:	6260      	str	r0, [r4, #36]	; 0x24
 80067f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80067f4:	6005      	str	r5, [r0, #0]
 80067f6:	60c5      	str	r5, [r0, #12]
 80067f8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80067fa:	68eb      	ldr	r3, [r5, #12]
 80067fc:	b183      	cbz	r3, 8006820 <_Balloc+0x42>
 80067fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006806:	b9b8      	cbnz	r0, 8006838 <_Balloc+0x5a>
 8006808:	2101      	movs	r1, #1
 800680a:	fa01 f506 	lsl.w	r5, r1, r6
 800680e:	1d6a      	adds	r2, r5, #5
 8006810:	0092      	lsls	r2, r2, #2
 8006812:	4620      	mov	r0, r4
 8006814:	f000 fabf 	bl	8006d96 <_calloc_r>
 8006818:	b160      	cbz	r0, 8006834 <_Balloc+0x56>
 800681a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800681e:	e00e      	b.n	800683e <_Balloc+0x60>
 8006820:	2221      	movs	r2, #33	; 0x21
 8006822:	2104      	movs	r1, #4
 8006824:	4620      	mov	r0, r4
 8006826:	f000 fab6 	bl	8006d96 <_calloc_r>
 800682a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800682c:	60e8      	str	r0, [r5, #12]
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d1e4      	bne.n	80067fe <_Balloc+0x20>
 8006834:	2000      	movs	r0, #0
 8006836:	bd70      	pop	{r4, r5, r6, pc}
 8006838:	6802      	ldr	r2, [r0, #0]
 800683a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800683e:	2300      	movs	r3, #0
 8006840:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006844:	e7f7      	b.n	8006836 <_Balloc+0x58>

08006846 <_Bfree>:
 8006846:	b570      	push	{r4, r5, r6, lr}
 8006848:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800684a:	4606      	mov	r6, r0
 800684c:	460d      	mov	r5, r1
 800684e:	b93c      	cbnz	r4, 8006860 <_Bfree+0x1a>
 8006850:	2010      	movs	r0, #16
 8006852:	f7ff ffa3 	bl	800679c <malloc>
 8006856:	6270      	str	r0, [r6, #36]	; 0x24
 8006858:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800685c:	6004      	str	r4, [r0, #0]
 800685e:	60c4      	str	r4, [r0, #12]
 8006860:	b13d      	cbz	r5, 8006872 <_Bfree+0x2c>
 8006862:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006864:	686a      	ldr	r2, [r5, #4]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800686c:	6029      	str	r1, [r5, #0]
 800686e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006872:	bd70      	pop	{r4, r5, r6, pc}

08006874 <__multadd>:
 8006874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006878:	461f      	mov	r7, r3
 800687a:	4606      	mov	r6, r0
 800687c:	460c      	mov	r4, r1
 800687e:	2300      	movs	r3, #0
 8006880:	690d      	ldr	r5, [r1, #16]
 8006882:	f101 0c14 	add.w	ip, r1, #20
 8006886:	f8dc 0000 	ldr.w	r0, [ip]
 800688a:	3301      	adds	r3, #1
 800688c:	b281      	uxth	r1, r0
 800688e:	fb02 7101 	mla	r1, r2, r1, r7
 8006892:	0c00      	lsrs	r0, r0, #16
 8006894:	0c0f      	lsrs	r7, r1, #16
 8006896:	fb02 7000 	mla	r0, r2, r0, r7
 800689a:	b289      	uxth	r1, r1
 800689c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80068a0:	429d      	cmp	r5, r3
 80068a2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80068a6:	f84c 1b04 	str.w	r1, [ip], #4
 80068aa:	dcec      	bgt.n	8006886 <__multadd+0x12>
 80068ac:	b1d7      	cbz	r7, 80068e4 <__multadd+0x70>
 80068ae:	68a3      	ldr	r3, [r4, #8]
 80068b0:	42ab      	cmp	r3, r5
 80068b2:	dc12      	bgt.n	80068da <__multadd+0x66>
 80068b4:	6861      	ldr	r1, [r4, #4]
 80068b6:	4630      	mov	r0, r6
 80068b8:	3101      	adds	r1, #1
 80068ba:	f7ff ff90 	bl	80067de <_Balloc>
 80068be:	4680      	mov	r8, r0
 80068c0:	6922      	ldr	r2, [r4, #16]
 80068c2:	f104 010c 	add.w	r1, r4, #12
 80068c6:	3202      	adds	r2, #2
 80068c8:	0092      	lsls	r2, r2, #2
 80068ca:	300c      	adds	r0, #12
 80068cc:	f7ff ff7c 	bl	80067c8 <memcpy>
 80068d0:	4621      	mov	r1, r4
 80068d2:	4630      	mov	r0, r6
 80068d4:	f7ff ffb7 	bl	8006846 <_Bfree>
 80068d8:	4644      	mov	r4, r8
 80068da:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80068de:	3501      	adds	r5, #1
 80068e0:	615f      	str	r7, [r3, #20]
 80068e2:	6125      	str	r5, [r4, #16]
 80068e4:	4620      	mov	r0, r4
 80068e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080068ea <__hi0bits>:
 80068ea:	0c02      	lsrs	r2, r0, #16
 80068ec:	0412      	lsls	r2, r2, #16
 80068ee:	4603      	mov	r3, r0
 80068f0:	b9b2      	cbnz	r2, 8006920 <__hi0bits+0x36>
 80068f2:	0403      	lsls	r3, r0, #16
 80068f4:	2010      	movs	r0, #16
 80068f6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80068fa:	bf04      	itt	eq
 80068fc:	021b      	lsleq	r3, r3, #8
 80068fe:	3008      	addeq	r0, #8
 8006900:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006904:	bf04      	itt	eq
 8006906:	011b      	lsleq	r3, r3, #4
 8006908:	3004      	addeq	r0, #4
 800690a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800690e:	bf04      	itt	eq
 8006910:	009b      	lsleq	r3, r3, #2
 8006912:	3002      	addeq	r0, #2
 8006914:	2b00      	cmp	r3, #0
 8006916:	db06      	blt.n	8006926 <__hi0bits+0x3c>
 8006918:	005b      	lsls	r3, r3, #1
 800691a:	d503      	bpl.n	8006924 <__hi0bits+0x3a>
 800691c:	3001      	adds	r0, #1
 800691e:	4770      	bx	lr
 8006920:	2000      	movs	r0, #0
 8006922:	e7e8      	b.n	80068f6 <__hi0bits+0xc>
 8006924:	2020      	movs	r0, #32
 8006926:	4770      	bx	lr

08006928 <__lo0bits>:
 8006928:	6803      	ldr	r3, [r0, #0]
 800692a:	4601      	mov	r1, r0
 800692c:	f013 0207 	ands.w	r2, r3, #7
 8006930:	d00b      	beq.n	800694a <__lo0bits+0x22>
 8006932:	07da      	lsls	r2, r3, #31
 8006934:	d423      	bmi.n	800697e <__lo0bits+0x56>
 8006936:	0798      	lsls	r0, r3, #30
 8006938:	bf49      	itett	mi
 800693a:	085b      	lsrmi	r3, r3, #1
 800693c:	089b      	lsrpl	r3, r3, #2
 800693e:	2001      	movmi	r0, #1
 8006940:	600b      	strmi	r3, [r1, #0]
 8006942:	bf5c      	itt	pl
 8006944:	600b      	strpl	r3, [r1, #0]
 8006946:	2002      	movpl	r0, #2
 8006948:	4770      	bx	lr
 800694a:	b298      	uxth	r0, r3
 800694c:	b9a8      	cbnz	r0, 800697a <__lo0bits+0x52>
 800694e:	2010      	movs	r0, #16
 8006950:	0c1b      	lsrs	r3, r3, #16
 8006952:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006956:	bf04      	itt	eq
 8006958:	0a1b      	lsreq	r3, r3, #8
 800695a:	3008      	addeq	r0, #8
 800695c:	071a      	lsls	r2, r3, #28
 800695e:	bf04      	itt	eq
 8006960:	091b      	lsreq	r3, r3, #4
 8006962:	3004      	addeq	r0, #4
 8006964:	079a      	lsls	r2, r3, #30
 8006966:	bf04      	itt	eq
 8006968:	089b      	lsreq	r3, r3, #2
 800696a:	3002      	addeq	r0, #2
 800696c:	07da      	lsls	r2, r3, #31
 800696e:	d402      	bmi.n	8006976 <__lo0bits+0x4e>
 8006970:	085b      	lsrs	r3, r3, #1
 8006972:	d006      	beq.n	8006982 <__lo0bits+0x5a>
 8006974:	3001      	adds	r0, #1
 8006976:	600b      	str	r3, [r1, #0]
 8006978:	4770      	bx	lr
 800697a:	4610      	mov	r0, r2
 800697c:	e7e9      	b.n	8006952 <__lo0bits+0x2a>
 800697e:	2000      	movs	r0, #0
 8006980:	4770      	bx	lr
 8006982:	2020      	movs	r0, #32
 8006984:	4770      	bx	lr

08006986 <__i2b>:
 8006986:	b510      	push	{r4, lr}
 8006988:	460c      	mov	r4, r1
 800698a:	2101      	movs	r1, #1
 800698c:	f7ff ff27 	bl	80067de <_Balloc>
 8006990:	2201      	movs	r2, #1
 8006992:	6144      	str	r4, [r0, #20]
 8006994:	6102      	str	r2, [r0, #16]
 8006996:	bd10      	pop	{r4, pc}

08006998 <__multiply>:
 8006998:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800699c:	4614      	mov	r4, r2
 800699e:	690a      	ldr	r2, [r1, #16]
 80069a0:	6923      	ldr	r3, [r4, #16]
 80069a2:	4688      	mov	r8, r1
 80069a4:	429a      	cmp	r2, r3
 80069a6:	bfbe      	ittt	lt
 80069a8:	460b      	movlt	r3, r1
 80069aa:	46a0      	movlt	r8, r4
 80069ac:	461c      	movlt	r4, r3
 80069ae:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80069b2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80069b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80069ba:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80069be:	eb07 0609 	add.w	r6, r7, r9
 80069c2:	42b3      	cmp	r3, r6
 80069c4:	bfb8      	it	lt
 80069c6:	3101      	addlt	r1, #1
 80069c8:	f7ff ff09 	bl	80067de <_Balloc>
 80069cc:	f100 0514 	add.w	r5, r0, #20
 80069d0:	462b      	mov	r3, r5
 80069d2:	2200      	movs	r2, #0
 80069d4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80069d8:	4573      	cmp	r3, lr
 80069da:	d316      	bcc.n	8006a0a <__multiply+0x72>
 80069dc:	f104 0214 	add.w	r2, r4, #20
 80069e0:	f108 0114 	add.w	r1, r8, #20
 80069e4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80069e8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80069ec:	9300      	str	r3, [sp, #0]
 80069ee:	9b00      	ldr	r3, [sp, #0]
 80069f0:	9201      	str	r2, [sp, #4]
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d80c      	bhi.n	8006a10 <__multiply+0x78>
 80069f6:	2e00      	cmp	r6, #0
 80069f8:	dd03      	ble.n	8006a02 <__multiply+0x6a>
 80069fa:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d05d      	beq.n	8006abe <__multiply+0x126>
 8006a02:	6106      	str	r6, [r0, #16]
 8006a04:	b003      	add	sp, #12
 8006a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a0a:	f843 2b04 	str.w	r2, [r3], #4
 8006a0e:	e7e3      	b.n	80069d8 <__multiply+0x40>
 8006a10:	f8b2 b000 	ldrh.w	fp, [r2]
 8006a14:	f1bb 0f00 	cmp.w	fp, #0
 8006a18:	d023      	beq.n	8006a62 <__multiply+0xca>
 8006a1a:	4689      	mov	r9, r1
 8006a1c:	46ac      	mov	ip, r5
 8006a1e:	f04f 0800 	mov.w	r8, #0
 8006a22:	f859 4b04 	ldr.w	r4, [r9], #4
 8006a26:	f8dc a000 	ldr.w	sl, [ip]
 8006a2a:	b2a3      	uxth	r3, r4
 8006a2c:	fa1f fa8a 	uxth.w	sl, sl
 8006a30:	fb0b a303 	mla	r3, fp, r3, sl
 8006a34:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006a38:	f8dc 4000 	ldr.w	r4, [ip]
 8006a3c:	4443      	add	r3, r8
 8006a3e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006a42:	fb0b 840a 	mla	r4, fp, sl, r8
 8006a46:	46e2      	mov	sl, ip
 8006a48:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006a52:	454f      	cmp	r7, r9
 8006a54:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006a58:	f84a 3b04 	str.w	r3, [sl], #4
 8006a5c:	d82b      	bhi.n	8006ab6 <__multiply+0x11e>
 8006a5e:	f8cc 8004 	str.w	r8, [ip, #4]
 8006a62:	9b01      	ldr	r3, [sp, #4]
 8006a64:	3204      	adds	r2, #4
 8006a66:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006a6a:	f1ba 0f00 	cmp.w	sl, #0
 8006a6e:	d020      	beq.n	8006ab2 <__multiply+0x11a>
 8006a70:	4689      	mov	r9, r1
 8006a72:	46a8      	mov	r8, r5
 8006a74:	f04f 0b00 	mov.w	fp, #0
 8006a78:	682b      	ldr	r3, [r5, #0]
 8006a7a:	f8b9 c000 	ldrh.w	ip, [r9]
 8006a7e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	fb0a 440c 	mla	r4, sl, ip, r4
 8006a88:	46c4      	mov	ip, r8
 8006a8a:	445c      	add	r4, fp
 8006a8c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006a90:	f84c 3b04 	str.w	r3, [ip], #4
 8006a94:	f859 3b04 	ldr.w	r3, [r9], #4
 8006a98:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006a9c:	0c1b      	lsrs	r3, r3, #16
 8006a9e:	fb0a b303 	mla	r3, sl, r3, fp
 8006aa2:	454f      	cmp	r7, r9
 8006aa4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006aa8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006aac:	d805      	bhi.n	8006aba <__multiply+0x122>
 8006aae:	f8c8 3004 	str.w	r3, [r8, #4]
 8006ab2:	3504      	adds	r5, #4
 8006ab4:	e79b      	b.n	80069ee <__multiply+0x56>
 8006ab6:	46d4      	mov	ip, sl
 8006ab8:	e7b3      	b.n	8006a22 <__multiply+0x8a>
 8006aba:	46e0      	mov	r8, ip
 8006abc:	e7dd      	b.n	8006a7a <__multiply+0xe2>
 8006abe:	3e01      	subs	r6, #1
 8006ac0:	e799      	b.n	80069f6 <__multiply+0x5e>
	...

08006ac4 <__pow5mult>:
 8006ac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ac8:	4615      	mov	r5, r2
 8006aca:	f012 0203 	ands.w	r2, r2, #3
 8006ace:	4606      	mov	r6, r0
 8006ad0:	460f      	mov	r7, r1
 8006ad2:	d007      	beq.n	8006ae4 <__pow5mult+0x20>
 8006ad4:	4c21      	ldr	r4, [pc, #132]	; (8006b5c <__pow5mult+0x98>)
 8006ad6:	3a01      	subs	r2, #1
 8006ad8:	2300      	movs	r3, #0
 8006ada:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006ade:	f7ff fec9 	bl	8006874 <__multadd>
 8006ae2:	4607      	mov	r7, r0
 8006ae4:	10ad      	asrs	r5, r5, #2
 8006ae6:	d035      	beq.n	8006b54 <__pow5mult+0x90>
 8006ae8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006aea:	b93c      	cbnz	r4, 8006afc <__pow5mult+0x38>
 8006aec:	2010      	movs	r0, #16
 8006aee:	f7ff fe55 	bl	800679c <malloc>
 8006af2:	6270      	str	r0, [r6, #36]	; 0x24
 8006af4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006af8:	6004      	str	r4, [r0, #0]
 8006afa:	60c4      	str	r4, [r0, #12]
 8006afc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006b00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006b04:	b94c      	cbnz	r4, 8006b1a <__pow5mult+0x56>
 8006b06:	f240 2171 	movw	r1, #625	; 0x271
 8006b0a:	4630      	mov	r0, r6
 8006b0c:	f7ff ff3b 	bl	8006986 <__i2b>
 8006b10:	2300      	movs	r3, #0
 8006b12:	4604      	mov	r4, r0
 8006b14:	f8c8 0008 	str.w	r0, [r8, #8]
 8006b18:	6003      	str	r3, [r0, #0]
 8006b1a:	f04f 0800 	mov.w	r8, #0
 8006b1e:	07eb      	lsls	r3, r5, #31
 8006b20:	d50a      	bpl.n	8006b38 <__pow5mult+0x74>
 8006b22:	4639      	mov	r1, r7
 8006b24:	4622      	mov	r2, r4
 8006b26:	4630      	mov	r0, r6
 8006b28:	f7ff ff36 	bl	8006998 <__multiply>
 8006b2c:	4681      	mov	r9, r0
 8006b2e:	4639      	mov	r1, r7
 8006b30:	4630      	mov	r0, r6
 8006b32:	f7ff fe88 	bl	8006846 <_Bfree>
 8006b36:	464f      	mov	r7, r9
 8006b38:	106d      	asrs	r5, r5, #1
 8006b3a:	d00b      	beq.n	8006b54 <__pow5mult+0x90>
 8006b3c:	6820      	ldr	r0, [r4, #0]
 8006b3e:	b938      	cbnz	r0, 8006b50 <__pow5mult+0x8c>
 8006b40:	4622      	mov	r2, r4
 8006b42:	4621      	mov	r1, r4
 8006b44:	4630      	mov	r0, r6
 8006b46:	f7ff ff27 	bl	8006998 <__multiply>
 8006b4a:	6020      	str	r0, [r4, #0]
 8006b4c:	f8c0 8000 	str.w	r8, [r0]
 8006b50:	4604      	mov	r4, r0
 8006b52:	e7e4      	b.n	8006b1e <__pow5mult+0x5a>
 8006b54:	4638      	mov	r0, r7
 8006b56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b5a:	bf00      	nop
 8006b5c:	0800b468 	.word	0x0800b468

08006b60 <__lshift>:
 8006b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b64:	460c      	mov	r4, r1
 8006b66:	4607      	mov	r7, r0
 8006b68:	4616      	mov	r6, r2
 8006b6a:	6923      	ldr	r3, [r4, #16]
 8006b6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006b70:	eb0a 0903 	add.w	r9, sl, r3
 8006b74:	6849      	ldr	r1, [r1, #4]
 8006b76:	68a3      	ldr	r3, [r4, #8]
 8006b78:	f109 0501 	add.w	r5, r9, #1
 8006b7c:	42ab      	cmp	r3, r5
 8006b7e:	db32      	blt.n	8006be6 <__lshift+0x86>
 8006b80:	4638      	mov	r0, r7
 8006b82:	f7ff fe2c 	bl	80067de <_Balloc>
 8006b86:	2300      	movs	r3, #0
 8006b88:	4680      	mov	r8, r0
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	f100 0114 	add.w	r1, r0, #20
 8006b90:	4553      	cmp	r3, sl
 8006b92:	db2b      	blt.n	8006bec <__lshift+0x8c>
 8006b94:	6920      	ldr	r0, [r4, #16]
 8006b96:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006b9a:	f104 0314 	add.w	r3, r4, #20
 8006b9e:	f016 021f 	ands.w	r2, r6, #31
 8006ba2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006ba6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006baa:	d025      	beq.n	8006bf8 <__lshift+0x98>
 8006bac:	2000      	movs	r0, #0
 8006bae:	f1c2 0e20 	rsb	lr, r2, #32
 8006bb2:	468a      	mov	sl, r1
 8006bb4:	681e      	ldr	r6, [r3, #0]
 8006bb6:	4096      	lsls	r6, r2
 8006bb8:	4330      	orrs	r0, r6
 8006bba:	f84a 0b04 	str.w	r0, [sl], #4
 8006bbe:	f853 0b04 	ldr.w	r0, [r3], #4
 8006bc2:	459c      	cmp	ip, r3
 8006bc4:	fa20 f00e 	lsr.w	r0, r0, lr
 8006bc8:	d814      	bhi.n	8006bf4 <__lshift+0x94>
 8006bca:	6048      	str	r0, [r1, #4]
 8006bcc:	b108      	cbz	r0, 8006bd2 <__lshift+0x72>
 8006bce:	f109 0502 	add.w	r5, r9, #2
 8006bd2:	3d01      	subs	r5, #1
 8006bd4:	4638      	mov	r0, r7
 8006bd6:	f8c8 5010 	str.w	r5, [r8, #16]
 8006bda:	4621      	mov	r1, r4
 8006bdc:	f7ff fe33 	bl	8006846 <_Bfree>
 8006be0:	4640      	mov	r0, r8
 8006be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006be6:	3101      	adds	r1, #1
 8006be8:	005b      	lsls	r3, r3, #1
 8006bea:	e7c7      	b.n	8006b7c <__lshift+0x1c>
 8006bec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	e7cd      	b.n	8006b90 <__lshift+0x30>
 8006bf4:	4651      	mov	r1, sl
 8006bf6:	e7dc      	b.n	8006bb2 <__lshift+0x52>
 8006bf8:	3904      	subs	r1, #4
 8006bfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bfe:	459c      	cmp	ip, r3
 8006c00:	f841 2f04 	str.w	r2, [r1, #4]!
 8006c04:	d8f9      	bhi.n	8006bfa <__lshift+0x9a>
 8006c06:	e7e4      	b.n	8006bd2 <__lshift+0x72>

08006c08 <__mcmp>:
 8006c08:	6903      	ldr	r3, [r0, #16]
 8006c0a:	690a      	ldr	r2, [r1, #16]
 8006c0c:	b530      	push	{r4, r5, lr}
 8006c0e:	1a9b      	subs	r3, r3, r2
 8006c10:	d10c      	bne.n	8006c2c <__mcmp+0x24>
 8006c12:	0092      	lsls	r2, r2, #2
 8006c14:	3014      	adds	r0, #20
 8006c16:	3114      	adds	r1, #20
 8006c18:	1884      	adds	r4, r0, r2
 8006c1a:	4411      	add	r1, r2
 8006c1c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006c20:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006c24:	4295      	cmp	r5, r2
 8006c26:	d003      	beq.n	8006c30 <__mcmp+0x28>
 8006c28:	d305      	bcc.n	8006c36 <__mcmp+0x2e>
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	bd30      	pop	{r4, r5, pc}
 8006c30:	42a0      	cmp	r0, r4
 8006c32:	d3f3      	bcc.n	8006c1c <__mcmp+0x14>
 8006c34:	e7fa      	b.n	8006c2c <__mcmp+0x24>
 8006c36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c3a:	e7f7      	b.n	8006c2c <__mcmp+0x24>

08006c3c <__mdiff>:
 8006c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c40:	460d      	mov	r5, r1
 8006c42:	4607      	mov	r7, r0
 8006c44:	4611      	mov	r1, r2
 8006c46:	4628      	mov	r0, r5
 8006c48:	4614      	mov	r4, r2
 8006c4a:	f7ff ffdd 	bl	8006c08 <__mcmp>
 8006c4e:	1e06      	subs	r6, r0, #0
 8006c50:	d108      	bne.n	8006c64 <__mdiff+0x28>
 8006c52:	4631      	mov	r1, r6
 8006c54:	4638      	mov	r0, r7
 8006c56:	f7ff fdc2 	bl	80067de <_Balloc>
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c64:	bfa4      	itt	ge
 8006c66:	4623      	movge	r3, r4
 8006c68:	462c      	movge	r4, r5
 8006c6a:	4638      	mov	r0, r7
 8006c6c:	6861      	ldr	r1, [r4, #4]
 8006c6e:	bfa6      	itte	ge
 8006c70:	461d      	movge	r5, r3
 8006c72:	2600      	movge	r6, #0
 8006c74:	2601      	movlt	r6, #1
 8006c76:	f7ff fdb2 	bl	80067de <_Balloc>
 8006c7a:	f04f 0e00 	mov.w	lr, #0
 8006c7e:	60c6      	str	r6, [r0, #12]
 8006c80:	692b      	ldr	r3, [r5, #16]
 8006c82:	6926      	ldr	r6, [r4, #16]
 8006c84:	f104 0214 	add.w	r2, r4, #20
 8006c88:	f105 0914 	add.w	r9, r5, #20
 8006c8c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006c90:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006c94:	f100 0114 	add.w	r1, r0, #20
 8006c98:	f852 ab04 	ldr.w	sl, [r2], #4
 8006c9c:	f859 5b04 	ldr.w	r5, [r9], #4
 8006ca0:	fa1f f38a 	uxth.w	r3, sl
 8006ca4:	4473      	add	r3, lr
 8006ca6:	b2ac      	uxth	r4, r5
 8006ca8:	1b1b      	subs	r3, r3, r4
 8006caa:	0c2c      	lsrs	r4, r5, #16
 8006cac:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8006cb0:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8006cba:	45c8      	cmp	r8, r9
 8006cbc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8006cc0:	4694      	mov	ip, r2
 8006cc2:	f841 4b04 	str.w	r4, [r1], #4
 8006cc6:	d8e7      	bhi.n	8006c98 <__mdiff+0x5c>
 8006cc8:	45bc      	cmp	ip, r7
 8006cca:	d304      	bcc.n	8006cd6 <__mdiff+0x9a>
 8006ccc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006cd0:	b183      	cbz	r3, 8006cf4 <__mdiff+0xb8>
 8006cd2:	6106      	str	r6, [r0, #16]
 8006cd4:	e7c4      	b.n	8006c60 <__mdiff+0x24>
 8006cd6:	f85c 4b04 	ldr.w	r4, [ip], #4
 8006cda:	b2a2      	uxth	r2, r4
 8006cdc:	4472      	add	r2, lr
 8006cde:	1413      	asrs	r3, r2, #16
 8006ce0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006ce4:	b292      	uxth	r2, r2
 8006ce6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006cea:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006cee:	f841 2b04 	str.w	r2, [r1], #4
 8006cf2:	e7e9      	b.n	8006cc8 <__mdiff+0x8c>
 8006cf4:	3e01      	subs	r6, #1
 8006cf6:	e7e9      	b.n	8006ccc <__mdiff+0x90>

08006cf8 <__d2b>:
 8006cf8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006cfc:	461c      	mov	r4, r3
 8006cfe:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8006d02:	2101      	movs	r1, #1
 8006d04:	4690      	mov	r8, r2
 8006d06:	f7ff fd6a 	bl	80067de <_Balloc>
 8006d0a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8006d0e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006d12:	4607      	mov	r7, r0
 8006d14:	bb34      	cbnz	r4, 8006d64 <__d2b+0x6c>
 8006d16:	9201      	str	r2, [sp, #4]
 8006d18:	f1b8 0200 	subs.w	r2, r8, #0
 8006d1c:	d027      	beq.n	8006d6e <__d2b+0x76>
 8006d1e:	a802      	add	r0, sp, #8
 8006d20:	f840 2d08 	str.w	r2, [r0, #-8]!
 8006d24:	f7ff fe00 	bl	8006928 <__lo0bits>
 8006d28:	9900      	ldr	r1, [sp, #0]
 8006d2a:	b1f0      	cbz	r0, 8006d6a <__d2b+0x72>
 8006d2c:	9a01      	ldr	r2, [sp, #4]
 8006d2e:	f1c0 0320 	rsb	r3, r0, #32
 8006d32:	fa02 f303 	lsl.w	r3, r2, r3
 8006d36:	430b      	orrs	r3, r1
 8006d38:	40c2      	lsrs	r2, r0
 8006d3a:	617b      	str	r3, [r7, #20]
 8006d3c:	9201      	str	r2, [sp, #4]
 8006d3e:	9b01      	ldr	r3, [sp, #4]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	bf14      	ite	ne
 8006d44:	2102      	movne	r1, #2
 8006d46:	2101      	moveq	r1, #1
 8006d48:	61bb      	str	r3, [r7, #24]
 8006d4a:	6139      	str	r1, [r7, #16]
 8006d4c:	b1c4      	cbz	r4, 8006d80 <__d2b+0x88>
 8006d4e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006d52:	4404      	add	r4, r0
 8006d54:	6034      	str	r4, [r6, #0]
 8006d56:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006d5a:	6028      	str	r0, [r5, #0]
 8006d5c:	4638      	mov	r0, r7
 8006d5e:	b002      	add	sp, #8
 8006d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d64:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006d68:	e7d5      	b.n	8006d16 <__d2b+0x1e>
 8006d6a:	6179      	str	r1, [r7, #20]
 8006d6c:	e7e7      	b.n	8006d3e <__d2b+0x46>
 8006d6e:	a801      	add	r0, sp, #4
 8006d70:	f7ff fdda 	bl	8006928 <__lo0bits>
 8006d74:	2101      	movs	r1, #1
 8006d76:	9b01      	ldr	r3, [sp, #4]
 8006d78:	6139      	str	r1, [r7, #16]
 8006d7a:	617b      	str	r3, [r7, #20]
 8006d7c:	3020      	adds	r0, #32
 8006d7e:	e7e5      	b.n	8006d4c <__d2b+0x54>
 8006d80:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006d84:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006d88:	6030      	str	r0, [r6, #0]
 8006d8a:	6918      	ldr	r0, [r3, #16]
 8006d8c:	f7ff fdad 	bl	80068ea <__hi0bits>
 8006d90:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006d94:	e7e1      	b.n	8006d5a <__d2b+0x62>

08006d96 <_calloc_r>:
 8006d96:	b538      	push	{r3, r4, r5, lr}
 8006d98:	fb02 f401 	mul.w	r4, r2, r1
 8006d9c:	4621      	mov	r1, r4
 8006d9e:	f000 f855 	bl	8006e4c <_malloc_r>
 8006da2:	4605      	mov	r5, r0
 8006da4:	b118      	cbz	r0, 8006dae <_calloc_r+0x18>
 8006da6:	4622      	mov	r2, r4
 8006da8:	2100      	movs	r1, #0
 8006daa:	f7fe f9f9 	bl	80051a0 <memset>
 8006dae:	4628      	mov	r0, r5
 8006db0:	bd38      	pop	{r3, r4, r5, pc}
	...

08006db4 <_free_r>:
 8006db4:	b538      	push	{r3, r4, r5, lr}
 8006db6:	4605      	mov	r5, r0
 8006db8:	2900      	cmp	r1, #0
 8006dba:	d043      	beq.n	8006e44 <_free_r+0x90>
 8006dbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dc0:	1f0c      	subs	r4, r1, #4
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	bfb8      	it	lt
 8006dc6:	18e4      	addlt	r4, r4, r3
 8006dc8:	f000 fa27 	bl	800721a <__malloc_lock>
 8006dcc:	4a1e      	ldr	r2, [pc, #120]	; (8006e48 <_free_r+0x94>)
 8006dce:	6813      	ldr	r3, [r2, #0]
 8006dd0:	4610      	mov	r0, r2
 8006dd2:	b933      	cbnz	r3, 8006de2 <_free_r+0x2e>
 8006dd4:	6063      	str	r3, [r4, #4]
 8006dd6:	6014      	str	r4, [r2, #0]
 8006dd8:	4628      	mov	r0, r5
 8006dda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006dde:	f000 ba1d 	b.w	800721c <__malloc_unlock>
 8006de2:	42a3      	cmp	r3, r4
 8006de4:	d90b      	bls.n	8006dfe <_free_r+0x4a>
 8006de6:	6821      	ldr	r1, [r4, #0]
 8006de8:	1862      	adds	r2, r4, r1
 8006dea:	4293      	cmp	r3, r2
 8006dec:	bf01      	itttt	eq
 8006dee:	681a      	ldreq	r2, [r3, #0]
 8006df0:	685b      	ldreq	r3, [r3, #4]
 8006df2:	1852      	addeq	r2, r2, r1
 8006df4:	6022      	streq	r2, [r4, #0]
 8006df6:	6063      	str	r3, [r4, #4]
 8006df8:	6004      	str	r4, [r0, #0]
 8006dfa:	e7ed      	b.n	8006dd8 <_free_r+0x24>
 8006dfc:	4613      	mov	r3, r2
 8006dfe:	685a      	ldr	r2, [r3, #4]
 8006e00:	b10a      	cbz	r2, 8006e06 <_free_r+0x52>
 8006e02:	42a2      	cmp	r2, r4
 8006e04:	d9fa      	bls.n	8006dfc <_free_r+0x48>
 8006e06:	6819      	ldr	r1, [r3, #0]
 8006e08:	1858      	adds	r0, r3, r1
 8006e0a:	42a0      	cmp	r0, r4
 8006e0c:	d10b      	bne.n	8006e26 <_free_r+0x72>
 8006e0e:	6820      	ldr	r0, [r4, #0]
 8006e10:	4401      	add	r1, r0
 8006e12:	1858      	adds	r0, r3, r1
 8006e14:	4282      	cmp	r2, r0
 8006e16:	6019      	str	r1, [r3, #0]
 8006e18:	d1de      	bne.n	8006dd8 <_free_r+0x24>
 8006e1a:	6810      	ldr	r0, [r2, #0]
 8006e1c:	6852      	ldr	r2, [r2, #4]
 8006e1e:	4401      	add	r1, r0
 8006e20:	6019      	str	r1, [r3, #0]
 8006e22:	605a      	str	r2, [r3, #4]
 8006e24:	e7d8      	b.n	8006dd8 <_free_r+0x24>
 8006e26:	d902      	bls.n	8006e2e <_free_r+0x7a>
 8006e28:	230c      	movs	r3, #12
 8006e2a:	602b      	str	r3, [r5, #0]
 8006e2c:	e7d4      	b.n	8006dd8 <_free_r+0x24>
 8006e2e:	6820      	ldr	r0, [r4, #0]
 8006e30:	1821      	adds	r1, r4, r0
 8006e32:	428a      	cmp	r2, r1
 8006e34:	bf01      	itttt	eq
 8006e36:	6811      	ldreq	r1, [r2, #0]
 8006e38:	6852      	ldreq	r2, [r2, #4]
 8006e3a:	1809      	addeq	r1, r1, r0
 8006e3c:	6021      	streq	r1, [r4, #0]
 8006e3e:	6062      	str	r2, [r4, #4]
 8006e40:	605c      	str	r4, [r3, #4]
 8006e42:	e7c9      	b.n	8006dd8 <_free_r+0x24>
 8006e44:	bd38      	pop	{r3, r4, r5, pc}
 8006e46:	bf00      	nop
 8006e48:	200003f0 	.word	0x200003f0

08006e4c <_malloc_r>:
 8006e4c:	b570      	push	{r4, r5, r6, lr}
 8006e4e:	1ccd      	adds	r5, r1, #3
 8006e50:	f025 0503 	bic.w	r5, r5, #3
 8006e54:	3508      	adds	r5, #8
 8006e56:	2d0c      	cmp	r5, #12
 8006e58:	bf38      	it	cc
 8006e5a:	250c      	movcc	r5, #12
 8006e5c:	2d00      	cmp	r5, #0
 8006e5e:	4606      	mov	r6, r0
 8006e60:	db01      	blt.n	8006e66 <_malloc_r+0x1a>
 8006e62:	42a9      	cmp	r1, r5
 8006e64:	d903      	bls.n	8006e6e <_malloc_r+0x22>
 8006e66:	230c      	movs	r3, #12
 8006e68:	6033      	str	r3, [r6, #0]
 8006e6a:	2000      	movs	r0, #0
 8006e6c:	bd70      	pop	{r4, r5, r6, pc}
 8006e6e:	f000 f9d4 	bl	800721a <__malloc_lock>
 8006e72:	4a21      	ldr	r2, [pc, #132]	; (8006ef8 <_malloc_r+0xac>)
 8006e74:	6814      	ldr	r4, [r2, #0]
 8006e76:	4621      	mov	r1, r4
 8006e78:	b991      	cbnz	r1, 8006ea0 <_malloc_r+0x54>
 8006e7a:	4c20      	ldr	r4, [pc, #128]	; (8006efc <_malloc_r+0xb0>)
 8006e7c:	6823      	ldr	r3, [r4, #0]
 8006e7e:	b91b      	cbnz	r3, 8006e88 <_malloc_r+0x3c>
 8006e80:	4630      	mov	r0, r6
 8006e82:	f000 f98f 	bl	80071a4 <_sbrk_r>
 8006e86:	6020      	str	r0, [r4, #0]
 8006e88:	4629      	mov	r1, r5
 8006e8a:	4630      	mov	r0, r6
 8006e8c:	f000 f98a 	bl	80071a4 <_sbrk_r>
 8006e90:	1c43      	adds	r3, r0, #1
 8006e92:	d124      	bne.n	8006ede <_malloc_r+0x92>
 8006e94:	230c      	movs	r3, #12
 8006e96:	4630      	mov	r0, r6
 8006e98:	6033      	str	r3, [r6, #0]
 8006e9a:	f000 f9bf 	bl	800721c <__malloc_unlock>
 8006e9e:	e7e4      	b.n	8006e6a <_malloc_r+0x1e>
 8006ea0:	680b      	ldr	r3, [r1, #0]
 8006ea2:	1b5b      	subs	r3, r3, r5
 8006ea4:	d418      	bmi.n	8006ed8 <_malloc_r+0x8c>
 8006ea6:	2b0b      	cmp	r3, #11
 8006ea8:	d90f      	bls.n	8006eca <_malloc_r+0x7e>
 8006eaa:	600b      	str	r3, [r1, #0]
 8006eac:	18cc      	adds	r4, r1, r3
 8006eae:	50cd      	str	r5, [r1, r3]
 8006eb0:	4630      	mov	r0, r6
 8006eb2:	f000 f9b3 	bl	800721c <__malloc_unlock>
 8006eb6:	f104 000b 	add.w	r0, r4, #11
 8006eba:	1d23      	adds	r3, r4, #4
 8006ebc:	f020 0007 	bic.w	r0, r0, #7
 8006ec0:	1ac3      	subs	r3, r0, r3
 8006ec2:	d0d3      	beq.n	8006e6c <_malloc_r+0x20>
 8006ec4:	425a      	negs	r2, r3
 8006ec6:	50e2      	str	r2, [r4, r3]
 8006ec8:	e7d0      	b.n	8006e6c <_malloc_r+0x20>
 8006eca:	684b      	ldr	r3, [r1, #4]
 8006ecc:	428c      	cmp	r4, r1
 8006ece:	bf16      	itet	ne
 8006ed0:	6063      	strne	r3, [r4, #4]
 8006ed2:	6013      	streq	r3, [r2, #0]
 8006ed4:	460c      	movne	r4, r1
 8006ed6:	e7eb      	b.n	8006eb0 <_malloc_r+0x64>
 8006ed8:	460c      	mov	r4, r1
 8006eda:	6849      	ldr	r1, [r1, #4]
 8006edc:	e7cc      	b.n	8006e78 <_malloc_r+0x2c>
 8006ede:	1cc4      	adds	r4, r0, #3
 8006ee0:	f024 0403 	bic.w	r4, r4, #3
 8006ee4:	42a0      	cmp	r0, r4
 8006ee6:	d005      	beq.n	8006ef4 <_malloc_r+0xa8>
 8006ee8:	1a21      	subs	r1, r4, r0
 8006eea:	4630      	mov	r0, r6
 8006eec:	f000 f95a 	bl	80071a4 <_sbrk_r>
 8006ef0:	3001      	adds	r0, #1
 8006ef2:	d0cf      	beq.n	8006e94 <_malloc_r+0x48>
 8006ef4:	6025      	str	r5, [r4, #0]
 8006ef6:	e7db      	b.n	8006eb0 <_malloc_r+0x64>
 8006ef8:	200003f0 	.word	0x200003f0
 8006efc:	200003f4 	.word	0x200003f4

08006f00 <__ssputs_r>:
 8006f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f04:	688e      	ldr	r6, [r1, #8]
 8006f06:	4682      	mov	sl, r0
 8006f08:	429e      	cmp	r6, r3
 8006f0a:	460c      	mov	r4, r1
 8006f0c:	4690      	mov	r8, r2
 8006f0e:	4699      	mov	r9, r3
 8006f10:	d837      	bhi.n	8006f82 <__ssputs_r+0x82>
 8006f12:	898a      	ldrh	r2, [r1, #12]
 8006f14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006f18:	d031      	beq.n	8006f7e <__ssputs_r+0x7e>
 8006f1a:	2302      	movs	r3, #2
 8006f1c:	6825      	ldr	r5, [r4, #0]
 8006f1e:	6909      	ldr	r1, [r1, #16]
 8006f20:	1a6f      	subs	r7, r5, r1
 8006f22:	6965      	ldr	r5, [r4, #20]
 8006f24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f28:	fb95 f5f3 	sdiv	r5, r5, r3
 8006f2c:	f109 0301 	add.w	r3, r9, #1
 8006f30:	443b      	add	r3, r7
 8006f32:	429d      	cmp	r5, r3
 8006f34:	bf38      	it	cc
 8006f36:	461d      	movcc	r5, r3
 8006f38:	0553      	lsls	r3, r2, #21
 8006f3a:	d530      	bpl.n	8006f9e <__ssputs_r+0x9e>
 8006f3c:	4629      	mov	r1, r5
 8006f3e:	f7ff ff85 	bl	8006e4c <_malloc_r>
 8006f42:	4606      	mov	r6, r0
 8006f44:	b950      	cbnz	r0, 8006f5c <__ssputs_r+0x5c>
 8006f46:	230c      	movs	r3, #12
 8006f48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f4c:	f8ca 3000 	str.w	r3, [sl]
 8006f50:	89a3      	ldrh	r3, [r4, #12]
 8006f52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f56:	81a3      	strh	r3, [r4, #12]
 8006f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f5c:	463a      	mov	r2, r7
 8006f5e:	6921      	ldr	r1, [r4, #16]
 8006f60:	f7ff fc32 	bl	80067c8 <memcpy>
 8006f64:	89a3      	ldrh	r3, [r4, #12]
 8006f66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006f6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f6e:	81a3      	strh	r3, [r4, #12]
 8006f70:	6126      	str	r6, [r4, #16]
 8006f72:	443e      	add	r6, r7
 8006f74:	6026      	str	r6, [r4, #0]
 8006f76:	464e      	mov	r6, r9
 8006f78:	6165      	str	r5, [r4, #20]
 8006f7a:	1bed      	subs	r5, r5, r7
 8006f7c:	60a5      	str	r5, [r4, #8]
 8006f7e:	454e      	cmp	r6, r9
 8006f80:	d900      	bls.n	8006f84 <__ssputs_r+0x84>
 8006f82:	464e      	mov	r6, r9
 8006f84:	4632      	mov	r2, r6
 8006f86:	4641      	mov	r1, r8
 8006f88:	6820      	ldr	r0, [r4, #0]
 8006f8a:	f000 f92d 	bl	80071e8 <memmove>
 8006f8e:	68a3      	ldr	r3, [r4, #8]
 8006f90:	2000      	movs	r0, #0
 8006f92:	1b9b      	subs	r3, r3, r6
 8006f94:	60a3      	str	r3, [r4, #8]
 8006f96:	6823      	ldr	r3, [r4, #0]
 8006f98:	441e      	add	r6, r3
 8006f9a:	6026      	str	r6, [r4, #0]
 8006f9c:	e7dc      	b.n	8006f58 <__ssputs_r+0x58>
 8006f9e:	462a      	mov	r2, r5
 8006fa0:	f000 f93d 	bl	800721e <_realloc_r>
 8006fa4:	4606      	mov	r6, r0
 8006fa6:	2800      	cmp	r0, #0
 8006fa8:	d1e2      	bne.n	8006f70 <__ssputs_r+0x70>
 8006faa:	6921      	ldr	r1, [r4, #16]
 8006fac:	4650      	mov	r0, sl
 8006fae:	f7ff ff01 	bl	8006db4 <_free_r>
 8006fb2:	e7c8      	b.n	8006f46 <__ssputs_r+0x46>

08006fb4 <_svfiprintf_r>:
 8006fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fb8:	461d      	mov	r5, r3
 8006fba:	898b      	ldrh	r3, [r1, #12]
 8006fbc:	b09d      	sub	sp, #116	; 0x74
 8006fbe:	061f      	lsls	r7, r3, #24
 8006fc0:	4680      	mov	r8, r0
 8006fc2:	460c      	mov	r4, r1
 8006fc4:	4616      	mov	r6, r2
 8006fc6:	d50f      	bpl.n	8006fe8 <_svfiprintf_r+0x34>
 8006fc8:	690b      	ldr	r3, [r1, #16]
 8006fca:	b96b      	cbnz	r3, 8006fe8 <_svfiprintf_r+0x34>
 8006fcc:	2140      	movs	r1, #64	; 0x40
 8006fce:	f7ff ff3d 	bl	8006e4c <_malloc_r>
 8006fd2:	6020      	str	r0, [r4, #0]
 8006fd4:	6120      	str	r0, [r4, #16]
 8006fd6:	b928      	cbnz	r0, 8006fe4 <_svfiprintf_r+0x30>
 8006fd8:	230c      	movs	r3, #12
 8006fda:	f8c8 3000 	str.w	r3, [r8]
 8006fde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006fe2:	e0c8      	b.n	8007176 <_svfiprintf_r+0x1c2>
 8006fe4:	2340      	movs	r3, #64	; 0x40
 8006fe6:	6163      	str	r3, [r4, #20]
 8006fe8:	2300      	movs	r3, #0
 8006fea:	9309      	str	r3, [sp, #36]	; 0x24
 8006fec:	2320      	movs	r3, #32
 8006fee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ff2:	2330      	movs	r3, #48	; 0x30
 8006ff4:	f04f 0b01 	mov.w	fp, #1
 8006ff8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ffc:	9503      	str	r5, [sp, #12]
 8006ffe:	4637      	mov	r7, r6
 8007000:	463d      	mov	r5, r7
 8007002:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007006:	b10b      	cbz	r3, 800700c <_svfiprintf_r+0x58>
 8007008:	2b25      	cmp	r3, #37	; 0x25
 800700a:	d13e      	bne.n	800708a <_svfiprintf_r+0xd6>
 800700c:	ebb7 0a06 	subs.w	sl, r7, r6
 8007010:	d00b      	beq.n	800702a <_svfiprintf_r+0x76>
 8007012:	4653      	mov	r3, sl
 8007014:	4632      	mov	r2, r6
 8007016:	4621      	mov	r1, r4
 8007018:	4640      	mov	r0, r8
 800701a:	f7ff ff71 	bl	8006f00 <__ssputs_r>
 800701e:	3001      	adds	r0, #1
 8007020:	f000 80a4 	beq.w	800716c <_svfiprintf_r+0x1b8>
 8007024:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007026:	4453      	add	r3, sl
 8007028:	9309      	str	r3, [sp, #36]	; 0x24
 800702a:	783b      	ldrb	r3, [r7, #0]
 800702c:	2b00      	cmp	r3, #0
 800702e:	f000 809d 	beq.w	800716c <_svfiprintf_r+0x1b8>
 8007032:	2300      	movs	r3, #0
 8007034:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007038:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800703c:	9304      	str	r3, [sp, #16]
 800703e:	9307      	str	r3, [sp, #28]
 8007040:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007044:	931a      	str	r3, [sp, #104]	; 0x68
 8007046:	462f      	mov	r7, r5
 8007048:	2205      	movs	r2, #5
 800704a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800704e:	4850      	ldr	r0, [pc, #320]	; (8007190 <_svfiprintf_r+0x1dc>)
 8007050:	f7ff fbac 	bl	80067ac <memchr>
 8007054:	9b04      	ldr	r3, [sp, #16]
 8007056:	b9d0      	cbnz	r0, 800708e <_svfiprintf_r+0xda>
 8007058:	06d9      	lsls	r1, r3, #27
 800705a:	bf44      	itt	mi
 800705c:	2220      	movmi	r2, #32
 800705e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007062:	071a      	lsls	r2, r3, #28
 8007064:	bf44      	itt	mi
 8007066:	222b      	movmi	r2, #43	; 0x2b
 8007068:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800706c:	782a      	ldrb	r2, [r5, #0]
 800706e:	2a2a      	cmp	r2, #42	; 0x2a
 8007070:	d015      	beq.n	800709e <_svfiprintf_r+0xea>
 8007072:	462f      	mov	r7, r5
 8007074:	2000      	movs	r0, #0
 8007076:	250a      	movs	r5, #10
 8007078:	9a07      	ldr	r2, [sp, #28]
 800707a:	4639      	mov	r1, r7
 800707c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007080:	3b30      	subs	r3, #48	; 0x30
 8007082:	2b09      	cmp	r3, #9
 8007084:	d94d      	bls.n	8007122 <_svfiprintf_r+0x16e>
 8007086:	b1b8      	cbz	r0, 80070b8 <_svfiprintf_r+0x104>
 8007088:	e00f      	b.n	80070aa <_svfiprintf_r+0xf6>
 800708a:	462f      	mov	r7, r5
 800708c:	e7b8      	b.n	8007000 <_svfiprintf_r+0x4c>
 800708e:	4a40      	ldr	r2, [pc, #256]	; (8007190 <_svfiprintf_r+0x1dc>)
 8007090:	463d      	mov	r5, r7
 8007092:	1a80      	subs	r0, r0, r2
 8007094:	fa0b f000 	lsl.w	r0, fp, r0
 8007098:	4318      	orrs	r0, r3
 800709a:	9004      	str	r0, [sp, #16]
 800709c:	e7d3      	b.n	8007046 <_svfiprintf_r+0x92>
 800709e:	9a03      	ldr	r2, [sp, #12]
 80070a0:	1d11      	adds	r1, r2, #4
 80070a2:	6812      	ldr	r2, [r2, #0]
 80070a4:	9103      	str	r1, [sp, #12]
 80070a6:	2a00      	cmp	r2, #0
 80070a8:	db01      	blt.n	80070ae <_svfiprintf_r+0xfa>
 80070aa:	9207      	str	r2, [sp, #28]
 80070ac:	e004      	b.n	80070b8 <_svfiprintf_r+0x104>
 80070ae:	4252      	negs	r2, r2
 80070b0:	f043 0302 	orr.w	r3, r3, #2
 80070b4:	9207      	str	r2, [sp, #28]
 80070b6:	9304      	str	r3, [sp, #16]
 80070b8:	783b      	ldrb	r3, [r7, #0]
 80070ba:	2b2e      	cmp	r3, #46	; 0x2e
 80070bc:	d10c      	bne.n	80070d8 <_svfiprintf_r+0x124>
 80070be:	787b      	ldrb	r3, [r7, #1]
 80070c0:	2b2a      	cmp	r3, #42	; 0x2a
 80070c2:	d133      	bne.n	800712c <_svfiprintf_r+0x178>
 80070c4:	9b03      	ldr	r3, [sp, #12]
 80070c6:	3702      	adds	r7, #2
 80070c8:	1d1a      	adds	r2, r3, #4
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	9203      	str	r2, [sp, #12]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	bfb8      	it	lt
 80070d2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80070d6:	9305      	str	r3, [sp, #20]
 80070d8:	4d2e      	ldr	r5, [pc, #184]	; (8007194 <_svfiprintf_r+0x1e0>)
 80070da:	2203      	movs	r2, #3
 80070dc:	7839      	ldrb	r1, [r7, #0]
 80070de:	4628      	mov	r0, r5
 80070e0:	f7ff fb64 	bl	80067ac <memchr>
 80070e4:	b138      	cbz	r0, 80070f6 <_svfiprintf_r+0x142>
 80070e6:	2340      	movs	r3, #64	; 0x40
 80070e8:	1b40      	subs	r0, r0, r5
 80070ea:	fa03 f000 	lsl.w	r0, r3, r0
 80070ee:	9b04      	ldr	r3, [sp, #16]
 80070f0:	3701      	adds	r7, #1
 80070f2:	4303      	orrs	r3, r0
 80070f4:	9304      	str	r3, [sp, #16]
 80070f6:	7839      	ldrb	r1, [r7, #0]
 80070f8:	2206      	movs	r2, #6
 80070fa:	4827      	ldr	r0, [pc, #156]	; (8007198 <_svfiprintf_r+0x1e4>)
 80070fc:	1c7e      	adds	r6, r7, #1
 80070fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007102:	f7ff fb53 	bl	80067ac <memchr>
 8007106:	2800      	cmp	r0, #0
 8007108:	d038      	beq.n	800717c <_svfiprintf_r+0x1c8>
 800710a:	4b24      	ldr	r3, [pc, #144]	; (800719c <_svfiprintf_r+0x1e8>)
 800710c:	bb13      	cbnz	r3, 8007154 <_svfiprintf_r+0x1a0>
 800710e:	9b03      	ldr	r3, [sp, #12]
 8007110:	3307      	adds	r3, #7
 8007112:	f023 0307 	bic.w	r3, r3, #7
 8007116:	3308      	adds	r3, #8
 8007118:	9303      	str	r3, [sp, #12]
 800711a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800711c:	444b      	add	r3, r9
 800711e:	9309      	str	r3, [sp, #36]	; 0x24
 8007120:	e76d      	b.n	8006ffe <_svfiprintf_r+0x4a>
 8007122:	fb05 3202 	mla	r2, r5, r2, r3
 8007126:	2001      	movs	r0, #1
 8007128:	460f      	mov	r7, r1
 800712a:	e7a6      	b.n	800707a <_svfiprintf_r+0xc6>
 800712c:	2300      	movs	r3, #0
 800712e:	250a      	movs	r5, #10
 8007130:	4619      	mov	r1, r3
 8007132:	3701      	adds	r7, #1
 8007134:	9305      	str	r3, [sp, #20]
 8007136:	4638      	mov	r0, r7
 8007138:	f810 2b01 	ldrb.w	r2, [r0], #1
 800713c:	3a30      	subs	r2, #48	; 0x30
 800713e:	2a09      	cmp	r2, #9
 8007140:	d903      	bls.n	800714a <_svfiprintf_r+0x196>
 8007142:	2b00      	cmp	r3, #0
 8007144:	d0c8      	beq.n	80070d8 <_svfiprintf_r+0x124>
 8007146:	9105      	str	r1, [sp, #20]
 8007148:	e7c6      	b.n	80070d8 <_svfiprintf_r+0x124>
 800714a:	fb05 2101 	mla	r1, r5, r1, r2
 800714e:	2301      	movs	r3, #1
 8007150:	4607      	mov	r7, r0
 8007152:	e7f0      	b.n	8007136 <_svfiprintf_r+0x182>
 8007154:	ab03      	add	r3, sp, #12
 8007156:	9300      	str	r3, [sp, #0]
 8007158:	4622      	mov	r2, r4
 800715a:	4b11      	ldr	r3, [pc, #68]	; (80071a0 <_svfiprintf_r+0x1ec>)
 800715c:	a904      	add	r1, sp, #16
 800715e:	4640      	mov	r0, r8
 8007160:	f7fe f8b8 	bl	80052d4 <_printf_float>
 8007164:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007168:	4681      	mov	r9, r0
 800716a:	d1d6      	bne.n	800711a <_svfiprintf_r+0x166>
 800716c:	89a3      	ldrh	r3, [r4, #12]
 800716e:	065b      	lsls	r3, r3, #25
 8007170:	f53f af35 	bmi.w	8006fde <_svfiprintf_r+0x2a>
 8007174:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007176:	b01d      	add	sp, #116	; 0x74
 8007178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800717c:	ab03      	add	r3, sp, #12
 800717e:	9300      	str	r3, [sp, #0]
 8007180:	4622      	mov	r2, r4
 8007182:	4b07      	ldr	r3, [pc, #28]	; (80071a0 <_svfiprintf_r+0x1ec>)
 8007184:	a904      	add	r1, sp, #16
 8007186:	4640      	mov	r0, r8
 8007188:	f7fe fb50 	bl	800582c <_printf_i>
 800718c:	e7ea      	b.n	8007164 <_svfiprintf_r+0x1b0>
 800718e:	bf00      	nop
 8007190:	0800b474 	.word	0x0800b474
 8007194:	0800b47a 	.word	0x0800b47a
 8007198:	0800b47e 	.word	0x0800b47e
 800719c:	080052d5 	.word	0x080052d5
 80071a0:	08006f01 	.word	0x08006f01

080071a4 <_sbrk_r>:
 80071a4:	b538      	push	{r3, r4, r5, lr}
 80071a6:	2300      	movs	r3, #0
 80071a8:	4c05      	ldr	r4, [pc, #20]	; (80071c0 <_sbrk_r+0x1c>)
 80071aa:	4605      	mov	r5, r0
 80071ac:	4608      	mov	r0, r1
 80071ae:	6023      	str	r3, [r4, #0]
 80071b0:	f7fd fdbc 	bl	8004d2c <_sbrk>
 80071b4:	1c43      	adds	r3, r0, #1
 80071b6:	d102      	bne.n	80071be <_sbrk_r+0x1a>
 80071b8:	6823      	ldr	r3, [r4, #0]
 80071ba:	b103      	cbz	r3, 80071be <_sbrk_r+0x1a>
 80071bc:	602b      	str	r3, [r5, #0]
 80071be:	bd38      	pop	{r3, r4, r5, pc}
 80071c0:	200006a0 	.word	0x200006a0

080071c4 <__ascii_mbtowc>:
 80071c4:	b082      	sub	sp, #8
 80071c6:	b901      	cbnz	r1, 80071ca <__ascii_mbtowc+0x6>
 80071c8:	a901      	add	r1, sp, #4
 80071ca:	b142      	cbz	r2, 80071de <__ascii_mbtowc+0x1a>
 80071cc:	b14b      	cbz	r3, 80071e2 <__ascii_mbtowc+0x1e>
 80071ce:	7813      	ldrb	r3, [r2, #0]
 80071d0:	600b      	str	r3, [r1, #0]
 80071d2:	7812      	ldrb	r2, [r2, #0]
 80071d4:	1c10      	adds	r0, r2, #0
 80071d6:	bf18      	it	ne
 80071d8:	2001      	movne	r0, #1
 80071da:	b002      	add	sp, #8
 80071dc:	4770      	bx	lr
 80071de:	4610      	mov	r0, r2
 80071e0:	e7fb      	b.n	80071da <__ascii_mbtowc+0x16>
 80071e2:	f06f 0001 	mvn.w	r0, #1
 80071e6:	e7f8      	b.n	80071da <__ascii_mbtowc+0x16>

080071e8 <memmove>:
 80071e8:	4288      	cmp	r0, r1
 80071ea:	b510      	push	{r4, lr}
 80071ec:	eb01 0302 	add.w	r3, r1, r2
 80071f0:	d807      	bhi.n	8007202 <memmove+0x1a>
 80071f2:	1e42      	subs	r2, r0, #1
 80071f4:	4299      	cmp	r1, r3
 80071f6:	d00a      	beq.n	800720e <memmove+0x26>
 80071f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071fc:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007200:	e7f8      	b.n	80071f4 <memmove+0xc>
 8007202:	4283      	cmp	r3, r0
 8007204:	d9f5      	bls.n	80071f2 <memmove+0xa>
 8007206:	1881      	adds	r1, r0, r2
 8007208:	1ad2      	subs	r2, r2, r3
 800720a:	42d3      	cmn	r3, r2
 800720c:	d100      	bne.n	8007210 <memmove+0x28>
 800720e:	bd10      	pop	{r4, pc}
 8007210:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007214:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007218:	e7f7      	b.n	800720a <memmove+0x22>

0800721a <__malloc_lock>:
 800721a:	4770      	bx	lr

0800721c <__malloc_unlock>:
 800721c:	4770      	bx	lr

0800721e <_realloc_r>:
 800721e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007220:	4607      	mov	r7, r0
 8007222:	4614      	mov	r4, r2
 8007224:	460e      	mov	r6, r1
 8007226:	b921      	cbnz	r1, 8007232 <_realloc_r+0x14>
 8007228:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800722c:	4611      	mov	r1, r2
 800722e:	f7ff be0d 	b.w	8006e4c <_malloc_r>
 8007232:	b922      	cbnz	r2, 800723e <_realloc_r+0x20>
 8007234:	f7ff fdbe 	bl	8006db4 <_free_r>
 8007238:	4625      	mov	r5, r4
 800723a:	4628      	mov	r0, r5
 800723c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800723e:	f000 f821 	bl	8007284 <_malloc_usable_size_r>
 8007242:	42a0      	cmp	r0, r4
 8007244:	d20f      	bcs.n	8007266 <_realloc_r+0x48>
 8007246:	4621      	mov	r1, r4
 8007248:	4638      	mov	r0, r7
 800724a:	f7ff fdff 	bl	8006e4c <_malloc_r>
 800724e:	4605      	mov	r5, r0
 8007250:	2800      	cmp	r0, #0
 8007252:	d0f2      	beq.n	800723a <_realloc_r+0x1c>
 8007254:	4631      	mov	r1, r6
 8007256:	4622      	mov	r2, r4
 8007258:	f7ff fab6 	bl	80067c8 <memcpy>
 800725c:	4631      	mov	r1, r6
 800725e:	4638      	mov	r0, r7
 8007260:	f7ff fda8 	bl	8006db4 <_free_r>
 8007264:	e7e9      	b.n	800723a <_realloc_r+0x1c>
 8007266:	4635      	mov	r5, r6
 8007268:	e7e7      	b.n	800723a <_realloc_r+0x1c>

0800726a <__ascii_wctomb>:
 800726a:	b149      	cbz	r1, 8007280 <__ascii_wctomb+0x16>
 800726c:	2aff      	cmp	r2, #255	; 0xff
 800726e:	bf8b      	itete	hi
 8007270:	238a      	movhi	r3, #138	; 0x8a
 8007272:	700a      	strbls	r2, [r1, #0]
 8007274:	6003      	strhi	r3, [r0, #0]
 8007276:	2001      	movls	r0, #1
 8007278:	bf88      	it	hi
 800727a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800727e:	4770      	bx	lr
 8007280:	4608      	mov	r0, r1
 8007282:	4770      	bx	lr

08007284 <_malloc_usable_size_r>:
 8007284:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007288:	1f18      	subs	r0, r3, #4
 800728a:	2b00      	cmp	r3, #0
 800728c:	bfbc      	itt	lt
 800728e:	580b      	ldrlt	r3, [r1, r0]
 8007290:	18c0      	addlt	r0, r0, r3
 8007292:	4770      	bx	lr
 8007294:	0000      	movs	r0, r0
	...

08007298 <floor>:
 8007298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800729c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 80072a0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 80072a4:	2e13      	cmp	r6, #19
 80072a6:	4607      	mov	r7, r0
 80072a8:	460b      	mov	r3, r1
 80072aa:	460c      	mov	r4, r1
 80072ac:	4605      	mov	r5, r0
 80072ae:	dc35      	bgt.n	800731c <floor+0x84>
 80072b0:	2e00      	cmp	r6, #0
 80072b2:	da16      	bge.n	80072e2 <floor+0x4a>
 80072b4:	a336      	add	r3, pc, #216	; (adr r3, 8007390 <floor+0xf8>)
 80072b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ba:	f7f8 ffc3 	bl	8000244 <__adddf3>
 80072be:	2200      	movs	r2, #0
 80072c0:	2300      	movs	r3, #0
 80072c2:	f7f9 fc05 	bl	8000ad0 <__aeabi_dcmpgt>
 80072c6:	b148      	cbz	r0, 80072dc <floor+0x44>
 80072c8:	2c00      	cmp	r4, #0
 80072ca:	da5b      	bge.n	8007384 <floor+0xec>
 80072cc:	2500      	movs	r5, #0
 80072ce:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80072d2:	4a31      	ldr	r2, [pc, #196]	; (8007398 <floor+0x100>)
 80072d4:	433b      	orrs	r3, r7
 80072d6:	42ab      	cmp	r3, r5
 80072d8:	bf18      	it	ne
 80072da:	4614      	movne	r4, r2
 80072dc:	4623      	mov	r3, r4
 80072de:	462f      	mov	r7, r5
 80072e0:	e026      	b.n	8007330 <floor+0x98>
 80072e2:	4a2e      	ldr	r2, [pc, #184]	; (800739c <floor+0x104>)
 80072e4:	fa42 f806 	asr.w	r8, r2, r6
 80072e8:	ea01 0208 	and.w	r2, r1, r8
 80072ec:	4302      	orrs	r2, r0
 80072ee:	d01f      	beq.n	8007330 <floor+0x98>
 80072f0:	a327      	add	r3, pc, #156	; (adr r3, 8007390 <floor+0xf8>)
 80072f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f6:	f7f8 ffa5 	bl	8000244 <__adddf3>
 80072fa:	2200      	movs	r2, #0
 80072fc:	2300      	movs	r3, #0
 80072fe:	f7f9 fbe7 	bl	8000ad0 <__aeabi_dcmpgt>
 8007302:	2800      	cmp	r0, #0
 8007304:	d0ea      	beq.n	80072dc <floor+0x44>
 8007306:	2c00      	cmp	r4, #0
 8007308:	bfbe      	ittt	lt
 800730a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800730e:	fa43 f606 	asrlt.w	r6, r3, r6
 8007312:	19a4      	addlt	r4, r4, r6
 8007314:	ea24 0408 	bic.w	r4, r4, r8
 8007318:	2500      	movs	r5, #0
 800731a:	e7df      	b.n	80072dc <floor+0x44>
 800731c:	2e33      	cmp	r6, #51	; 0x33
 800731e:	dd0b      	ble.n	8007338 <floor+0xa0>
 8007320:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007324:	d104      	bne.n	8007330 <floor+0x98>
 8007326:	4602      	mov	r2, r0
 8007328:	f7f8 ff8c 	bl	8000244 <__adddf3>
 800732c:	4607      	mov	r7, r0
 800732e:	460b      	mov	r3, r1
 8007330:	4638      	mov	r0, r7
 8007332:	4619      	mov	r1, r3
 8007334:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007338:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800733c:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8007340:	fa22 f808 	lsr.w	r8, r2, r8
 8007344:	ea18 0f00 	tst.w	r8, r0
 8007348:	d0f2      	beq.n	8007330 <floor+0x98>
 800734a:	a311      	add	r3, pc, #68	; (adr r3, 8007390 <floor+0xf8>)
 800734c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007350:	f7f8 ff78 	bl	8000244 <__adddf3>
 8007354:	2200      	movs	r2, #0
 8007356:	2300      	movs	r3, #0
 8007358:	f7f9 fbba 	bl	8000ad0 <__aeabi_dcmpgt>
 800735c:	2800      	cmp	r0, #0
 800735e:	d0bd      	beq.n	80072dc <floor+0x44>
 8007360:	2c00      	cmp	r4, #0
 8007362:	da02      	bge.n	800736a <floor+0xd2>
 8007364:	2e14      	cmp	r6, #20
 8007366:	d103      	bne.n	8007370 <floor+0xd8>
 8007368:	3401      	adds	r4, #1
 800736a:	ea25 0508 	bic.w	r5, r5, r8
 800736e:	e7b5      	b.n	80072dc <floor+0x44>
 8007370:	2301      	movs	r3, #1
 8007372:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007376:	fa03 f606 	lsl.w	r6, r3, r6
 800737a:	4435      	add	r5, r6
 800737c:	42bd      	cmp	r5, r7
 800737e:	bf38      	it	cc
 8007380:	18e4      	addcc	r4, r4, r3
 8007382:	e7f2      	b.n	800736a <floor+0xd2>
 8007384:	2500      	movs	r5, #0
 8007386:	462c      	mov	r4, r5
 8007388:	e7a8      	b.n	80072dc <floor+0x44>
 800738a:	bf00      	nop
 800738c:	f3af 8000 	nop.w
 8007390:	8800759c 	.word	0x8800759c
 8007394:	7e37e43c 	.word	0x7e37e43c
 8007398:	bff00000 	.word	0xbff00000
 800739c:	000fffff 	.word	0x000fffff

080073a0 <_init>:
 80073a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073a2:	bf00      	nop
 80073a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073a6:	bc08      	pop	{r3}
 80073a8:	469e      	mov	lr, r3
 80073aa:	4770      	bx	lr

080073ac <_fini>:
 80073ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ae:	bf00      	nop
 80073b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073b2:	bc08      	pop	{r3}
 80073b4:	469e      	mov	lr, r3
 80073b6:	4770      	bx	lr
